
rtosproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005248  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080053d8  080053d8  000063d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054ac  080054ac  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080054ac  080054ac  000064ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054b4  080054b4  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054b4  080054b4  000064b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054b8  080054b8  000064b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080054bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          000042d4  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004334  20004334  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001429b  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dab  00000000  00000000  0001b32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  0001e0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db0  00000000  00000000  0001f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002424c  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000131c2  00000000  00000000  0004426c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e087e  00000000  00000000  0005742e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00137cac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e84  00000000  00000000  00137cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0013cb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053c0 	.word	0x080053c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080053c0 	.word	0x080053c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000007c 	.word	0x2000007c
 80005dc:	2000011c 	.word	0x2000011c

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b096      	sub	sp, #88	@ 0x58
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fcfd 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f851 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f9d9 	bl	80009a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005f2:	f000 f8b7 	bl	8000764 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005f6:	f000 f907 	bl	8000808 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f9a9 	bl	8000950 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 80005fe:	f000 f955 	bl	80008ac <MX_ADC3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of gas */
  osThreadDef(gas, rotsgas, osPriorityHigh, 0, 128);
 8000602:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <main+0x98>)
 8000604:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gasHandle = osThreadCreate(osThread(gas), NULL);
 8000616:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f002 ff66 	bl	80034ee <osThreadCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a15      	ldr	r2, [pc, #84]	@ (800067c <main+0x9c>)
 8000626:	6013      	str	r3, [r2, #0]

  /* definition and creation of IRRIGATION */
  osThreadDef(IRRIGATION, RTOSIRRIGATION, osPriorityIdle, 0, 128);
 8000628:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <main+0xa0>)
 800062a:	f107 0420 	add.w	r4, r7, #32
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000638:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IRRIGATIONHandle = osThreadCreate(osThread(IRRIGATION), NULL);
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 ff53 	bl	80034ee <osThreadCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <main+0xa4>)
 800064c:	6013      	str	r3, [r2, #0]

  /* definition and creation of ultra */
  osThreadDef(ultra, rtosultra, osPriorityIdle, 0, 128);
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <main+0xa8>)
 8000650:	1d3c      	adds	r4, r7, #4
 8000652:	461d      	mov	r5, r3
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ultraHandle = osThreadCreate(osThread(ultra), NULL);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f002 ff42 	bl	80034ee <osThreadCreate>
 800066a:	4603      	mov	r3, r0
 800066c:	4a07      	ldr	r2, [pc, #28]	@ (800068c <main+0xac>)
 800066e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000670:	f002 ff36 	bl	80034e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <main+0x94>
 8000678:	080053dc 	.word	0x080053dc
 800067c:	2000043c 	.word	0x2000043c
 8000680:	08005404 	.word	0x08005404
 8000684:	20000440 	.word	0x20000440
 8000688:	08005428 	.word	0x08005428
 800068c:	20000444 	.word	0x20000444

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	@ 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	@ 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 f9b2 	bl	8004a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b28      	ldr	r3, [pc, #160]	@ (800075c <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	4a27      	ldr	r2, [pc, #156]	@ (800075c <SystemClock_Config+0xcc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c4:	4b25      	ldr	r3, [pc, #148]	@ (800075c <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a21      	ldr	r2, [pc, #132]	@ (8000760 <SystemClock_Config+0xd0>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000704:	2332      	movs	r3, #50	@ 0x32
 8000706:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800070c:	2307      	movs	r3, #7
 800070e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fb59 	bl	8001dcc <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000720:	f000 fa16 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000730:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fdba 	bl	80022bc <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074e:	f000 f9ff 	bl	8000b50 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	@ 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000776:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <MX_ADC1_Init+0x98>)
 8000778:	4a21      	ldr	r2, [pc, #132]	@ (8000800 <MX_ADC1_Init+0x9c>)
 800077a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <MX_ADC1_Init+0x98>)
 800077e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000782:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000784:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <MX_ADC1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a4:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <MX_ADC1_Init+0xa0>)
 80007a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c4:	480d      	ldr	r0, [pc, #52]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007c6:	f000 fc4f 	bl	8001068 <HAL_ADC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d0:	f000 f9be 	bl	8000b50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007e6:	f000 fe21 	bl	800142c <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f0:	f000 f9ae 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000031c 	.word	0x2000031c
 8000800:	40012000 	.word	0x40012000
 8000804:	0f000001 	.word	0x0f000001

08000808 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800081a:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <MX_ADC2_Init+0x98>)
 800081c:	4a21      	ldr	r2, [pc, #132]	@ (80008a4 <MX_ADC2_Init+0x9c>)
 800081e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000820:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <MX_ADC2_Init+0x98>)
 8000822:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000826:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000828:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_ADC2_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <MX_ADC2_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000834:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <MX_ADC2_Init+0x98>)
 8000836:	2200      	movs	r2, #0
 8000838:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <MX_ADC2_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_ADC2_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_ADC2_Init+0x98>)
 800084a:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <MX_ADC2_Init+0xa0>)
 800084c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_ADC2_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_ADC2_Init+0x98>)
 8000856:	2201      	movs	r2, #1
 8000858:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_ADC2_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_ADC2_Init+0x98>)
 8000864:	2201      	movs	r2, #1
 8000866:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000868:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <MX_ADC2_Init+0x98>)
 800086a:	f000 fbfd 	bl	8001068 <HAL_ADC_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000874:	f000 f96c 	bl	8000b50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000878:	2305      	movs	r3, #5
 800087a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800087c:	2301      	movs	r3, #1
 800087e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_ADC2_Init+0x98>)
 800088a:	f000 fdcf 	bl	800142c <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000894:	f000 f95c 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000364 	.word	0x20000364
 80008a4:	40012100 	.word	0x40012100
 80008a8:	0f000001 	.word	0x0f000001

080008ac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80008be:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <MX_ADC3_Init+0x98>)
 80008c0:	4a21      	ldr	r2, [pc, #132]	@ (8000948 <MX_ADC3_Init+0x9c>)
 80008c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_ADC3_Init+0x98>)
 80008c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008ca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_ADC3_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_ADC3_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <MX_ADC3_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008de:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <MX_ADC3_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e6:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <MX_ADC3_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ec:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_ADC3_Init+0x98>)
 80008ee:	4a17      	ldr	r2, [pc, #92]	@ (800094c <MX_ADC3_Init+0xa0>)
 80008f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f2:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_ADC3_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_ADC3_Init+0x98>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_ADC3_Init+0x98>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_ADC3_Init+0x98>)
 8000908:	2201      	movs	r2, #1
 800090a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800090c:	480d      	ldr	r0, [pc, #52]	@ (8000944 <MX_ADC3_Init+0x98>)
 800090e:	f000 fbab 	bl	8001068 <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000918:	f000 f91a 	bl	8000b50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800091c:	2302      	movs	r3, #2
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_ADC3_Init+0x98>)
 800092e:	f000 fd7d 	bl	800142c <HAL_ADC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000938:	f000 f90a 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200003ac 	.word	0x200003ac
 8000948:	40012200 	.word	0x40012200
 800094c:	0f000001 	.word	0x0f000001

08000950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 8000956:	4a12      	ldr	r2, [pc, #72]	@ (80009a0 <MX_USART2_UART_Init+0x50>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_USART2_UART_Init+0x4c>)
 8000988:	f002 f986 	bl	8002c98 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000992:	f000 f8dd 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200003f4 	.word	0x200003f4
 80009a0:	40004400 	.word	0x40004400

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <MX_GPIO_Init+0x80>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a18      	ldr	r2, [pc, #96]	@ (8000a24 <MX_GPIO_Init+0x80>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <MX_GPIO_Init+0x80>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_GPIO_Init+0x80>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a11      	ldr	r2, [pc, #68]	@ (8000a24 <MX_GPIO_Init+0x80>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_GPIO_Init+0x80>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 80009f8:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <MX_GPIO_Init+0x84>)
 80009fa:	f001 f9b3 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80009fe:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000a02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_GPIO_Init+0x84>)
 8000a18:	f001 f808 	bl	8001a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <rotsgas>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_rotsgas */
void rotsgas(void const * argument)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000a34:	480e      	ldr	r0, [pc, #56]	@ (8000a70 <rotsgas+0x44>)
 8000a36:	f000 fb5b 	bl	80010f0 <HAL_ADC_Start>
	  		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a3a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a3e:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <rotsgas+0x44>)
 8000a40:	f000 fc5b 	bl	80012fa <HAL_ADC_PollForConversion>
	  		uint16_t value = HAL_ADC_GetValue(&hadc1);
 8000a44:	480a      	ldr	r0, [pc, #40]	@ (8000a70 <rotsgas+0x44>)
 8000a46:	f000 fce3 	bl	8001410 <HAL_ADC_GetValue>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	81fb      	strh	r3, [r7, #14]
	  		HAL_ADC_Stop(&hadc1);
 8000a4e:	4808      	ldr	r0, [pc, #32]	@ (8000a70 <rotsgas+0x44>)
 8000a50:	f000 fc20 	bl	8001294 <HAL_ADC_Stop>
	  		if(value>2300)
 8000a54:	89fb      	ldrh	r3, [r7, #14]
 8000a56:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d904      	bls.n	8000a68 <rotsgas+0x3c>
	  		{
	  			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a62:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <rotsgas+0x48>)
 8000a64:	f001 f997 	bl	8001d96 <HAL_GPIO_TogglePin>
	  		}
    osDelay(1);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f002 fd8c 	bl	8003586 <osDelay>
  {
 8000a6e:	e7e1      	b.n	8000a34 <rotsgas+0x8>
 8000a70:	2000031c 	.word	0x2000031c
 8000a74:	40020c00 	.word	0x40020c00

08000a78 <RTOSIRRIGATION>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOSIRRIGATION */
void RTOSIRRIGATION(void const * argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc2);
 8000a80:	480e      	ldr	r0, [pc, #56]	@ (8000abc <RTOSIRRIGATION+0x44>)
 8000a82:	f000 fb35 	bl	80010f0 <HAL_ADC_Start>
	 	  		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000a86:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a8a:	480c      	ldr	r0, [pc, #48]	@ (8000abc <RTOSIRRIGATION+0x44>)
 8000a8c:	f000 fc35 	bl	80012fa <HAL_ADC_PollForConversion>
	 	  		uint16_t value = HAL_ADC_GetValue(&hadc2);
 8000a90:	480a      	ldr	r0, [pc, #40]	@ (8000abc <RTOSIRRIGATION+0x44>)
 8000a92:	f000 fcbd 	bl	8001410 <HAL_ADC_GetValue>
 8000a96:	4603      	mov	r3, r0
 8000a98:	81fb      	strh	r3, [r7, #14]
	 	  		HAL_ADC_Stop(&hadc2);
 8000a9a:	4808      	ldr	r0, [pc, #32]	@ (8000abc <RTOSIRRIGATION+0x44>)
 8000a9c:	f000 fbfa 	bl	8001294 <HAL_ADC_Stop>
	 	  		if(value>100)
 8000aa0:	89fb      	ldrh	r3, [r7, #14]
 8000aa2:	2b64      	cmp	r3, #100	@ 0x64
 8000aa4:	d904      	bls.n	8000ab0 <RTOSIRRIGATION+0x38>
	 	  			  		{
	 	  			  			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000aa6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aaa:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <RTOSIRRIGATION+0x48>)
 8000aac:	f001 f973 	bl	8001d96 <HAL_GPIO_TogglePin>
	 	  			  		}


    osDelay(1000);
 8000ab0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab4:	f002 fd67 	bl	8003586 <osDelay>
  {
 8000ab8:	e7e2      	b.n	8000a80 <RTOSIRRIGATION+0x8>
 8000aba:	bf00      	nop
 8000abc:	20000364 	.word	0x20000364
 8000ac0:	40020c00 	.word	0x40020c00

08000ac4 <rtosultra>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rtosultra */
void rtosultra(void const * argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rtosultra */
	char str[20];
  /* Infinite loop */
  for(;;)
  {
	  	  	  	   HAL_ADC_Start(&hadc3);
 8000acc:	4814      	ldr	r0, [pc, #80]	@ (8000b20 <rtosultra+0x5c>)
 8000ace:	f000 fb0f 	bl	80010f0 <HAL_ADC_Start>
	 	 	  		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8000ad2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ad6:	4812      	ldr	r0, [pc, #72]	@ (8000b20 <rtosultra+0x5c>)
 8000ad8:	f000 fc0f 	bl	80012fa <HAL_ADC_PollForConversion>
	 	 	  		uint16_t value = HAL_ADC_GetValue(&hadc3);
 8000adc:	4810      	ldr	r0, [pc, #64]	@ (8000b20 <rtosultra+0x5c>)
 8000ade:	f000 fc97 	bl	8001410 <HAL_ADC_GetValue>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	83fb      	strh	r3, [r7, #30]
	 	 	  		HAL_ADC_Stop(&hadc3);
 8000ae6:	480e      	ldr	r0, [pc, #56]	@ (8000b20 <rtosultra+0x5c>)
 8000ae8:	f000 fbd4 	bl	8001294 <HAL_ADC_Stop>
	 	 	  	    sprintf(str, "ADC value = %d\r\n", value);
 8000aec:	8bfa      	ldrh	r2, [r7, #30]
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	490c      	ldr	r1, [pc, #48]	@ (8000b24 <rtosultra+0x60>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 ff65 	bl	80049c4 <siprintf>
	 	 	  		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fb66 	bl	80001d0 <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	f107 0108 	add.w	r1, r7, #8
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b10:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <rtosultra+0x64>)
 8000b12:	f002 f911 	bl	8002d38 <HAL_UART_Transmit>


	     osDelay(1);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f002 fd35 	bl	8003586 <osDelay>
  {
 8000b1c:	bf00      	nop
 8000b1e:	e7d5      	b.n	8000acc <rtosultra+0x8>
 8000b20:	200003ac 	.word	0x200003ac
 8000b24:	08005444 	.word	0x08005444
 8000b28:	200003f4 	.word	0x200003f4

08000b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000b3e:	f000 fa73 	bl	8001028 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40010000 	.word	0x40010000

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <HAL_MspInit+0x54>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	4a11      	ldr	r2, [pc, #68]	@ (8000bb0 <HAL_MspInit+0x54>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b72:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <HAL_MspInit+0x54>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <HAL_MspInit+0x54>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <HAL_MspInit+0x54>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <HAL_MspInit+0x54>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	f06f 0001 	mvn.w	r0, #1
 8000ba2:	f000 ff19 	bl	80019d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	@ 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a45      	ldr	r2, [pc, #276]	@ (8000ce8 <HAL_ADC_MspInit+0x134>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d128      	bne.n	8000c28 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
 8000bda:	4b44      	ldr	r3, [pc, #272]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	4a43      	ldr	r2, [pc, #268]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be6:	4b41      	ldr	r3, [pc, #260]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bee:	623b      	str	r3, [r7, #32]
 8000bf0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a3c      	ldr	r2, [pc, #240]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b3a      	ldr	r3, [pc, #232]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c12:	2303      	movs	r3, #3
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4833      	ldr	r0, [pc, #204]	@ (8000cf0 <HAL_ADC_MspInit+0x13c>)
 8000c22:	f000 ff03 	bl	8001a2c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000c26:	e05a      	b.n	8000cde <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a31      	ldr	r2, [pc, #196]	@ (8000cf4 <HAL_ADC_MspInit+0x140>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d128      	bne.n	8000c84 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	4b2d      	ldr	r3, [pc, #180]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000c3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c42:	4b2a      	ldr	r3, [pc, #168]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a25      	ldr	r2, [pc, #148]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b23      	ldr	r3, [pc, #140]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c6a:	2320      	movs	r3, #32
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481c      	ldr	r0, [pc, #112]	@ (8000cf0 <HAL_ADC_MspInit+0x13c>)
 8000c7e:	f000 fed5 	bl	8001a2c <HAL_GPIO_Init>
}
 8000c82:	e02c      	b.n	8000cde <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf8 <HAL_ADC_MspInit+0x144>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d127      	bne.n	8000cde <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	4a15      	ldr	r2, [pc, #84]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000c98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <HAL_ADC_MspInit+0x138>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <HAL_ADC_MspInit+0x13c>)
 8000cda:	f000 fea7 	bl	8001a2c <HAL_GPIO_Init>
}
 8000cde:	bf00      	nop
 8000ce0:	3738      	adds	r7, #56	@ 0x38
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40012000 	.word	0x40012000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	40012100 	.word	0x40012100
 8000cf8:	40012200 	.word	0x40012200

08000cfc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	@ 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a28      	ldr	r2, [pc, #160]	@ (8000dbc <HAL_UART_MspInit+0xc0>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d149      	bne.n	8000db2 <HAL_UART_MspInit+0xb6>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b27      	ldr	r3, [pc, #156]	@ (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	4a26      	ldr	r2, [pc, #152]	@ (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2e:	4b24      	ldr	r3, [pc, #144]	@ (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a18      	ldr	r2, [pc, #96]	@ (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d72:	2308      	movs	r3, #8
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d82:	2307      	movs	r3, #7
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480d      	ldr	r0, [pc, #52]	@ (8000dc4 <HAL_UART_MspInit+0xc8>)
 8000d8e:	f000 fe4d 	bl	8001a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d92:	2320      	movs	r3, #32
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da2:	2307      	movs	r3, #7
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4806      	ldr	r0, [pc, #24]	@ (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000dae:	f000 fe3d 	bl	8001a2c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	@ 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40004400 	.word	0x40004400
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40020c00 	.word	0x40020c00

08000dcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	@ 0x30
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea0 <HAL_InitTick+0xd4>)
 8000de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de4:	4a2e      	ldr	r2, [pc, #184]	@ (8000ea0 <HAL_InitTick+0xd4>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dec:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea0 <HAL_InitTick+0xd4>)
 8000dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000df8:	f107 020c 	add.w	r2, r7, #12
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fc7a 	bl	80026fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e08:	f001 fc64 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e14:	4a23      	ldr	r2, [pc, #140]	@ (8000ea4 <HAL_InitTick+0xd8>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	0c9b      	lsrs	r3, r3, #18
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e20:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <HAL_InitTick+0xdc>)
 8000e22:	4a22      	ldr	r2, [pc, #136]	@ (8000eac <HAL_InitTick+0xe0>)
 8000e24:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e26:	4b20      	ldr	r3, [pc, #128]	@ (8000ea8 <HAL_InitTick+0xdc>)
 8000e28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea8 <HAL_InitTick+0xdc>)
 8000e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <HAL_InitTick+0xdc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea8 <HAL_InitTick+0xdc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e40:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <HAL_InitTick+0xdc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e46:	4818      	ldr	r0, [pc, #96]	@ (8000ea8 <HAL_InitTick+0xdc>)
 8000e48:	f001 fc8a 	bl	8002760 <HAL_TIM_Base_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d11b      	bne.n	8000e92 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e5a:	4813      	ldr	r0, [pc, #76]	@ (8000ea8 <HAL_InitTick+0xdc>)
 8000e5c:	f001 fcda 	bl	8002814 <HAL_TIM_Base_Start_IT>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d111      	bne.n	8000e92 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e6e:	2019      	movs	r0, #25
 8000e70:	f000 fdce 	bl	8001a10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b0f      	cmp	r3, #15
 8000e78:	d808      	bhi.n	8000e8c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	2019      	movs	r0, #25
 8000e80:	f000 fdaa 	bl	80019d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e84:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_InitTick+0xe4>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e002      	b.n	8000e92 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3730      	adds	r7, #48	@ 0x30
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	431bde83 	.word	0x431bde83
 8000ea8:	20000448 	.word	0x20000448
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <NMI_Handler+0x4>

08000ebc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <MemManage_Handler+0x4>

08000ecc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ef2:	f001 fcff 	bl	80028f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000448 	.word	0x20000448

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f003 fdd0 	bl	8004ad4 <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20020000 	.word	0x20020000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	20000490 	.word	0x20000490
 8000f68:	20004338 	.word	0x20004338

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f94:	f7ff ffea 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f003 fd8f 	bl	8004ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc2:	f7ff fb0d 	bl	80005e0 <main>
  bx  lr    
 8000fc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000fd4:	080054bc 	.word	0x080054bc
  ldr r2, =_sbss
 8000fd8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000fdc:	20004334 	.word	0x20004334

08000fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <HAL_Init+0x40>)
 8000fee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <HAL_Init+0x40>)
 8000ffa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	@ (8001024 <HAL_Init+0x40>)
 8001006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 fcd8 	bl	80019c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	200f      	movs	r0, #15
 8001014:	f7ff feda 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fda0 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023c00 	.word	0x40023c00

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	20000494 	.word	0x20000494

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000494 	.word	0x20000494

08001068 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e033      	b.n	80010e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	2b00      	cmp	r3, #0
 8001084:	d109      	bne.n	800109a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fd94 	bl	8000bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d118      	bne.n	80010d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010ae:	f023 0302 	bic.w	r3, r3, #2
 80010b2:	f043 0202 	orr.w	r2, r3, #2
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fad8 	bl	8001670 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	f023 0303 	bic.w	r3, r3, #3
 80010ce:	f043 0201 	orr.w	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80010d6:	e001      	b.n	80010dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_ADC_Start+0x1a>
 8001106:	2302      	movs	r3, #2
 8001108:	e0b2      	b.n	8001270 <HAL_ADC_Start+0x180>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b01      	cmp	r3, #1
 800111e:	d018      	beq.n	8001152 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001130:	4b52      	ldr	r3, [pc, #328]	@ (800127c <HAL_ADC_Start+0x18c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a52      	ldr	r2, [pc, #328]	@ (8001280 <HAL_ADC_Start+0x190>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9a      	lsrs	r2, r3, #18
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001144:	e002      	b.n	800114c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	3b01      	subs	r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f9      	bne.n	8001146 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b01      	cmp	r3, #1
 800115e:	d17a      	bne.n	8001256 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800117e:	2b00      	cmp	r3, #0
 8001180:	d007      	beq.n	8001192 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800118a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800119a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800119e:	d106      	bne.n	80011ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a4:	f023 0206 	bic.w	r2, r3, #6
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80011ac:	e002      	b.n	80011b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011bc:	4b31      	ldr	r3, [pc, #196]	@ (8001284 <HAL_ADC_Start+0x194>)
 80011be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80011c8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d12a      	bne.n	800122c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a2b      	ldr	r2, [pc, #172]	@ (8001288 <HAL_ADC_Start+0x198>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d015      	beq.n	800120c <HAL_ADC_Start+0x11c>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a29      	ldr	r2, [pc, #164]	@ (800128c <HAL_ADC_Start+0x19c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d105      	bne.n	80011f6 <HAL_ADC_Start+0x106>
 80011ea:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <HAL_ADC_Start+0x194>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 031f 	and.w	r3, r3, #31
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00a      	beq.n	800120c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a25      	ldr	r2, [pc, #148]	@ (8001290 <HAL_ADC_Start+0x1a0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d136      	bne.n	800126e <HAL_ADC_Start+0x17e>
 8001200:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <HAL_ADC_Start+0x194>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b00      	cmp	r3, #0
 800120a:	d130      	bne.n	800126e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d129      	bne.n	800126e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	e020      	b.n	800126e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a15      	ldr	r2, [pc, #84]	@ (8001288 <HAL_ADC_Start+0x198>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d11b      	bne.n	800126e <HAL_ADC_Start+0x17e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d114      	bne.n	800126e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	e00b      	b.n	800126e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	f043 0210 	orr.w	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	f043 0201 	orr.w	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000000 	.word	0x20000000
 8001280:	431bde83 	.word	0x431bde83
 8001284:	40012300 	.word	0x40012300
 8001288:	40012000 	.word	0x40012000
 800128c:	40012100 	.word	0x40012100
 8001290:	40012200 	.word	0x40012200

08001294 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <HAL_ADC_Stop+0x16>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e021      	b.n	80012ee <HAL_ADC_Stop+0x5a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0201 	bic.w	r2, r2, #1
 80012c0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d109      	bne.n	80012e4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	f043 0201 	orr.w	r2, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001316:	d113      	bne.n	8001340 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001326:	d10b      	bne.n	8001340 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f043 0220 	orr.w	r2, r3, #32
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e063      	b.n	8001408 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001340:	f7ff fe86 	bl	8001050 <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001346:	e021      	b.n	800138c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800134e:	d01d      	beq.n	800138c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <HAL_ADC_PollForConversion+0x6c>
 8001356:	f7ff fe7b 	bl	8001050 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d212      	bcs.n	800138c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b02      	cmp	r3, #2
 8001372:	d00b      	beq.n	800138c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	f043 0204 	orr.w	r2, r3, #4
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e03d      	b.n	8001408 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b02      	cmp	r3, #2
 8001398:	d1d6      	bne.n	8001348 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f06f 0212 	mvn.w	r2, #18
 80013a2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d123      	bne.n	8001406 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d11f      	bne.n	8001406 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013cc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d111      	bne.n	8001406 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d105      	bne.n	8001406 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x1c>
 8001444:	2302      	movs	r3, #2
 8001446:	e105      	b.n	8001654 <HAL_ADC_ConfigChannel+0x228>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b09      	cmp	r3, #9
 8001456:	d925      	bls.n	80014a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68d9      	ldr	r1, [r3, #12]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	3b1e      	subs	r3, #30
 800146e:	2207      	movs	r2, #7
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43da      	mvns	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	400a      	ands	r2, r1
 800147c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68d9      	ldr	r1, [r3, #12]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	4603      	mov	r3, r0
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4403      	add	r3, r0
 8001496:	3b1e      	subs	r3, #30
 8001498:	409a      	lsls	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	e022      	b.n	80014ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6919      	ldr	r1, [r3, #16]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	2207      	movs	r2, #7
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	400a      	ands	r2, r1
 80014c6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6919      	ldr	r1, [r3, #16]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	4603      	mov	r3, r0
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4403      	add	r3, r0
 80014e0:	409a      	lsls	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d824      	bhi.n	800153c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b05      	subs	r3, #5
 8001504:	221f      	movs	r2, #31
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	400a      	ands	r2, r1
 8001512:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	3b05      	subs	r3, #5
 800152e:	fa00 f203 	lsl.w	r2, r0, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	635a      	str	r2, [r3, #52]	@ 0x34
 800153a:	e04c      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d824      	bhi.n	800158e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b23      	subs	r3, #35	@ 0x23
 8001556:	221f      	movs	r2, #31
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43da      	mvns	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	400a      	ands	r2, r1
 8001564:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b23      	subs	r3, #35	@ 0x23
 8001580:	fa00 f203 	lsl.w	r2, r0, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	631a      	str	r2, [r3, #48]	@ 0x30
 800158c:	e023      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	3b41      	subs	r3, #65	@ 0x41
 80015a0:	221f      	movs	r2, #31
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	400a      	ands	r2, r1
 80015ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b41      	subs	r3, #65	@ 0x41
 80015ca:	fa00 f203 	lsl.w	r2, r0, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d6:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <HAL_ADC_ConfigChannel+0x234>)
 80015d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a21      	ldr	r2, [pc, #132]	@ (8001664 <HAL_ADC_ConfigChannel+0x238>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d109      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1cc>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b12      	cmp	r3, #18
 80015ea:	d105      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	@ (8001664 <HAL_ADC_ConfigChannel+0x238>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d123      	bne.n	800164a <HAL_ADC_ConfigChannel+0x21e>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b10      	cmp	r3, #16
 8001608:	d003      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x1e6>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b11      	cmp	r3, #17
 8001610:	d11b      	bne.n	800164a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b10      	cmp	r3, #16
 8001624:	d111      	bne.n	800164a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <HAL_ADC_ConfigChannel+0x23c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a10      	ldr	r2, [pc, #64]	@ (800166c <HAL_ADC_ConfigChannel+0x240>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	0c9a      	lsrs	r2, r3, #18
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800163c:	e002      	b.n	8001644 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3b01      	subs	r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f9      	bne.n	800163e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40012300 	.word	0x40012300
 8001664:	40012000 	.word	0x40012000
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83

08001670 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001678:	4b79      	ldr	r3, [pc, #484]	@ (8001860 <ADC_Init+0x1f0>)
 800167a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	021a      	lsls	r2, r3, #8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6899      	ldr	r1, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001702:	4a58      	ldr	r2, [pc, #352]	@ (8001864 <ADC_Init+0x1f4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d022      	beq.n	800174e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001716:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6899      	ldr	r1, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001738:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6899      	ldr	r1, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	e00f      	b.n	800176e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800175c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800176c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0202 	bic.w	r2, r2, #2
 800177c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6899      	ldr	r1, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7e1b      	ldrb	r3, [r3, #24]
 8001788:	005a      	lsls	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01b      	beq.n	80017d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6859      	ldr	r1, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	3b01      	subs	r3, #1
 80017c8:	035a      	lsls	r2, r3, #13
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	e007      	b.n	80017e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	3b01      	subs	r3, #1
 8001800:	051a      	lsls	r2, r3, #20
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001826:	025a      	lsls	r2, r3, #9
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800183e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6899      	ldr	r1, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	029a      	lsls	r2, r3, #10
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40012300 	.word	0x40012300
 8001864:	0f000001 	.word	0x0f000001

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	@ (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	@ (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	@ (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	@ 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	@ 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff4c 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ea:	f7ff ff61 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 80019ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	6978      	ldr	r0, [r7, #20]
 80019f6:	f7ff ffb1 	bl	800195c <NVIC_EncodePriority>
 80019fa:	4602      	mov	r2, r0
 80019fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff80 	bl	8001908 <__NVIC_SetPriority>
}
 8001a08:	bf00      	nop
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff54 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	@ 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	e16b      	b.n	8001d20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	f040 815a 	bne.w	8001d1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d005      	beq.n	8001a7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d130      	bne.n	8001ae0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 0201 	and.w	r2, r3, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d017      	beq.n	8001b1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d123      	bne.n	8001b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	220f      	movs	r2, #15
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	08da      	lsrs	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	69b9      	ldr	r1, [r7, #24]
 8001b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80b4 	beq.w	8001d1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b60      	ldr	r3, [pc, #384]	@ (8001d38 <HAL_GPIO_Init+0x30c>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	4a5f      	ldr	r2, [pc, #380]	@ (8001d38 <HAL_GPIO_Init+0x30c>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d38 <HAL_GPIO_Init+0x30c>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bce:	4a5b      	ldr	r2, [pc, #364]	@ (8001d3c <HAL_GPIO_Init+0x310>)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a52      	ldr	r2, [pc, #328]	@ (8001d40 <HAL_GPIO_Init+0x314>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02b      	beq.n	8001c52 <HAL_GPIO_Init+0x226>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a51      	ldr	r2, [pc, #324]	@ (8001d44 <HAL_GPIO_Init+0x318>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d025      	beq.n	8001c4e <HAL_GPIO_Init+0x222>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a50      	ldr	r2, [pc, #320]	@ (8001d48 <HAL_GPIO_Init+0x31c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01f      	beq.n	8001c4a <HAL_GPIO_Init+0x21e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d4c <HAL_GPIO_Init+0x320>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d019      	beq.n	8001c46 <HAL_GPIO_Init+0x21a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4e      	ldr	r2, [pc, #312]	@ (8001d50 <HAL_GPIO_Init+0x324>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0x216>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001d54 <HAL_GPIO_Init+0x328>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00d      	beq.n	8001c3e <HAL_GPIO_Init+0x212>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4c      	ldr	r2, [pc, #304]	@ (8001d58 <HAL_GPIO_Init+0x32c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <HAL_GPIO_Init+0x20e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001d5c <HAL_GPIO_Init+0x330>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_GPIO_Init+0x20a>
 8001c32:	2307      	movs	r3, #7
 8001c34:	e00e      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c36:	2308      	movs	r3, #8
 8001c38:	e00c      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	e00a      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c3e:	2305      	movs	r3, #5
 8001c40:	e008      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c42:	2304      	movs	r3, #4
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c46:	2303      	movs	r3, #3
 8001c48:	e004      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c52:	2300      	movs	r3, #0
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	f002 0203 	and.w	r2, r2, #3
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	4093      	lsls	r3, r2
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c64:	4935      	ldr	r1, [pc, #212]	@ (8001d3c <HAL_GPIO_Init+0x310>)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c72:	4b3b      	ldr	r3, [pc, #236]	@ (8001d60 <HAL_GPIO_Init+0x334>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c96:	4a32      	ldr	r2, [pc, #200]	@ (8001d60 <HAL_GPIO_Init+0x334>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c9c:	4b30      	ldr	r3, [pc, #192]	@ (8001d60 <HAL_GPIO_Init+0x334>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc0:	4a27      	ldr	r2, [pc, #156]	@ (8001d60 <HAL_GPIO_Init+0x334>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc6:	4b26      	ldr	r3, [pc, #152]	@ (8001d60 <HAL_GPIO_Init+0x334>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cea:	4a1d      	ldr	r2, [pc, #116]	@ (8001d60 <HAL_GPIO_Init+0x334>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <HAL_GPIO_Init+0x334>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d14:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <HAL_GPIO_Init+0x334>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	f67f ae90 	bls.w	8001a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3724      	adds	r7, #36	@ 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40021400 	.word	0x40021400
 8001d58:	40021800 	.word	0x40021800
 8001d5c:	40021c00 	.word	0x40021c00
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	619a      	str	r2, [r3, #24]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001da8:	887a      	ldrh	r2, [r7, #2]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	041a      	lsls	r2, r3, #16
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	43d9      	mvns	r1, r3
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	400b      	ands	r3, r1
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	619a      	str	r2, [r3, #24]
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e267      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d075      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dea:	4b88      	ldr	r3, [pc, #544]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d00c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df6:	4b85      	ldr	r3, [pc, #532]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d112      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e02:	4b82      	ldr	r3, [pc, #520]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e0e:	d10b      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	4b7e      	ldr	r3, [pc, #504]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d05b      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x108>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d157      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e242      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e30:	d106      	bne.n	8001e40 <HAL_RCC_OscConfig+0x74>
 8001e32:	4b76      	ldr	r3, [pc, #472]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a75      	ldr	r2, [pc, #468]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e01d      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x98>
 8001e4a:	4b70      	ldr	r3, [pc, #448]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6f      	ldr	r2, [pc, #444]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b6d      	ldr	r3, [pc, #436]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6c      	ldr	r2, [pc, #432]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e64:	4b69      	ldr	r3, [pc, #420]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a68      	ldr	r2, [pc, #416]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b66      	ldr	r3, [pc, #408]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a65      	ldr	r2, [pc, #404]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff f8e4 	bl	8001050 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff f8e0 	bl	8001050 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	@ 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e207      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0xc0>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff f8d0 	bl	8001050 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff f8cc 	bl	8001050 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	@ 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1f3      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	4b51      	ldr	r3, [pc, #324]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xe8>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d063      	beq.n	8001faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eee:	4b47      	ldr	r3, [pc, #284]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d11c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b44      	ldr	r3, [pc, #272]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	4b41      	ldr	r3, [pc, #260]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e1c7      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4937      	ldr	r1, [pc, #220]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	e03a      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3c:	4b34      	ldr	r3, [pc, #208]	@ (8002010 <HAL_RCC_OscConfig+0x244>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff f885 	bl	8001050 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff f881 	bl	8001050 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e1a8      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b28      	ldr	r3, [pc, #160]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4925      	ldr	r1, [pc, #148]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b24      	ldr	r3, [pc, #144]	@ (8002010 <HAL_RCC_OscConfig+0x244>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff f864 	bl	8001050 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f860 	bl	8001050 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e187      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d036      	beq.n	8002024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <HAL_RCC_OscConfig+0x248>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff f844 	bl	8001050 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f840 	bl	8001050 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e167      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_RCC_OscConfig+0x240>)
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x200>
 8001fea:	e01b      	b.n	8002024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <HAL_RCC_OscConfig+0x248>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f82d 	bl	8001050 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	e00e      	b.n	8002018 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff f829 	bl	8001050 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d907      	bls.n	8002018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e150      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
 800200c:	40023800 	.word	0x40023800
 8002010:	42470000 	.word	0x42470000
 8002014:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	4b88      	ldr	r3, [pc, #544]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 800201a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ea      	bne.n	8001ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8097 	beq.w	8002160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002036:	4b81      	ldr	r3, [pc, #516]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	4b7d      	ldr	r3, [pc, #500]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	4a7c      	ldr	r2, [pc, #496]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	@ 0x40
 8002052:	4b7a      	ldr	r3, [pc, #488]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b77      	ldr	r3, [pc, #476]	@ (8002240 <HAL_RCC_OscConfig+0x474>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206e:	4b74      	ldr	r3, [pc, #464]	@ (8002240 <HAL_RCC_OscConfig+0x474>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a73      	ldr	r2, [pc, #460]	@ (8002240 <HAL_RCC_OscConfig+0x474>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7fe ffe9 	bl	8001050 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7fe ffe5 	bl	8001050 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e10c      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b6a      	ldr	r3, [pc, #424]	@ (8002240 <HAL_RCC_OscConfig+0x474>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2ea>
 80020a8:	4b64      	ldr	r3, [pc, #400]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ac:	4a63      	ldr	r2, [pc, #396]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x324>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x30c>
 80020be:	4b5f      	ldr	r3, [pc, #380]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c2:	4a5e      	ldr	r2, [pc, #376]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ca:	4b5c      	ldr	r3, [pc, #368]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ce:	4a5b      	ldr	r2, [pc, #364]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0x324>
 80020d8:	4b58      	ldr	r3, [pc, #352]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020dc:	4a57      	ldr	r2, [pc, #348]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e4:	4b55      	ldr	r3, [pc, #340]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e8:	4a54      	ldr	r2, [pc, #336]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80020ea:	f023 0304 	bic.w	r3, r3, #4
 80020ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7fe ffaa 	bl	8001050 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7fe ffa6 	bl	8001050 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0cb      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	4b49      	ldr	r3, [pc, #292]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ee      	beq.n	8002100 <HAL_RCC_OscConfig+0x334>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7fe ff94 	bl	8001050 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7fe ff90 	bl	8001050 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0b5      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	4b3e      	ldr	r3, [pc, #248]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ee      	bne.n	800212c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4b39      	ldr	r3, [pc, #228]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	4a38      	ldr	r2, [pc, #224]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 800215a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800215e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a1 	beq.w	80022ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800216a:	4b34      	ldr	r3, [pc, #208]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b08      	cmp	r3, #8
 8002174:	d05c      	beq.n	8002230 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d141      	bne.n	8002202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <HAL_RCC_OscConfig+0x478>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe ff64 	bl	8001050 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7fe ff60 	bl	8001050 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e087      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	4b27      	ldr	r3, [pc, #156]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	3b01      	subs	r3, #1
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	491b      	ldr	r1, [pc, #108]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <HAL_RCC_OscConfig+0x478>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7fe ff39 	bl	8001050 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7fe ff35 	bl	8001050 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e05c      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x416>
 8002200:	e054      	b.n	80022ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <HAL_RCC_OscConfig+0x478>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe ff22 	bl	8001050 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7fe ff1e 	bl	8001050 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e045      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_RCC_OscConfig+0x470>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x444>
 800222e:	e03d      	b.n	80022ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e038      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
 800223c:	40023800 	.word	0x40023800
 8002240:	40007000 	.word	0x40007000
 8002244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002248:	4b1b      	ldr	r3, [pc, #108]	@ (80022b8 <HAL_RCC_OscConfig+0x4ec>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d028      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d121      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d11a      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002278:	4013      	ands	r3, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800227e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002280:	4293      	cmp	r3, r2
 8002282:	d111      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	3b01      	subs	r3, #1
 8002292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d107      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0cc      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d0:	4b68      	ldr	r3, [pc, #416]	@ (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d90c      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b65      	ldr	r3, [pc, #404]	@ (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b63      	ldr	r3, [pc, #396]	@ (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0b8      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002310:	4b59      	ldr	r3, [pc, #356]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a58      	ldr	r2, [pc, #352]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800231a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002328:	4b53      	ldr	r3, [pc, #332]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a52      	ldr	r2, [pc, #328]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b50      	ldr	r3, [pc, #320]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	494d      	ldr	r1, [pc, #308]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d044      	beq.n	80023dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b47      	ldr	r3, [pc, #284]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d119      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d003      	beq.n	800237a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	2b03      	cmp	r3, #3
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b3f      	ldr	r3, [pc, #252]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b3b      	ldr	r3, [pc, #236]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e067      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b37      	ldr	r3, [pc, #220]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4934      	ldr	r1, [pc, #208]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ac:	f7fe fe50 	bl	8001050 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7fe fe4c 	bl	8001050 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e04f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b25      	ldr	r3, [pc, #148]	@ (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d20c      	bcs.n	8002404 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b22      	ldr	r3, [pc, #136]	@ (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e032      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002410:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4916      	ldr	r1, [pc, #88]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242e:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	490e      	ldr	r1, [pc, #56]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002442:	f000 f821 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	490a      	ldr	r1, [pc, #40]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	4a09      	ldr	r2, [pc, #36]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800245e:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fcb2 	bl	8000dcc <HAL_InitTick>

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023c00 	.word	0x40023c00
 8002478:	40023800 	.word	0x40023800
 800247c:	08005460 	.word	0x08005460
 8002480:	20000000 	.word	0x20000000
 8002484:	20000004 	.word	0x20000004

08002488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800248c:	b094      	sub	sp, #80	@ 0x50
 800248e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a0:	4b79      	ldr	r3, [pc, #484]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d00d      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x40>
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	f200 80e1 	bhi.w	8002674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x34>
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ba:	e0db      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b73      	ldr	r3, [pc, #460]	@ (800268c <HAL_RCC_GetSysClockFreq+0x204>)
 80024be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024c0:	e0db      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024c2:	4b73      	ldr	r3, [pc, #460]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x208>)
 80024c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024c6:	e0d8      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d063      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024de:	4b6a      	ldr	r3, [pc, #424]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	099b      	lsrs	r3, r3, #6
 80024e4:	2200      	movs	r2, #0
 80024e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024f2:	2300      	movs	r3, #0
 80024f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024fa:	4622      	mov	r2, r4
 80024fc:	462b      	mov	r3, r5
 80024fe:	f04f 0000 	mov.w	r0, #0
 8002502:	f04f 0100 	mov.w	r1, #0
 8002506:	0159      	lsls	r1, r3, #5
 8002508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800250c:	0150      	lsls	r0, r2, #5
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4621      	mov	r1, r4
 8002514:	1a51      	subs	r1, r2, r1
 8002516:	6139      	str	r1, [r7, #16]
 8002518:	4629      	mov	r1, r5
 800251a:	eb63 0301 	sbc.w	r3, r3, r1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800252c:	4659      	mov	r1, fp
 800252e:	018b      	lsls	r3, r1, #6
 8002530:	4651      	mov	r1, sl
 8002532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002536:	4651      	mov	r1, sl
 8002538:	018a      	lsls	r2, r1, #6
 800253a:	4651      	mov	r1, sl
 800253c:	ebb2 0801 	subs.w	r8, r2, r1
 8002540:	4659      	mov	r1, fp
 8002542:	eb63 0901 	sbc.w	r9, r3, r1
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800255a:	4690      	mov	r8, r2
 800255c:	4699      	mov	r9, r3
 800255e:	4623      	mov	r3, r4
 8002560:	eb18 0303 	adds.w	r3, r8, r3
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	462b      	mov	r3, r5
 8002568:	eb49 0303 	adc.w	r3, r9, r3
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800257a:	4629      	mov	r1, r5
 800257c:	024b      	lsls	r3, r1, #9
 800257e:	4621      	mov	r1, r4
 8002580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002584:	4621      	mov	r1, r4
 8002586:	024a      	lsls	r2, r1, #9
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800258e:	2200      	movs	r2, #0
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002598:	f7fd fe72 	bl	8000280 <__aeabi_uldivmod>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4613      	mov	r3, r2
 80025a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025a4:	e058      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a6:	4b38      	ldr	r3, [pc, #224]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	099b      	lsrs	r3, r3, #6
 80025ac:	2200      	movs	r2, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	4611      	mov	r1, r2
 80025b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80025bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025c0:	4642      	mov	r2, r8
 80025c2:	464b      	mov	r3, r9
 80025c4:	f04f 0000 	mov.w	r0, #0
 80025c8:	f04f 0100 	mov.w	r1, #0
 80025cc:	0159      	lsls	r1, r3, #5
 80025ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d2:	0150      	lsls	r0, r2, #5
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4641      	mov	r1, r8
 80025da:	ebb2 0a01 	subs.w	sl, r2, r1
 80025de:	4649      	mov	r1, r9
 80025e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025f8:	ebb2 040a 	subs.w	r4, r2, sl
 80025fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	00eb      	lsls	r3, r5, #3
 800260a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800260e:	00e2      	lsls	r2, r4, #3
 8002610:	4614      	mov	r4, r2
 8002612:	461d      	mov	r5, r3
 8002614:	4643      	mov	r3, r8
 8002616:	18e3      	adds	r3, r4, r3
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	464b      	mov	r3, r9
 800261c:	eb45 0303 	adc.w	r3, r5, r3
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800262e:	4629      	mov	r1, r5
 8002630:	028b      	lsls	r3, r1, #10
 8002632:	4621      	mov	r1, r4
 8002634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002638:	4621      	mov	r1, r4
 800263a:	028a      	lsls	r2, r1, #10
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002642:	2200      	movs	r2, #0
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	61fa      	str	r2, [r7, #28]
 8002648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264c:	f7fd fe18 	bl	8000280 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002668:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800266a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002672:	e002      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_RCC_GetSysClockFreq+0x204>)
 8002676:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800267c:	4618      	mov	r0, r3
 800267e:	3750      	adds	r7, #80	@ 0x50
 8002680:	46bd      	mov	sp, r7
 8002682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	007a1200 	.word	0x007a1200

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b0:	f7ff fff0 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4903      	ldr	r1, [pc, #12]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08005470 	.word	0x08005470

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d8:	f7ff ffdc 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0b5b      	lsrs	r3, r3, #13
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4903      	ldr	r1, [pc, #12]	@ (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	08005470 	.word	0x08005470

080026fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	220f      	movs	r2, #15
 800270a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0203 	and.w	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002718:	4b0f      	ldr	r3, [pc, #60]	@ (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002730:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800273e:	4b07      	ldr	r3, [pc, #28]	@ (800275c <HAL_RCC_GetClockConfig+0x60>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0207 	and.w	r2, r3, #7
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	601a      	str	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	40023c00 	.word	0x40023c00

08002760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e041      	b.n	80027f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f839 	bl	80027fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f000 f9c0 	bl	8002b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d001      	beq.n	800282c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e04e      	b.n	80028ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a23      	ldr	r2, [pc, #140]	@ (80028d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d022      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002856:	d01d      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1f      	ldr	r2, [pc, #124]	@ (80028dc <HAL_TIM_Base_Start_IT+0xc8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d018      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1e      	ldr	r2, [pc, #120]	@ (80028e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d013      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1c      	ldr	r2, [pc, #112]	@ (80028e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00e      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1b      	ldr	r2, [pc, #108]	@ (80028e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d009      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <HAL_TIM_Base_Start_IT+0xd8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a18      	ldr	r2, [pc, #96]	@ (80028f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d010      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b6:	e007      	b.n	80028c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40010000 	.word	0x40010000
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800
 80028e4:	40000c00 	.word	0x40000c00
 80028e8:	40010400 	.word	0x40010400
 80028ec:	40014000 	.word	0x40014000
 80028f0:	40001800 	.word	0x40001800

080028f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d020      	beq.n	8002958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01b      	beq.n	8002958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0202 	mvn.w	r2, #2
 8002928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8d2 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f8c4 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f8d5 	bl	8002afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d020      	beq.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0204 	mvn.w	r2, #4
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8ac 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f89e 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f8af 	bl	8002afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d020      	beq.n	80029f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01b      	beq.n	80029f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0208 	mvn.w	r2, #8
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2204      	movs	r2, #4
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f886 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f878 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f889 	bl	8002afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d020      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01b      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0210 	mvn.w	r2, #16
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2208      	movs	r2, #8
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f860 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f852 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f863 	bl	8002afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0201 	mvn.w	r2, #1
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe f866 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00c      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f900 	bl	8002c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d007      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f834 	bl	8002b10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0220 	mvn.w	r2, #32
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f8d2 	bl	8002c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a43      	ldr	r2, [pc, #268]	@ (8002c44 <TIM_Base_SetConfig+0x120>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d013      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b42:	d00f      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a40      	ldr	r2, [pc, #256]	@ (8002c48 <TIM_Base_SetConfig+0x124>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00b      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c4c <TIM_Base_SetConfig+0x128>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a3e      	ldr	r2, [pc, #248]	@ (8002c50 <TIM_Base_SetConfig+0x12c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c54 <TIM_Base_SetConfig+0x130>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d108      	bne.n	8002b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a32      	ldr	r2, [pc, #200]	@ (8002c44 <TIM_Base_SetConfig+0x120>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02b      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b84:	d027      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a2f      	ldr	r2, [pc, #188]	@ (8002c48 <TIM_Base_SetConfig+0x124>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d023      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a2e      	ldr	r2, [pc, #184]	@ (8002c4c <TIM_Base_SetConfig+0x128>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01f      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a2d      	ldr	r2, [pc, #180]	@ (8002c50 <TIM_Base_SetConfig+0x12c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01b      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8002c54 <TIM_Base_SetConfig+0x130>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d017      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c58 <TIM_Base_SetConfig+0x134>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c5c <TIM_Base_SetConfig+0x138>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00f      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a29      	ldr	r2, [pc, #164]	@ (8002c60 <TIM_Base_SetConfig+0x13c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00b      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a28      	ldr	r2, [pc, #160]	@ (8002c64 <TIM_Base_SetConfig+0x140>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a27      	ldr	r2, [pc, #156]	@ (8002c68 <TIM_Base_SetConfig+0x144>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a26      	ldr	r2, [pc, #152]	@ (8002c6c <TIM_Base_SetConfig+0x148>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d108      	bne.n	8002be8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a0e      	ldr	r2, [pc, #56]	@ (8002c44 <TIM_Base_SetConfig+0x120>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d003      	beq.n	8002c16 <TIM_Base_SetConfig+0xf2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a10      	ldr	r2, [pc, #64]	@ (8002c54 <TIM_Base_SetConfig+0x130>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d103      	bne.n	8002c1e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f043 0204 	orr.w	r2, r3, #4
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800
 8002c50:	40000c00 	.word	0x40000c00
 8002c54:	40010400 	.word	0x40010400
 8002c58:	40014000 	.word	0x40014000
 8002c5c:	40014400 	.word	0x40014400
 8002c60:	40014800 	.word	0x40014800
 8002c64:	40001800 	.word	0x40001800
 8002c68:	40001c00 	.word	0x40001c00
 8002c6c:	40002000 	.word	0x40002000

08002c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e042      	b.n	8002d30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe f81c 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2224      	movs	r2, #36	@ 0x24
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f973 	bl	8002fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d175      	bne.n	8002e44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_UART_Transmit+0x2c>
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e06e      	b.n	8002e46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2221      	movs	r2, #33	@ 0x21
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d76:	f7fe f96b 	bl	8001050 <HAL_GetTick>
 8002d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	88fa      	ldrh	r2, [r7, #6]
 8002d80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	88fa      	ldrh	r2, [r7, #6]
 8002d86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d90:	d108      	bne.n	8002da4 <HAL_UART_Transmit+0x6c>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	e003      	b.n	8002dac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dac:	e02e      	b.n	8002e0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2180      	movs	r1, #128	@ 0x80
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f848 	bl	8002e4e <UART_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e03a      	b.n	8002e46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10b      	bne.n	8002dee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	3302      	adds	r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	e007      	b.n	8002dfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	781a      	ldrb	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1cb      	bne.n	8002dae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2140      	movs	r1, #64	@ 0x40
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f814 	bl	8002e4e <UART_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e006      	b.n	8002e46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5e:	e03b      	b.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e66:	d037      	beq.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e68:	f7fe f8f2 	bl	8001050 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	6a3a      	ldr	r2, [r7, #32]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d302      	bcc.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e03a      	b.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d023      	beq.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b80      	cmp	r3, #128	@ 0x80
 8002e94:	d020      	beq.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b40      	cmp	r3, #64	@ 0x40
 8002e9a:	d01d      	beq.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d116      	bne.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f81d 	bl	8002f00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e00f      	b.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d0b4      	beq.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b095      	sub	sp, #84	@ 0x54
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f12:	e853 3f00 	ldrex	r3, [r3]
 8002f16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f28:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f30:	e841 2300 	strex	r3, r2, [r1]
 8002f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e5      	bne.n	8002f08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3314      	adds	r3, #20
 8002f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	e853 3f00 	ldrex	r3, [r3]
 8002f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3314      	adds	r3, #20
 8002f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e5      	bne.n	8002f3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d119      	bne.n	8002fac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	330c      	adds	r3, #12
 8002f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	e853 3f00 	ldrex	r3, [r3]
 8002f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f023 0310 	bic.w	r3, r3, #16
 8002f8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	330c      	adds	r3, #12
 8002f96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f98:	61ba      	str	r2, [r7, #24]
 8002f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9c:	6979      	ldr	r1, [r7, #20]
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	e841 2300 	strex	r3, r2, [r1]
 8002fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e5      	bne.n	8002f78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002fba:	bf00      	nop
 8002fbc:	3754      	adds	r7, #84	@ 0x54
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fcc:	b0c0      	sub	sp, #256	@ 0x100
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe4:	68d9      	ldr	r1, [r3, #12]
 8002fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	ea40 0301 	orr.w	r3, r0, r1
 8002ff0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	431a      	orrs	r2, r3
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003020:	f021 010c 	bic.w	r1, r1, #12
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800302e:	430b      	orrs	r3, r1
 8003030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800303e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003042:	6999      	ldr	r1, [r3, #24]
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	ea40 0301 	orr.w	r3, r0, r1
 800304e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b8f      	ldr	r3, [pc, #572]	@ (8003294 <UART_SetConfig+0x2cc>)
 8003058:	429a      	cmp	r2, r3
 800305a:	d005      	beq.n	8003068 <UART_SetConfig+0xa0>
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b8d      	ldr	r3, [pc, #564]	@ (8003298 <UART_SetConfig+0x2d0>)
 8003064:	429a      	cmp	r2, r3
 8003066:	d104      	bne.n	8003072 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003068:	f7ff fb34 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 800306c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003070:	e003      	b.n	800307a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003072:	f7ff fb1b 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8003076:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003084:	f040 810c 	bne.w	80032a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800308c:	2200      	movs	r2, #0
 800308e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003092:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003096:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800309a:	4622      	mov	r2, r4
 800309c:	462b      	mov	r3, r5
 800309e:	1891      	adds	r1, r2, r2
 80030a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030a2:	415b      	adcs	r3, r3
 80030a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030aa:	4621      	mov	r1, r4
 80030ac:	eb12 0801 	adds.w	r8, r2, r1
 80030b0:	4629      	mov	r1, r5
 80030b2:	eb43 0901 	adc.w	r9, r3, r1
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ca:	4690      	mov	r8, r2
 80030cc:	4699      	mov	r9, r3
 80030ce:	4623      	mov	r3, r4
 80030d0:	eb18 0303 	adds.w	r3, r8, r3
 80030d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030d8:	462b      	mov	r3, r5
 80030da:	eb49 0303 	adc.w	r3, r9, r3
 80030de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030f6:	460b      	mov	r3, r1
 80030f8:	18db      	adds	r3, r3, r3
 80030fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80030fc:	4613      	mov	r3, r2
 80030fe:	eb42 0303 	adc.w	r3, r2, r3
 8003102:	657b      	str	r3, [r7, #84]	@ 0x54
 8003104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800310c:	f7fd f8b8 	bl	8000280 <__aeabi_uldivmod>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4b61      	ldr	r3, [pc, #388]	@ (800329c <UART_SetConfig+0x2d4>)
 8003116:	fba3 2302 	umull	r2, r3, r3, r2
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	011c      	lsls	r4, r3, #4
 800311e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003122:	2200      	movs	r2, #0
 8003124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003128:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800312c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003130:	4642      	mov	r2, r8
 8003132:	464b      	mov	r3, r9
 8003134:	1891      	adds	r1, r2, r2
 8003136:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003138:	415b      	adcs	r3, r3
 800313a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800313c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003140:	4641      	mov	r1, r8
 8003142:	eb12 0a01 	adds.w	sl, r2, r1
 8003146:	4649      	mov	r1, r9
 8003148:	eb43 0b01 	adc.w	fp, r3, r1
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003158:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800315c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003160:	4692      	mov	sl, r2
 8003162:	469b      	mov	fp, r3
 8003164:	4643      	mov	r3, r8
 8003166:	eb1a 0303 	adds.w	r3, sl, r3
 800316a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800316e:	464b      	mov	r3, r9
 8003170:	eb4b 0303 	adc.w	r3, fp, r3
 8003174:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003184:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003188:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800318c:	460b      	mov	r3, r1
 800318e:	18db      	adds	r3, r3, r3
 8003190:	643b      	str	r3, [r7, #64]	@ 0x40
 8003192:	4613      	mov	r3, r2
 8003194:	eb42 0303 	adc.w	r3, r2, r3
 8003198:	647b      	str	r3, [r7, #68]	@ 0x44
 800319a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800319e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031a2:	f7fd f86d 	bl	8000280 <__aeabi_uldivmod>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	4b3b      	ldr	r3, [pc, #236]	@ (800329c <UART_SetConfig+0x2d4>)
 80031ae:	fba3 2301 	umull	r2, r3, r3, r1
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2264      	movs	r2, #100	@ 0x64
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	1acb      	subs	r3, r1, r3
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031c2:	4b36      	ldr	r3, [pc, #216]	@ (800329c <UART_SetConfig+0x2d4>)
 80031c4:	fba3 2302 	umull	r2, r3, r3, r2
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031d0:	441c      	add	r4, r3
 80031d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031e4:	4642      	mov	r2, r8
 80031e6:	464b      	mov	r3, r9
 80031e8:	1891      	adds	r1, r2, r2
 80031ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031ec:	415b      	adcs	r3, r3
 80031ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031f4:	4641      	mov	r1, r8
 80031f6:	1851      	adds	r1, r2, r1
 80031f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80031fa:	4649      	mov	r1, r9
 80031fc:	414b      	adcs	r3, r1
 80031fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800320c:	4659      	mov	r1, fp
 800320e:	00cb      	lsls	r3, r1, #3
 8003210:	4651      	mov	r1, sl
 8003212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003216:	4651      	mov	r1, sl
 8003218:	00ca      	lsls	r2, r1, #3
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	4603      	mov	r3, r0
 8003220:	4642      	mov	r2, r8
 8003222:	189b      	adds	r3, r3, r2
 8003224:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003228:	464b      	mov	r3, r9
 800322a:	460a      	mov	r2, r1
 800322c:	eb42 0303 	adc.w	r3, r2, r3
 8003230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003240:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003248:	460b      	mov	r3, r1
 800324a:	18db      	adds	r3, r3, r3
 800324c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800324e:	4613      	mov	r3, r2
 8003250:	eb42 0303 	adc.w	r3, r2, r3
 8003254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800325a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800325e:	f7fd f80f 	bl	8000280 <__aeabi_uldivmod>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <UART_SetConfig+0x2d4>)
 8003268:	fba3 1302 	umull	r1, r3, r3, r2
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	2164      	movs	r1, #100	@ 0x64
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	3332      	adds	r3, #50	@ 0x32
 800327a:	4a08      	ldr	r2, [pc, #32]	@ (800329c <UART_SetConfig+0x2d4>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	f003 0207 	and.w	r2, r3, #7
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4422      	add	r2, r4
 800328e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003290:	e106      	b.n	80034a0 <UART_SetConfig+0x4d8>
 8003292:	bf00      	nop
 8003294:	40011000 	.word	0x40011000
 8003298:	40011400 	.word	0x40011400
 800329c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032a4:	2200      	movs	r2, #0
 80032a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032b2:	4642      	mov	r2, r8
 80032b4:	464b      	mov	r3, r9
 80032b6:	1891      	adds	r1, r2, r2
 80032b8:	6239      	str	r1, [r7, #32]
 80032ba:	415b      	adcs	r3, r3
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032c2:	4641      	mov	r1, r8
 80032c4:	1854      	adds	r4, r2, r1
 80032c6:	4649      	mov	r1, r9
 80032c8:	eb43 0501 	adc.w	r5, r3, r1
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	00eb      	lsls	r3, r5, #3
 80032d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032da:	00e2      	lsls	r2, r4, #3
 80032dc:	4614      	mov	r4, r2
 80032de:	461d      	mov	r5, r3
 80032e0:	4643      	mov	r3, r8
 80032e2:	18e3      	adds	r3, r4, r3
 80032e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032e8:	464b      	mov	r3, r9
 80032ea:	eb45 0303 	adc.w	r3, r5, r3
 80032ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800330e:	4629      	mov	r1, r5
 8003310:	008b      	lsls	r3, r1, #2
 8003312:	4621      	mov	r1, r4
 8003314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003318:	4621      	mov	r1, r4
 800331a:	008a      	lsls	r2, r1, #2
 800331c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003320:	f7fc ffae 	bl	8000280 <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4b60      	ldr	r3, [pc, #384]	@ (80034ac <UART_SetConfig+0x4e4>)
 800332a:	fba3 2302 	umull	r2, r3, r3, r2
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	011c      	lsls	r4, r3, #4
 8003332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003336:	2200      	movs	r2, #0
 8003338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800333c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003344:	4642      	mov	r2, r8
 8003346:	464b      	mov	r3, r9
 8003348:	1891      	adds	r1, r2, r2
 800334a:	61b9      	str	r1, [r7, #24]
 800334c:	415b      	adcs	r3, r3
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003354:	4641      	mov	r1, r8
 8003356:	1851      	adds	r1, r2, r1
 8003358:	6139      	str	r1, [r7, #16]
 800335a:	4649      	mov	r1, r9
 800335c:	414b      	adcs	r3, r1
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800336c:	4659      	mov	r1, fp
 800336e:	00cb      	lsls	r3, r1, #3
 8003370:	4651      	mov	r1, sl
 8003372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003376:	4651      	mov	r1, sl
 8003378:	00ca      	lsls	r2, r1, #3
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	4603      	mov	r3, r0
 8003380:	4642      	mov	r2, r8
 8003382:	189b      	adds	r3, r3, r2
 8003384:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003388:	464b      	mov	r3, r9
 800338a:	460a      	mov	r2, r1
 800338c:	eb42 0303 	adc.w	r3, r2, r3
 8003390:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800339e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033ac:	4649      	mov	r1, r9
 80033ae:	008b      	lsls	r3, r1, #2
 80033b0:	4641      	mov	r1, r8
 80033b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033b6:	4641      	mov	r1, r8
 80033b8:	008a      	lsls	r2, r1, #2
 80033ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033be:	f7fc ff5f 	bl	8000280 <__aeabi_uldivmod>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4611      	mov	r1, r2
 80033c8:	4b38      	ldr	r3, [pc, #224]	@ (80034ac <UART_SetConfig+0x4e4>)
 80033ca:	fba3 2301 	umull	r2, r3, r3, r1
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	2264      	movs	r2, #100	@ 0x64
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	1acb      	subs	r3, r1, r3
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	3332      	adds	r3, #50	@ 0x32
 80033dc:	4a33      	ldr	r2, [pc, #204]	@ (80034ac <UART_SetConfig+0x4e4>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033e8:	441c      	add	r4, r3
 80033ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ee:	2200      	movs	r2, #0
 80033f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80033f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80033f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033f8:	4642      	mov	r2, r8
 80033fa:	464b      	mov	r3, r9
 80033fc:	1891      	adds	r1, r2, r2
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	415b      	adcs	r3, r3
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003408:	4641      	mov	r1, r8
 800340a:	1851      	adds	r1, r2, r1
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	4649      	mov	r1, r9
 8003410:	414b      	adcs	r3, r1
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003420:	4659      	mov	r1, fp
 8003422:	00cb      	lsls	r3, r1, #3
 8003424:	4651      	mov	r1, sl
 8003426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800342a:	4651      	mov	r1, sl
 800342c:	00ca      	lsls	r2, r1, #3
 800342e:	4610      	mov	r0, r2
 8003430:	4619      	mov	r1, r3
 8003432:	4603      	mov	r3, r0
 8003434:	4642      	mov	r2, r8
 8003436:	189b      	adds	r3, r3, r2
 8003438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800343a:	464b      	mov	r3, r9
 800343c:	460a      	mov	r2, r1
 800343e:	eb42 0303 	adc.w	r3, r2, r3
 8003442:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	663b      	str	r3, [r7, #96]	@ 0x60
 800344e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800345c:	4649      	mov	r1, r9
 800345e:	008b      	lsls	r3, r1, #2
 8003460:	4641      	mov	r1, r8
 8003462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003466:	4641      	mov	r1, r8
 8003468:	008a      	lsls	r2, r1, #2
 800346a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800346e:	f7fc ff07 	bl	8000280 <__aeabi_uldivmod>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <UART_SetConfig+0x4e4>)
 8003478:	fba3 1302 	umull	r1, r3, r3, r2
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	2164      	movs	r1, #100	@ 0x64
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	3332      	adds	r3, #50	@ 0x32
 800348a:	4a08      	ldr	r2, [pc, #32]	@ (80034ac <UART_SetConfig+0x4e4>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	f003 020f 	and.w	r2, r3, #15
 8003496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4422      	add	r2, r4
 800349e:	609a      	str	r2, [r3, #8]
}
 80034a0:	bf00      	nop
 80034a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034a6:	46bd      	mov	sp, r7
 80034a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ac:	51eb851f 	.word	0x51eb851f

080034b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80034be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c2:	2b84      	cmp	r3, #132	@ 0x84
 80034c4:	d005      	beq.n	80034d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80034c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	3303      	adds	r3, #3
 80034d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80034e4:	f000 fafc 	bl	8003ae0 <vTaskStartScheduler>
  
  return osOK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	bd80      	pop	{r7, pc}

080034ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80034ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f0:	b089      	sub	sp, #36	@ 0x24
 80034f2:	af04      	add	r7, sp, #16
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <osThreadCreate+0x54>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01c      	beq.n	8003542 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685c      	ldr	r4, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691e      	ldr	r6, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff ffc8 	bl	80034b0 <makeFreeRtosPriority>
 8003520:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800352a:	9202      	str	r2, [sp, #8]
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	9100      	str	r1, [sp, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4632      	mov	r2, r6
 8003534:	4629      	mov	r1, r5
 8003536:	4620      	mov	r0, r4
 8003538:	f000 f8ed 	bl	8003716 <xTaskCreateStatic>
 800353c:	4603      	mov	r3, r0
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e01c      	b.n	800357c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685c      	ldr	r4, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800354e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ffaa 	bl	80034b0 <makeFreeRtosPriority>
 800355c:	4602      	mov	r2, r0
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	9200      	str	r2, [sp, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	4632      	mov	r2, r6
 800356a:	4629      	mov	r1, r5
 800356c:	4620      	mov	r0, r4
 800356e:	f000 f932 	bl	80037d6 <xTaskCreate>
 8003572:	4603      	mov	r3, r0
 8003574:	2b01      	cmp	r3, #1
 8003576:	d001      	beq.n	800357c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003578:	2300      	movs	r3, #0
 800357a:	e000      	b.n	800357e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800357c:	68fb      	ldr	r3, [r7, #12]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003586 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <osDelay+0x16>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	e000      	b.n	800359e <osDelay+0x18>
 800359c:	2301      	movs	r3, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fa68 	bl	8003a74 <vTaskDelay>
  
  return osOK;
 80035a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f103 0208 	add.w	r2, r3, #8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f103 0208 	add.w	r2, r3, #8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f103 0208 	add.w	r2, r3, #8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	601a      	str	r2, [r3, #0]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003666:	d103      	bne.n	8003670 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	e00c      	b.n	800368a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3308      	adds	r3, #8
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	e002      	b.n	800367e <vListInsert+0x2e>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d2f6      	bcs.n	8003678 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036c2:	b480      	push	{r7}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6892      	ldr	r2, [r2, #8]
 80036d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6852      	ldr	r2, [r2, #4]
 80036e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d103      	bne.n	80036f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	1e5a      	subs	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003716:	b580      	push	{r7, lr}
 8003718:	b08e      	sub	sp, #56	@ 0x38
 800371a:	af04      	add	r7, sp, #16
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	e7fd      	b.n	800373e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	61fb      	str	r3, [r7, #28]
}
 800375a:	bf00      	nop
 800375c:	bf00      	nop
 800375e:	e7fd      	b.n	800375c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003760:	23a0      	movs	r3, #160	@ 0xa0
 8003762:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2ba0      	cmp	r3, #160	@ 0xa0
 8003768:	d00b      	beq.n	8003782 <xTaskCreateStatic+0x6c>
	__asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	61bb      	str	r3, [r7, #24]
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	e7fd      	b.n	800377e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003782:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003786:	2b00      	cmp	r3, #0
 8003788:	d01e      	beq.n	80037c8 <xTaskCreateStatic+0xb2>
 800378a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01b      	beq.n	80037c8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003792:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003798:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	2202      	movs	r2, #2
 800379e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037a2:	2300      	movs	r3, #0
 80037a4:	9303      	str	r3, [sp, #12]
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	9302      	str	r3, [sp, #8]
 80037aa:	f107 0314 	add.w	r3, r7, #20
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f850 	bl	8003860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037c2:	f000 f8ed 	bl	80039a0 <prvAddNewTaskToReadyList>
 80037c6:	e001      	b.n	80037cc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037cc:	697b      	ldr	r3, [r7, #20]
	}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3728      	adds	r7, #40	@ 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b08c      	sub	sp, #48	@ 0x30
 80037da:	af04      	add	r7, sp, #16
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fefc 	bl	80045e8 <pvPortMalloc>
 80037f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00e      	beq.n	8003816 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037f8:	20a0      	movs	r0, #160	@ 0xa0
 80037fa:	f000 fef5 	bl	80045e8 <pvPortMalloc>
 80037fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
 800380c:	e005      	b.n	800381a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f000 ffb8 	bl	8004784 <vPortFree>
 8003814:	e001      	b.n	800381a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d017      	beq.n	8003850 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003828:	88fa      	ldrh	r2, [r7, #6]
 800382a:	2300      	movs	r3, #0
 800382c:	9303      	str	r3, [sp, #12]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	9302      	str	r3, [sp, #8]
 8003832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f80e 	bl	8003860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003844:	69f8      	ldr	r0, [r7, #28]
 8003846:	f000 f8ab 	bl	80039a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800384a:	2301      	movs	r3, #1
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e002      	b.n	8003856 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003854:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003856:	69bb      	ldr	r3, [r7, #24]
	}
 8003858:	4618      	mov	r0, r3
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003878:	3b01      	subs	r3, #1
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f023 0307 	bic.w	r3, r3, #7
 8003886:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	617b      	str	r3, [r7, #20]
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	e7fd      	b.n	80038a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01f      	beq.n	80038f0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038b0:	2300      	movs	r3, #0
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	e012      	b.n	80038dc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	7819      	ldrb	r1, [r3, #0]
 80038be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4413      	add	r3, r2
 80038c4:	3334      	adds	r3, #52	@ 0x34
 80038c6:	460a      	mov	r2, r1
 80038c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4413      	add	r3, r2
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3301      	adds	r3, #1
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	2b0f      	cmp	r3, #15
 80038e0:	d9e9      	bls.n	80038b6 <prvInitialiseNewTask+0x56>
 80038e2:	e000      	b.n	80038e6 <prvInitialiseNewTask+0x86>
			{
				break;
 80038e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038ee:	e003      	b.n	80038f8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d901      	bls.n	8003902 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038fe:	2306      	movs	r3, #6
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003906:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800390c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800390e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003910:	2200      	movs	r2, #0
 8003912:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003916:	3304      	adds	r3, #4
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fe68 	bl	80035ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	3318      	adds	r3, #24
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fe63 	bl	80035ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800392c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800392e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003930:	f1c3 0207 	rsb	r2, r3, #7
 8003934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003936:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800393c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800393e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003940:	2200      	movs	r2, #0
 8003942:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003948:	2200      	movs	r2, #0
 800394a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	334c      	adds	r3, #76	@ 0x4c
 8003952:	224c      	movs	r2, #76	@ 0x4c
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f001 f856 	bl	8004a08 <memset>
 800395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395e:	4a0d      	ldr	r2, [pc, #52]	@ (8003994 <prvInitialiseNewTask+0x134>)
 8003960:	651a      	str	r2, [r3, #80]	@ 0x50
 8003962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003964:	4a0c      	ldr	r2, [pc, #48]	@ (8003998 <prvInitialiseNewTask+0x138>)
 8003966:	655a      	str	r2, [r3, #84]	@ 0x54
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396a:	4a0c      	ldr	r2, [pc, #48]	@ (800399c <prvInitialiseNewTask+0x13c>)
 800396c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	68f9      	ldr	r1, [r7, #12]
 8003972:	69b8      	ldr	r0, [r7, #24]
 8003974:	f000 fc2a 	bl	80041cc <pxPortInitialiseStack>
 8003978:	4602      	mov	r2, r0
 800397a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800397e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003988:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800398a:	bf00      	nop
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	200041ec 	.word	0x200041ec
 8003998:	20004254 	.word	0x20004254
 800399c:	200042bc 	.word	0x200042bc

080039a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039a8:	f000 fd3e 	bl	8004428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003a58 <prvAddNewTaskToReadyList+0xb8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	4a29      	ldr	r2, [pc, #164]	@ (8003a58 <prvAddNewTaskToReadyList+0xb8>)
 80039b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039b6:	4b29      	ldr	r3, [pc, #164]	@ (8003a5c <prvAddNewTaskToReadyList+0xbc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039be:	4a27      	ldr	r2, [pc, #156]	@ (8003a5c <prvAddNewTaskToReadyList+0xbc>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039c4:	4b24      	ldr	r3, [pc, #144]	@ (8003a58 <prvAddNewTaskToReadyList+0xb8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d110      	bne.n	80039ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039cc:	f000 fad4 	bl	8003f78 <prvInitialiseTaskLists>
 80039d0:	e00d      	b.n	80039ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039d2:	4b23      	ldr	r3, [pc, #140]	@ (8003a60 <prvAddNewTaskToReadyList+0xc0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039da:	4b20      	ldr	r3, [pc, #128]	@ (8003a5c <prvAddNewTaskToReadyList+0xbc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d802      	bhi.n	80039ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039e8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a5c <prvAddNewTaskToReadyList+0xbc>)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003a64 <prvAddNewTaskToReadyList+0xc4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3301      	adds	r3, #1
 80039f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a64 <prvAddNewTaskToReadyList+0xc4>)
 80039f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	2201      	movs	r2, #1
 80039fe:	409a      	lsls	r2, r3
 8003a00:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <prvAddNewTaskToReadyList+0xc8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	4a18      	ldr	r2, [pc, #96]	@ (8003a68 <prvAddNewTaskToReadyList+0xc8>)
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4a15      	ldr	r2, [pc, #84]	@ (8003a6c <prvAddNewTaskToReadyList+0xcc>)
 8003a18:	441a      	add	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4610      	mov	r0, r2
 8003a22:	f7ff fdf1 	bl	8003608 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a26:	f000 fd31 	bl	800448c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a60 <prvAddNewTaskToReadyList+0xc0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00e      	beq.n	8003a50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a32:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <prvAddNewTaskToReadyList+0xbc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d207      	bcs.n	8003a50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a40:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <prvAddNewTaskToReadyList+0xd0>)
 8003a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000598 	.word	0x20000598
 8003a5c:	20000498 	.word	0x20000498
 8003a60:	200005a4 	.word	0x200005a4
 8003a64:	200005b4 	.word	0x200005b4
 8003a68:	200005a0 	.word	0x200005a0
 8003a6c:	2000049c 	.word	0x2000049c
 8003a70:	e000ed04 	.word	0xe000ed04

08003a74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d018      	beq.n	8003ab8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a86:	4b14      	ldr	r3, [pc, #80]	@ (8003ad8 <vTaskDelay+0x64>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <vTaskDelay+0x32>
	__asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	60bb      	str	r3, [r7, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	e7fd      	b.n	8003aa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003aa6:	f000 f885 	bl	8003bb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003aaa:	2100      	movs	r1, #0
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fb27 	bl	8004100 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ab2:	f000 f88d 	bl	8003bd0 <xTaskResumeAll>
 8003ab6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003abe:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <vTaskDelay+0x68>)
 8003ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200005c0 	.word	0x200005c0
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	@ 0x28
 8003ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003aee:	463a      	mov	r2, r7
 8003af0:	1d39      	adds	r1, r7, #4
 8003af2:	f107 0308 	add.w	r3, r7, #8
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fc fd58 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003afc:	6839      	ldr	r1, [r7, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	9202      	str	r2, [sp, #8]
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	2300      	movs	r3, #0
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	460a      	mov	r2, r1
 8003b0e:	4921      	ldr	r1, [pc, #132]	@ (8003b94 <vTaskStartScheduler+0xb4>)
 8003b10:	4821      	ldr	r0, [pc, #132]	@ (8003b98 <vTaskStartScheduler+0xb8>)
 8003b12:	f7ff fe00 	bl	8003716 <xTaskCreateStatic>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4a20      	ldr	r2, [pc, #128]	@ (8003b9c <vTaskStartScheduler+0xbc>)
 8003b1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003b9c <vTaskStartScheduler+0xbc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b24:	2301      	movs	r3, #1
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	e001      	b.n	8003b2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d11b      	bne.n	8003b6c <vTaskStartScheduler+0x8c>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	613b      	str	r3, [r7, #16]
}
 8003b46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b48:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <vTaskStartScheduler+0xc0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	334c      	adds	r3, #76	@ 0x4c
 8003b4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ba4 <vTaskStartScheduler+0xc4>)
 8003b50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b52:	4b15      	ldr	r3, [pc, #84]	@ (8003ba8 <vTaskStartScheduler+0xc8>)
 8003b54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b5a:	4b14      	ldr	r3, [pc, #80]	@ (8003bac <vTaskStartScheduler+0xcc>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b60:	4b13      	ldr	r3, [pc, #76]	@ (8003bb0 <vTaskStartScheduler+0xd0>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b66:	f000 fbbb 	bl	80042e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b6a:	e00f      	b.n	8003b8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b72:	d10b      	bne.n	8003b8c <vTaskStartScheduler+0xac>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	60fb      	str	r3, [r7, #12]
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	e7fd      	b.n	8003b88 <vTaskStartScheduler+0xa8>
}
 8003b8c:	bf00      	nop
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	08005458 	.word	0x08005458
 8003b98:	08003f49 	.word	0x08003f49
 8003b9c:	200005bc 	.word	0x200005bc
 8003ba0:	20000498 	.word	0x20000498
 8003ba4:	20000010 	.word	0x20000010
 8003ba8:	200005b8 	.word	0x200005b8
 8003bac:	200005a4 	.word	0x200005a4
 8003bb0:	2000059c 	.word	0x2000059c

08003bb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003bb8:	4b04      	ldr	r3, [pc, #16]	@ (8003bcc <vTaskSuspendAll+0x18>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	4a03      	ldr	r2, [pc, #12]	@ (8003bcc <vTaskSuspendAll+0x18>)
 8003bc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	200005c0 	.word	0x200005c0

08003bd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bde:	4b42      	ldr	r3, [pc, #264]	@ (8003ce8 <xTaskResumeAll+0x118>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <xTaskResumeAll+0x2e>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	603b      	str	r3, [r7, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	e7fd      	b.n	8003bfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bfe:	f000 fc13 	bl	8004428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c02:	4b39      	ldr	r3, [pc, #228]	@ (8003ce8 <xTaskResumeAll+0x118>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	4a37      	ldr	r2, [pc, #220]	@ (8003ce8 <xTaskResumeAll+0x118>)
 8003c0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c0c:	4b36      	ldr	r3, [pc, #216]	@ (8003ce8 <xTaskResumeAll+0x118>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d161      	bne.n	8003cd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c14:	4b35      	ldr	r3, [pc, #212]	@ (8003cec <xTaskResumeAll+0x11c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d05d      	beq.n	8003cd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c1c:	e02e      	b.n	8003c7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c1e:	4b34      	ldr	r3, [pc, #208]	@ (8003cf0 <xTaskResumeAll+0x120>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3318      	adds	r3, #24
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fd49 	bl	80036c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fd44 	bl	80036c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	2201      	movs	r2, #1
 8003c40:	409a      	lsls	r2, r3
 8003c42:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf4 <xTaskResumeAll+0x124>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf4 <xTaskResumeAll+0x124>)
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4a27      	ldr	r2, [pc, #156]	@ (8003cf8 <xTaskResumeAll+0x128>)
 8003c5a:	441a      	add	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7ff fcd0 	bl	8003608 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c6c:	4b23      	ldr	r3, [pc, #140]	@ (8003cfc <xTaskResumeAll+0x12c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c76:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <xTaskResumeAll+0x130>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf0 <xTaskResumeAll+0x120>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1cc      	bne.n	8003c1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c8a:	f000 fa19 	bl	80040c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d04 <xTaskResumeAll+0x134>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d010      	beq.n	8003cbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c9a:	f000 f837 	bl	8003d0c <xTaskIncrementTick>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ca4:	4b16      	ldr	r3, [pc, #88]	@ (8003d00 <xTaskResumeAll+0x130>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f1      	bne.n	8003c9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003cb6:	4b13      	ldr	r3, [pc, #76]	@ (8003d04 <xTaskResumeAll+0x134>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cbc:	4b10      	ldr	r3, [pc, #64]	@ (8003d00 <xTaskResumeAll+0x130>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d08 <xTaskResumeAll+0x138>)
 8003cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cd8:	f000 fbd8 	bl	800448c <vPortExitCritical>

	return xAlreadyYielded;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200005c0 	.word	0x200005c0
 8003cec:	20000598 	.word	0x20000598
 8003cf0:	20000558 	.word	0x20000558
 8003cf4:	200005a0 	.word	0x200005a0
 8003cf8:	2000049c 	.word	0x2000049c
 8003cfc:	20000498 	.word	0x20000498
 8003d00:	200005ac 	.word	0x200005ac
 8003d04:	200005a8 	.word	0x200005a8
 8003d08:	e000ed04 	.word	0xe000ed04

08003d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d16:	4b4f      	ldr	r3, [pc, #316]	@ (8003e54 <xTaskIncrementTick+0x148>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f040 808f 	bne.w	8003e3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d20:	4b4d      	ldr	r3, [pc, #308]	@ (8003e58 <xTaskIncrementTick+0x14c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3301      	adds	r3, #1
 8003d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d28:	4a4b      	ldr	r2, [pc, #300]	@ (8003e58 <xTaskIncrementTick+0x14c>)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d121      	bne.n	8003d78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d34:	4b49      	ldr	r3, [pc, #292]	@ (8003e5c <xTaskIncrementTick+0x150>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	603b      	str	r3, [r7, #0]
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	e7fd      	b.n	8003d52 <xTaskIncrementTick+0x46>
 8003d56:	4b41      	ldr	r3, [pc, #260]	@ (8003e5c <xTaskIncrementTick+0x150>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	4b40      	ldr	r3, [pc, #256]	@ (8003e60 <xTaskIncrementTick+0x154>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3e      	ldr	r2, [pc, #248]	@ (8003e5c <xTaskIncrementTick+0x150>)
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4a3e      	ldr	r2, [pc, #248]	@ (8003e60 <xTaskIncrementTick+0x154>)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e64 <xTaskIncrementTick+0x158>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	4a3c      	ldr	r2, [pc, #240]	@ (8003e64 <xTaskIncrementTick+0x158>)
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	f000 f9a4 	bl	80040c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d78:	4b3b      	ldr	r3, [pc, #236]	@ (8003e68 <xTaskIncrementTick+0x15c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d348      	bcc.n	8003e14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d82:	4b36      	ldr	r3, [pc, #216]	@ (8003e5c <xTaskIncrementTick+0x150>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d8c:	4b36      	ldr	r3, [pc, #216]	@ (8003e68 <xTaskIncrementTick+0x15c>)
 8003d8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d92:	601a      	str	r2, [r3, #0]
					break;
 8003d94:	e03e      	b.n	8003e14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d96:	4b31      	ldr	r3, [pc, #196]	@ (8003e5c <xTaskIncrementTick+0x150>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d203      	bcs.n	8003db6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dae:	4a2e      	ldr	r2, [pc, #184]	@ (8003e68 <xTaskIncrementTick+0x15c>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003db4:	e02e      	b.n	8003e14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fc81 	bl	80036c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	3318      	adds	r3, #24
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fc78 	bl	80036c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	4b24      	ldr	r3, [pc, #144]	@ (8003e6c <xTaskIncrementTick+0x160>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	4a22      	ldr	r2, [pc, #136]	@ (8003e6c <xTaskIncrementTick+0x160>)
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e70 <xTaskIncrementTick+0x164>)
 8003df2:	441a      	add	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f7ff fc04 	bl	8003608 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e04:	4b1b      	ldr	r3, [pc, #108]	@ (8003e74 <xTaskIncrementTick+0x168>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d3b9      	bcc.n	8003d82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e12:	e7b6      	b.n	8003d82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e14:	4b17      	ldr	r3, [pc, #92]	@ (8003e74 <xTaskIncrementTick+0x168>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1a:	4915      	ldr	r1, [pc, #84]	@ (8003e70 <xTaskIncrementTick+0x164>)
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d901      	bls.n	8003e30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e30:	4b11      	ldr	r3, [pc, #68]	@ (8003e78 <xTaskIncrementTick+0x16c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e004      	b.n	8003e48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e7c <xTaskIncrementTick+0x170>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	4a0d      	ldr	r2, [pc, #52]	@ (8003e7c <xTaskIncrementTick+0x170>)
 8003e46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e48:	697b      	ldr	r3, [r7, #20]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	200005c0 	.word	0x200005c0
 8003e58:	2000059c 	.word	0x2000059c
 8003e5c:	20000550 	.word	0x20000550
 8003e60:	20000554 	.word	0x20000554
 8003e64:	200005b0 	.word	0x200005b0
 8003e68:	200005b8 	.word	0x200005b8
 8003e6c:	200005a0 	.word	0x200005a0
 8003e70:	2000049c 	.word	0x2000049c
 8003e74:	20000498 	.word	0x20000498
 8003e78:	200005ac 	.word	0x200005ac
 8003e7c:	200005a8 	.word	0x200005a8

08003e80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e86:	4b2a      	ldr	r3, [pc, #168]	@ (8003f30 <vTaskSwitchContext+0xb0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e8e:	4b29      	ldr	r3, [pc, #164]	@ (8003f34 <vTaskSwitchContext+0xb4>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e94:	e045      	b.n	8003f22 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003e96:	4b27      	ldr	r3, [pc, #156]	@ (8003f34 <vTaskSwitchContext+0xb4>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e9c:	4b26      	ldr	r3, [pc, #152]	@ (8003f38 <vTaskSwitchContext+0xb8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	fab3 f383 	clz	r3, r3
 8003ea8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	f1c3 031f 	rsb	r3, r3, #31
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	4922      	ldr	r1, [pc, #136]	@ (8003f3c <vTaskSwitchContext+0xbc>)
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <vTaskSwitchContext+0x5e>
	__asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	607b      	str	r3, [r7, #4]
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	e7fd      	b.n	8003eda <vTaskSwitchContext+0x5a>
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4a14      	ldr	r2, [pc, #80]	@ (8003f3c <vTaskSwitchContext+0xbc>)
 8003eea:	4413      	add	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	605a      	str	r2, [r3, #4]
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	3308      	adds	r3, #8
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d104      	bne.n	8003f0e <vTaskSwitchContext+0x8e>
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a0a      	ldr	r2, [pc, #40]	@ (8003f40 <vTaskSwitchContext+0xc0>)
 8003f16:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f18:	4b09      	ldr	r3, [pc, #36]	@ (8003f40 <vTaskSwitchContext+0xc0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	334c      	adds	r3, #76	@ 0x4c
 8003f1e:	4a09      	ldr	r2, [pc, #36]	@ (8003f44 <vTaskSwitchContext+0xc4>)
 8003f20:	6013      	str	r3, [r2, #0]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	200005c0 	.word	0x200005c0
 8003f34:	200005ac 	.word	0x200005ac
 8003f38:	200005a0 	.word	0x200005a0
 8003f3c:	2000049c 	.word	0x2000049c
 8003f40:	20000498 	.word	0x20000498
 8003f44:	20000010 	.word	0x20000010

08003f48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f50:	f000 f852 	bl	8003ff8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f54:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <prvIdleTask+0x28>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d9f9      	bls.n	8003f50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <prvIdleTask+0x2c>)
 8003f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f6c:	e7f0      	b.n	8003f50 <prvIdleTask+0x8>
 8003f6e:	bf00      	nop
 8003f70:	2000049c 	.word	0x2000049c
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f7e:	2300      	movs	r3, #0
 8003f80:	607b      	str	r3, [r7, #4]
 8003f82:	e00c      	b.n	8003f9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4a12      	ldr	r2, [pc, #72]	@ (8003fd8 <prvInitialiseTaskLists+0x60>)
 8003f90:	4413      	add	r3, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fb0b 	bl	80035ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b06      	cmp	r3, #6
 8003fa2:	d9ef      	bls.n	8003f84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fa4:	480d      	ldr	r0, [pc, #52]	@ (8003fdc <prvInitialiseTaskLists+0x64>)
 8003fa6:	f7ff fb02 	bl	80035ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003faa:	480d      	ldr	r0, [pc, #52]	@ (8003fe0 <prvInitialiseTaskLists+0x68>)
 8003fac:	f7ff faff 	bl	80035ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fb0:	480c      	ldr	r0, [pc, #48]	@ (8003fe4 <prvInitialiseTaskLists+0x6c>)
 8003fb2:	f7ff fafc 	bl	80035ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fb6:	480c      	ldr	r0, [pc, #48]	@ (8003fe8 <prvInitialiseTaskLists+0x70>)
 8003fb8:	f7ff faf9 	bl	80035ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fbc:	480b      	ldr	r0, [pc, #44]	@ (8003fec <prvInitialiseTaskLists+0x74>)
 8003fbe:	f7ff faf6 	bl	80035ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <prvInitialiseTaskLists+0x78>)
 8003fc4:	4a05      	ldr	r2, [pc, #20]	@ (8003fdc <prvInitialiseTaskLists+0x64>)
 8003fc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff4 <prvInitialiseTaskLists+0x7c>)
 8003fca:	4a05      	ldr	r2, [pc, #20]	@ (8003fe0 <prvInitialiseTaskLists+0x68>)
 8003fcc:	601a      	str	r2, [r3, #0]
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	2000049c 	.word	0x2000049c
 8003fdc:	20000528 	.word	0x20000528
 8003fe0:	2000053c 	.word	0x2000053c
 8003fe4:	20000558 	.word	0x20000558
 8003fe8:	2000056c 	.word	0x2000056c
 8003fec:	20000584 	.word	0x20000584
 8003ff0:	20000550 	.word	0x20000550
 8003ff4:	20000554 	.word	0x20000554

08003ff8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ffe:	e019      	b.n	8004034 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004000:	f000 fa12 	bl	8004428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004004:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <prvCheckTasksWaitingTermination+0x50>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fb56 	bl	80036c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004016:	4b0d      	ldr	r3, [pc, #52]	@ (800404c <prvCheckTasksWaitingTermination+0x54>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3b01      	subs	r3, #1
 800401c:	4a0b      	ldr	r2, [pc, #44]	@ (800404c <prvCheckTasksWaitingTermination+0x54>)
 800401e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004020:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <prvCheckTasksWaitingTermination+0x58>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3b01      	subs	r3, #1
 8004026:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <prvCheckTasksWaitingTermination+0x58>)
 8004028:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800402a:	f000 fa2f 	bl	800448c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f810 	bl	8004054 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004034:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <prvCheckTasksWaitingTermination+0x58>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e1      	bne.n	8004000 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	2000056c 	.word	0x2000056c
 800404c:	20000598 	.word	0x20000598
 8004050:	20000580 	.word	0x20000580

08004054 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	334c      	adds	r3, #76	@ 0x4c
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fcd9 	bl	8004a18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800406c:	2b00      	cmp	r3, #0
 800406e:	d108      	bne.n	8004082 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fb85 	bl	8004784 <vPortFree>
				vPortFree( pxTCB );
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fb82 	bl	8004784 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004080:	e019      	b.n	80040b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004088:	2b01      	cmp	r3, #1
 800408a:	d103      	bne.n	8004094 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fb79 	bl	8004784 <vPortFree>
	}
 8004092:	e010      	b.n	80040b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800409a:	2b02      	cmp	r3, #2
 800409c:	d00b      	beq.n	80040b6 <prvDeleteTCB+0x62>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	60fb      	str	r3, [r7, #12]
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	e7fd      	b.n	80040b2 <prvDeleteTCB+0x5e>
	}
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040c6:	4b0c      	ldr	r3, [pc, #48]	@ (80040f8 <prvResetNextTaskUnblockTime+0x38>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040d0:	4b0a      	ldr	r3, [pc, #40]	@ (80040fc <prvResetNextTaskUnblockTime+0x3c>)
 80040d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040d8:	e008      	b.n	80040ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040da:	4b07      	ldr	r3, [pc, #28]	@ (80040f8 <prvResetNextTaskUnblockTime+0x38>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4a04      	ldr	r2, [pc, #16]	@ (80040fc <prvResetNextTaskUnblockTime+0x3c>)
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	20000550 	.word	0x20000550
 80040fc:	200005b8 	.word	0x200005b8

08004100 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800410a:	4b29      	ldr	r3, [pc, #164]	@ (80041b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004110:	4b28      	ldr	r3, [pc, #160]	@ (80041b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3304      	adds	r3, #4
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fad3 	bl	80036c2 <uxListRemove>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004122:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004128:	2201      	movs	r2, #1
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43da      	mvns	r2, r3
 8004130:	4b21      	ldr	r3, [pc, #132]	@ (80041b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4013      	ands	r3, r2
 8004136:	4a20      	ldr	r2, [pc, #128]	@ (80041b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004138:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004140:	d10a      	bne.n	8004158 <prvAddCurrentTaskToDelayedList+0x58>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004148:	4b1a      	ldr	r3, [pc, #104]	@ (80041b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3304      	adds	r3, #4
 800414e:	4619      	mov	r1, r3
 8004150:	481a      	ldr	r0, [pc, #104]	@ (80041bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004152:	f7ff fa59 	bl	8003608 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004156:	e026      	b.n	80041a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4413      	add	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004160:	4b14      	ldr	r3, [pc, #80]	@ (80041b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	429a      	cmp	r2, r3
 800416e:	d209      	bcs.n	8004184 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004170:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b0f      	ldr	r3, [pc, #60]	@ (80041b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3304      	adds	r3, #4
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f7ff fa67 	bl	8003650 <vListInsert>
}
 8004182:	e010      	b.n	80041a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004184:	4b0f      	ldr	r3, [pc, #60]	@ (80041c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4b0a      	ldr	r3, [pc, #40]	@ (80041b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3304      	adds	r3, #4
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f7ff fa5d 	bl	8003650 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004196:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	429a      	cmp	r2, r3
 800419e:	d202      	bcs.n	80041a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041a0:	4a09      	ldr	r2, [pc, #36]	@ (80041c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6013      	str	r3, [r2, #0]
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000059c 	.word	0x2000059c
 80041b4:	20000498 	.word	0x20000498
 80041b8:	200005a0 	.word	0x200005a0
 80041bc:	20000584 	.word	0x20000584
 80041c0:	20000554 	.word	0x20000554
 80041c4:	20000550 	.word	0x20000550
 80041c8:	200005b8 	.word	0x200005b8

080041cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3b04      	subs	r3, #4
 80041dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3b04      	subs	r3, #4
 80041ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f023 0201 	bic.w	r2, r3, #1
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3b04      	subs	r3, #4
 80041fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004230 <pxPortInitialiseStack+0x64>)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3b14      	subs	r3, #20
 8004206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3b04      	subs	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f06f 0202 	mvn.w	r2, #2
 800421a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3b20      	subs	r3, #32
 8004220:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	08004235 	.word	0x08004235

08004234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800423e:	4b13      	ldr	r3, [pc, #76]	@ (800428c <prvTaskExitError+0x58>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004246:	d00b      	beq.n	8004260 <prvTaskExitError+0x2c>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	60fb      	str	r3, [r7, #12]
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <prvTaskExitError+0x28>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	60bb      	str	r3, [r7, #8]
}
 8004272:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004274:	bf00      	nop
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0fc      	beq.n	8004276 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	2000000c 	.word	0x2000000c

08004290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004290:	4b07      	ldr	r3, [pc, #28]	@ (80042b0 <pxCurrentTCBConst2>)
 8004292:	6819      	ldr	r1, [r3, #0]
 8004294:	6808      	ldr	r0, [r1, #0]
 8004296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429a:	f380 8809 	msr	PSP, r0
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f380 8811 	msr	BASEPRI, r0
 80042aa:	4770      	bx	lr
 80042ac:	f3af 8000 	nop.w

080042b0 <pxCurrentTCBConst2>:
 80042b0:	20000498 	.word	0x20000498
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop

080042b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042b8:	4808      	ldr	r0, [pc, #32]	@ (80042dc <prvPortStartFirstTask+0x24>)
 80042ba:	6800      	ldr	r0, [r0, #0]
 80042bc:	6800      	ldr	r0, [r0, #0]
 80042be:	f380 8808 	msr	MSP, r0
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f380 8814 	msr	CONTROL, r0
 80042ca:	b662      	cpsie	i
 80042cc:	b661      	cpsie	f
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	df00      	svc	0
 80042d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042da:	bf00      	nop
 80042dc:	e000ed08 	.word	0xe000ed08

080042e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042e6:	4b47      	ldr	r3, [pc, #284]	@ (8004404 <xPortStartScheduler+0x124>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a47      	ldr	r2, [pc, #284]	@ (8004408 <xPortStartScheduler+0x128>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d10b      	bne.n	8004308 <xPortStartScheduler+0x28>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	60fb      	str	r3, [r7, #12]
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004308:	4b3e      	ldr	r3, [pc, #248]	@ (8004404 <xPortStartScheduler+0x124>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3f      	ldr	r2, [pc, #252]	@ (800440c <xPortStartScheduler+0x12c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10b      	bne.n	800432a <xPortStartScheduler+0x4a>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	613b      	str	r3, [r7, #16]
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	e7fd      	b.n	8004326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800432a:	4b39      	ldr	r3, [pc, #228]	@ (8004410 <xPortStartScheduler+0x130>)
 800432c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	22ff      	movs	r2, #255	@ 0xff
 800433a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800434c:	b2da      	uxtb	r2, r3
 800434e:	4b31      	ldr	r3, [pc, #196]	@ (8004414 <xPortStartScheduler+0x134>)
 8004350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004352:	4b31      	ldr	r3, [pc, #196]	@ (8004418 <xPortStartScheduler+0x138>)
 8004354:	2207      	movs	r2, #7
 8004356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004358:	e009      	b.n	800436e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800435a:	4b2f      	ldr	r3, [pc, #188]	@ (8004418 <xPortStartScheduler+0x138>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3b01      	subs	r3, #1
 8004360:	4a2d      	ldr	r2, [pc, #180]	@ (8004418 <xPortStartScheduler+0x138>)
 8004362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	b2db      	uxtb	r3, r3
 800436c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004376:	2b80      	cmp	r3, #128	@ 0x80
 8004378:	d0ef      	beq.n	800435a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800437a:	4b27      	ldr	r3, [pc, #156]	@ (8004418 <xPortStartScheduler+0x138>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1c3 0307 	rsb	r3, r3, #7
 8004382:	2b04      	cmp	r3, #4
 8004384:	d00b      	beq.n	800439e <xPortStartScheduler+0xbe>
	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	60bb      	str	r3, [r7, #8]
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	e7fd      	b.n	800439a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800439e:	4b1e      	ldr	r3, [pc, #120]	@ (8004418 <xPortStartScheduler+0x138>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004418 <xPortStartScheduler+0x138>)
 80043a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004418 <xPortStartScheduler+0x138>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043b0:	4a19      	ldr	r2, [pc, #100]	@ (8004418 <xPortStartScheduler+0x138>)
 80043b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043bc:	4b17      	ldr	r3, [pc, #92]	@ (800441c <xPortStartScheduler+0x13c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a16      	ldr	r2, [pc, #88]	@ (800441c <xPortStartScheduler+0x13c>)
 80043c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043c8:	4b14      	ldr	r3, [pc, #80]	@ (800441c <xPortStartScheduler+0x13c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a13      	ldr	r2, [pc, #76]	@ (800441c <xPortStartScheduler+0x13c>)
 80043ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80043d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043d4:	f000 f8da 	bl	800458c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043d8:	4b11      	ldr	r3, [pc, #68]	@ (8004420 <xPortStartScheduler+0x140>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043de:	f000 f8f9 	bl	80045d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <xPortStartScheduler+0x144>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004424 <xPortStartScheduler+0x144>)
 80043e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80043ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043ee:	f7ff ff63 	bl	80042b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043f2:	f7ff fd45 	bl	8003e80 <vTaskSwitchContext>
	prvTaskExitError();
 80043f6:	f7ff ff1d 	bl	8004234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	e000ed00 	.word	0xe000ed00
 8004408:	410fc271 	.word	0x410fc271
 800440c:	410fc270 	.word	0x410fc270
 8004410:	e000e400 	.word	0xe000e400
 8004414:	200005c4 	.word	0x200005c4
 8004418:	200005c8 	.word	0x200005c8
 800441c:	e000ed20 	.word	0xe000ed20
 8004420:	2000000c 	.word	0x2000000c
 8004424:	e000ef34 	.word	0xe000ef34

08004428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
}
 8004440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004442:	4b10      	ldr	r3, [pc, #64]	@ (8004484 <vPortEnterCritical+0x5c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	4a0e      	ldr	r2, [pc, #56]	@ (8004484 <vPortEnterCritical+0x5c>)
 800444a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800444c:	4b0d      	ldr	r3, [pc, #52]	@ (8004484 <vPortEnterCritical+0x5c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d110      	bne.n	8004476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004454:	4b0c      	ldr	r3, [pc, #48]	@ (8004488 <vPortEnterCritical+0x60>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <vPortEnterCritical+0x4e>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	603b      	str	r3, [r7, #0]
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	e7fd      	b.n	8004472 <vPortEnterCritical+0x4a>
	}
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	2000000c 	.word	0x2000000c
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004492:	4b12      	ldr	r3, [pc, #72]	@ (80044dc <vPortExitCritical+0x50>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <vPortExitCritical+0x26>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	607b      	str	r3, [r7, #4]
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044b2:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <vPortExitCritical+0x50>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	4a08      	ldr	r2, [pc, #32]	@ (80044dc <vPortExitCritical+0x50>)
 80044ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044bc:	4b07      	ldr	r3, [pc, #28]	@ (80044dc <vPortExitCritical+0x50>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <vPortExitCritical+0x44>
 80044c4:	2300      	movs	r3, #0
 80044c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	2000000c 	.word	0x2000000c

080044e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044e0:	f3ef 8009 	mrs	r0, PSP
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	4b15      	ldr	r3, [pc, #84]	@ (8004540 <pxCurrentTCBConst>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	f01e 0f10 	tst.w	lr, #16
 80044f0:	bf08      	it	eq
 80044f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	6010      	str	r0, [r2, #0]
 80044fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004504:	f380 8811 	msr	BASEPRI, r0
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f7ff fcb6 	bl	8003e80 <vTaskSwitchContext>
 8004514:	f04f 0000 	mov.w	r0, #0
 8004518:	f380 8811 	msr	BASEPRI, r0
 800451c:	bc09      	pop	{r0, r3}
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	6808      	ldr	r0, [r1, #0]
 8004522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004526:	f01e 0f10 	tst.w	lr, #16
 800452a:	bf08      	it	eq
 800452c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004530:	f380 8809 	msr	PSP, r0
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	f3af 8000 	nop.w

08004540 <pxCurrentTCBConst>:
 8004540:	20000498 	.word	0x20000498
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop

08004548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	607b      	str	r3, [r7, #4]
}
 8004560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004562:	f7ff fbd3 	bl	8003d0c <xTaskIncrementTick>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <SysTick_Handler+0x40>)
 800456e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f383 8811 	msr	BASEPRI, r3
}
 800457e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <vPortSetupTimerInterrupt+0x34>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <vPortSetupTimerInterrupt+0x38>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800459c:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <vPortSetupTimerInterrupt+0x3c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	@ (80045cc <vPortSetupTimerInterrupt+0x40>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	099b      	lsrs	r3, r3, #6
 80045a8:	4a09      	ldr	r2, [pc, #36]	@ (80045d0 <vPortSetupTimerInterrupt+0x44>)
 80045aa:	3b01      	subs	r3, #1
 80045ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ae:	4b04      	ldr	r3, [pc, #16]	@ (80045c0 <vPortSetupTimerInterrupt+0x34>)
 80045b0:	2207      	movs	r2, #7
 80045b2:	601a      	str	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000e010 	.word	0xe000e010
 80045c4:	e000e018 	.word	0xe000e018
 80045c8:	20000000 	.word	0x20000000
 80045cc:	10624dd3 	.word	0x10624dd3
 80045d0:	e000e014 	.word	0xe000e014

080045d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80045e4 <vPortEnableVFP+0x10>
 80045d8:	6801      	ldr	r1, [r0, #0]
 80045da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80045de:	6001      	str	r1, [r0, #0]
 80045e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80045e2:	bf00      	nop
 80045e4:	e000ed88 	.word	0xe000ed88

080045e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	@ 0x28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045f4:	f7ff fade 	bl	8003bb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045f8:	4b5c      	ldr	r3, [pc, #368]	@ (800476c <pvPortMalloc+0x184>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004600:	f000 f924 	bl	800484c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004604:	4b5a      	ldr	r3, [pc, #360]	@ (8004770 <pvPortMalloc+0x188>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	f040 8095 	bne.w	800473c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01e      	beq.n	8004656 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004618:	2208      	movs	r2, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	2b00      	cmp	r3, #0
 8004628:	d015      	beq.n	8004656 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f023 0307 	bic.w	r3, r3, #7
 8004630:	3308      	adds	r3, #8
 8004632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00b      	beq.n	8004656 <pvPortMalloc+0x6e>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	617b      	str	r3, [r7, #20]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d06f      	beq.n	800473c <pvPortMalloc+0x154>
 800465c:	4b45      	ldr	r3, [pc, #276]	@ (8004774 <pvPortMalloc+0x18c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	429a      	cmp	r2, r3
 8004664:	d86a      	bhi.n	800473c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004666:	4b44      	ldr	r3, [pc, #272]	@ (8004778 <pvPortMalloc+0x190>)
 8004668:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800466a:	4b43      	ldr	r3, [pc, #268]	@ (8004778 <pvPortMalloc+0x190>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004670:	e004      	b.n	800467c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d903      	bls.n	800468e <pvPortMalloc+0xa6>
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f1      	bne.n	8004672 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800468e:	4b37      	ldr	r3, [pc, #220]	@ (800476c <pvPortMalloc+0x184>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004694:	429a      	cmp	r2, r3
 8004696:	d051      	beq.n	800473c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2208      	movs	r2, #8
 800469e:	4413      	add	r3, r2
 80046a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	1ad2      	subs	r2, r2, r3
 80046b2:	2308      	movs	r3, #8
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d920      	bls.n	80046fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00b      	beq.n	80046e4 <pvPortMalloc+0xfc>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	613b      	str	r3, [r7, #16]
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	1ad2      	subs	r2, r2, r3
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046f6:	69b8      	ldr	r0, [r7, #24]
 80046f8:	f000 f90a 	bl	8004910 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004774 <pvPortMalloc+0x18c>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	4a1b      	ldr	r2, [pc, #108]	@ (8004774 <pvPortMalloc+0x18c>)
 8004708:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800470a:	4b1a      	ldr	r3, [pc, #104]	@ (8004774 <pvPortMalloc+0x18c>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <pvPortMalloc+0x194>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d203      	bcs.n	800471e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004716:	4b17      	ldr	r3, [pc, #92]	@ (8004774 <pvPortMalloc+0x18c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a18      	ldr	r2, [pc, #96]	@ (800477c <pvPortMalloc+0x194>)
 800471c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	4b13      	ldr	r3, [pc, #76]	@ (8004770 <pvPortMalloc+0x188>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	431a      	orrs	r2, r3
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004732:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <pvPortMalloc+0x198>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3301      	adds	r3, #1
 8004738:	4a11      	ldr	r2, [pc, #68]	@ (8004780 <pvPortMalloc+0x198>)
 800473a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800473c:	f7ff fa48 	bl	8003bd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <pvPortMalloc+0x17a>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60fb      	str	r3, [r7, #12]
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	e7fd      	b.n	800475e <pvPortMalloc+0x176>
	return pvReturn;
 8004762:	69fb      	ldr	r3, [r7, #28]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3728      	adds	r7, #40	@ 0x28
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	200041d4 	.word	0x200041d4
 8004770:	200041e8 	.word	0x200041e8
 8004774:	200041d8 	.word	0x200041d8
 8004778:	200041cc 	.word	0x200041cc
 800477c:	200041dc 	.word	0x200041dc
 8004780:	200041e0 	.word	0x200041e0

08004784 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d04f      	beq.n	8004836 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004796:	2308      	movs	r3, #8
 8004798:	425b      	negs	r3, r3
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4413      	add	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	4b25      	ldr	r3, [pc, #148]	@ (8004840 <vPortFree+0xbc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10b      	bne.n	80047ca <vPortFree+0x46>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60fb      	str	r3, [r7, #12]
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	e7fd      	b.n	80047c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00b      	beq.n	80047ea <vPortFree+0x66>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	60bb      	str	r3, [r7, #8]
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	e7fd      	b.n	80047e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	4b14      	ldr	r3, [pc, #80]	@ (8004840 <vPortFree+0xbc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01e      	beq.n	8004836 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d11a      	bne.n	8004836 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	4b0e      	ldr	r3, [pc, #56]	@ (8004840 <vPortFree+0xbc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	43db      	mvns	r3, r3
 800480a:	401a      	ands	r2, r3
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004810:	f7ff f9d0 	bl	8003bb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	4b0a      	ldr	r3, [pc, #40]	@ (8004844 <vPortFree+0xc0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4413      	add	r3, r2
 800481e:	4a09      	ldr	r2, [pc, #36]	@ (8004844 <vPortFree+0xc0>)
 8004820:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004822:	6938      	ldr	r0, [r7, #16]
 8004824:	f000 f874 	bl	8004910 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004828:	4b07      	ldr	r3, [pc, #28]	@ (8004848 <vPortFree+0xc4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3301      	adds	r3, #1
 800482e:	4a06      	ldr	r2, [pc, #24]	@ (8004848 <vPortFree+0xc4>)
 8004830:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004832:	f7ff f9cd 	bl	8003bd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004836:	bf00      	nop
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	200041e8 	.word	0x200041e8
 8004844:	200041d8 	.word	0x200041d8
 8004848:	200041e4 	.word	0x200041e4

0800484c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004852:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004856:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004858:	4b27      	ldr	r3, [pc, #156]	@ (80048f8 <prvHeapInit+0xac>)
 800485a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3307      	adds	r3, #7
 800486a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0307 	bic.w	r3, r3, #7
 8004872:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	4a1f      	ldr	r2, [pc, #124]	@ (80048f8 <prvHeapInit+0xac>)
 800487c:	4413      	add	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004884:	4a1d      	ldr	r2, [pc, #116]	@ (80048fc <prvHeapInit+0xb0>)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800488a:	4b1c      	ldr	r3, [pc, #112]	@ (80048fc <prvHeapInit+0xb0>)
 800488c:	2200      	movs	r2, #0
 800488e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	4413      	add	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004898:	2208      	movs	r2, #8
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0307 	bic.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a15      	ldr	r2, [pc, #84]	@ (8004900 <prvHeapInit+0xb4>)
 80048ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048ae:	4b14      	ldr	r3, [pc, #80]	@ (8004900 <prvHeapInit+0xb4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2200      	movs	r2, #0
 80048b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048b6:	4b12      	ldr	r3, [pc, #72]	@ (8004900 <prvHeapInit+0xb4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <prvHeapInit+0xb4>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004904 <prvHeapInit+0xb8>)
 80048da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	4a09      	ldr	r2, [pc, #36]	@ (8004908 <prvHeapInit+0xbc>)
 80048e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048e4:	4b09      	ldr	r3, [pc, #36]	@ (800490c <prvHeapInit+0xc0>)
 80048e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80048ea:	601a      	str	r2, [r3, #0]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	200005cc 	.word	0x200005cc
 80048fc:	200041cc 	.word	0x200041cc
 8004900:	200041d4 	.word	0x200041d4
 8004904:	200041dc 	.word	0x200041dc
 8004908:	200041d8 	.word	0x200041d8
 800490c:	200041e8 	.word	0x200041e8

08004910 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004918:	4b28      	ldr	r3, [pc, #160]	@ (80049bc <prvInsertBlockIntoFreeList+0xac>)
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e002      	b.n	8004924 <prvInsertBlockIntoFreeList+0x14>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	d8f7      	bhi.n	800491e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	4413      	add	r3, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d108      	bne.n	8004952 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	441a      	add	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d118      	bne.n	8004998 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <prvInsertBlockIntoFreeList+0xb0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d00d      	beq.n	800498e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	441a      	add	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e008      	b.n	80049a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800498e:	4b0c      	ldr	r3, [pc, #48]	@ (80049c0 <prvInsertBlockIntoFreeList+0xb0>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e003      	b.n	80049a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d002      	beq.n	80049ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	200041cc 	.word	0x200041cc
 80049c0:	200041d4 	.word	0x200041d4

080049c4 <siprintf>:
 80049c4:	b40e      	push	{r1, r2, r3}
 80049c6:	b510      	push	{r4, lr}
 80049c8:	b09d      	sub	sp, #116	@ 0x74
 80049ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80049cc:	9002      	str	r0, [sp, #8]
 80049ce:	9006      	str	r0, [sp, #24]
 80049d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049d4:	480a      	ldr	r0, [pc, #40]	@ (8004a00 <siprintf+0x3c>)
 80049d6:	9107      	str	r1, [sp, #28]
 80049d8:	9104      	str	r1, [sp, #16]
 80049da:	490a      	ldr	r1, [pc, #40]	@ (8004a04 <siprintf+0x40>)
 80049dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80049e0:	9105      	str	r1, [sp, #20]
 80049e2:	2400      	movs	r4, #0
 80049e4:	a902      	add	r1, sp, #8
 80049e6:	6800      	ldr	r0, [r0, #0]
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80049ec:	f000 fa00 	bl	8004df0 <_svfiprintf_r>
 80049f0:	9b02      	ldr	r3, [sp, #8]
 80049f2:	701c      	strb	r4, [r3, #0]
 80049f4:	b01d      	add	sp, #116	@ 0x74
 80049f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049fa:	b003      	add	sp, #12
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000010 	.word	0x20000010
 8004a04:	ffff0208 	.word	0xffff0208

08004a08 <memset>:
 8004a08:	4402      	add	r2, r0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <memset+0xa>
 8004a10:	4770      	bx	lr
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	e7f9      	b.n	8004a0c <memset+0x4>

08004a18 <_reclaim_reent>:
 8004a18:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad0 <_reclaim_reent+0xb8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4283      	cmp	r3, r0
 8004a1e:	b570      	push	{r4, r5, r6, lr}
 8004a20:	4604      	mov	r4, r0
 8004a22:	d053      	beq.n	8004acc <_reclaim_reent+0xb4>
 8004a24:	69c3      	ldr	r3, [r0, #28]
 8004a26:	b31b      	cbz	r3, 8004a70 <_reclaim_reent+0x58>
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	b163      	cbz	r3, 8004a46 <_reclaim_reent+0x2e>
 8004a2c:	2500      	movs	r5, #0
 8004a2e:	69e3      	ldr	r3, [r4, #28]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	5959      	ldr	r1, [r3, r5]
 8004a34:	b9b1      	cbnz	r1, 8004a64 <_reclaim_reent+0x4c>
 8004a36:	3504      	adds	r5, #4
 8004a38:	2d80      	cmp	r5, #128	@ 0x80
 8004a3a:	d1f8      	bne.n	8004a2e <_reclaim_reent+0x16>
 8004a3c:	69e3      	ldr	r3, [r4, #28]
 8004a3e:	4620      	mov	r0, r4
 8004a40:	68d9      	ldr	r1, [r3, #12]
 8004a42:	f000 f881 	bl	8004b48 <_free_r>
 8004a46:	69e3      	ldr	r3, [r4, #28]
 8004a48:	6819      	ldr	r1, [r3, #0]
 8004a4a:	b111      	cbz	r1, 8004a52 <_reclaim_reent+0x3a>
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f000 f87b 	bl	8004b48 <_free_r>
 8004a52:	69e3      	ldr	r3, [r4, #28]
 8004a54:	689d      	ldr	r5, [r3, #8]
 8004a56:	b15d      	cbz	r5, 8004a70 <_reclaim_reent+0x58>
 8004a58:	4629      	mov	r1, r5
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	682d      	ldr	r5, [r5, #0]
 8004a5e:	f000 f873 	bl	8004b48 <_free_r>
 8004a62:	e7f8      	b.n	8004a56 <_reclaim_reent+0x3e>
 8004a64:	680e      	ldr	r6, [r1, #0]
 8004a66:	4620      	mov	r0, r4
 8004a68:	f000 f86e 	bl	8004b48 <_free_r>
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	e7e1      	b.n	8004a34 <_reclaim_reent+0x1c>
 8004a70:	6961      	ldr	r1, [r4, #20]
 8004a72:	b111      	cbz	r1, 8004a7a <_reclaim_reent+0x62>
 8004a74:	4620      	mov	r0, r4
 8004a76:	f000 f867 	bl	8004b48 <_free_r>
 8004a7a:	69e1      	ldr	r1, [r4, #28]
 8004a7c:	b111      	cbz	r1, 8004a84 <_reclaim_reent+0x6c>
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f000 f862 	bl	8004b48 <_free_r>
 8004a84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004a86:	b111      	cbz	r1, 8004a8e <_reclaim_reent+0x76>
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 f85d 	bl	8004b48 <_free_r>
 8004a8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a90:	b111      	cbz	r1, 8004a98 <_reclaim_reent+0x80>
 8004a92:	4620      	mov	r0, r4
 8004a94:	f000 f858 	bl	8004b48 <_free_r>
 8004a98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004a9a:	b111      	cbz	r1, 8004aa2 <_reclaim_reent+0x8a>
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f000 f853 	bl	8004b48 <_free_r>
 8004aa2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004aa4:	b111      	cbz	r1, 8004aac <_reclaim_reent+0x94>
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f000 f84e 	bl	8004b48 <_free_r>
 8004aac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004aae:	b111      	cbz	r1, 8004ab6 <_reclaim_reent+0x9e>
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f000 f849 	bl	8004b48 <_free_r>
 8004ab6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004ab8:	b111      	cbz	r1, 8004ac0 <_reclaim_reent+0xa8>
 8004aba:	4620      	mov	r0, r4
 8004abc:	f000 f844 	bl	8004b48 <_free_r>
 8004ac0:	6a23      	ldr	r3, [r4, #32]
 8004ac2:	b11b      	cbz	r3, 8004acc <_reclaim_reent+0xb4>
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004aca:	4718      	bx	r3
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000010 	.word	0x20000010

08004ad4 <__errno>:
 8004ad4:	4b01      	ldr	r3, [pc, #4]	@ (8004adc <__errno+0x8>)
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20000010 	.word	0x20000010

08004ae0 <__libc_init_array>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8004b18 <__libc_init_array+0x38>)
 8004ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8004b1c <__libc_init_array+0x3c>)
 8004ae6:	1b64      	subs	r4, r4, r5
 8004ae8:	10a4      	asrs	r4, r4, #2
 8004aea:	2600      	movs	r6, #0
 8004aec:	42a6      	cmp	r6, r4
 8004aee:	d109      	bne.n	8004b04 <__libc_init_array+0x24>
 8004af0:	4d0b      	ldr	r5, [pc, #44]	@ (8004b20 <__libc_init_array+0x40>)
 8004af2:	4c0c      	ldr	r4, [pc, #48]	@ (8004b24 <__libc_init_array+0x44>)
 8004af4:	f000 fc64 	bl	80053c0 <_init>
 8004af8:	1b64      	subs	r4, r4, r5
 8004afa:	10a4      	asrs	r4, r4, #2
 8004afc:	2600      	movs	r6, #0
 8004afe:	42a6      	cmp	r6, r4
 8004b00:	d105      	bne.n	8004b0e <__libc_init_array+0x2e>
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
 8004b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b08:	4798      	blx	r3
 8004b0a:	3601      	adds	r6, #1
 8004b0c:	e7ee      	b.n	8004aec <__libc_init_array+0xc>
 8004b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b12:	4798      	blx	r3
 8004b14:	3601      	adds	r6, #1
 8004b16:	e7f2      	b.n	8004afe <__libc_init_array+0x1e>
 8004b18:	080054b4 	.word	0x080054b4
 8004b1c:	080054b4 	.word	0x080054b4
 8004b20:	080054b4 	.word	0x080054b4
 8004b24:	080054b8 	.word	0x080054b8

08004b28 <__retarget_lock_acquire_recursive>:
 8004b28:	4770      	bx	lr

08004b2a <__retarget_lock_release_recursive>:
 8004b2a:	4770      	bx	lr

08004b2c <memcpy>:
 8004b2c:	440a      	add	r2, r1
 8004b2e:	4291      	cmp	r1, r2
 8004b30:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004b34:	d100      	bne.n	8004b38 <memcpy+0xc>
 8004b36:	4770      	bx	lr
 8004b38:	b510      	push	{r4, lr}
 8004b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b42:	4291      	cmp	r1, r2
 8004b44:	d1f9      	bne.n	8004b3a <memcpy+0xe>
 8004b46:	bd10      	pop	{r4, pc}

08004b48 <_free_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	4605      	mov	r5, r0
 8004b4c:	2900      	cmp	r1, #0
 8004b4e:	d041      	beq.n	8004bd4 <_free_r+0x8c>
 8004b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b54:	1f0c      	subs	r4, r1, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bfb8      	it	lt
 8004b5a:	18e4      	addlt	r4, r4, r3
 8004b5c:	f000 f8e0 	bl	8004d20 <__malloc_lock>
 8004b60:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd8 <_free_r+0x90>)
 8004b62:	6813      	ldr	r3, [r2, #0]
 8004b64:	b933      	cbnz	r3, 8004b74 <_free_r+0x2c>
 8004b66:	6063      	str	r3, [r4, #4]
 8004b68:	6014      	str	r4, [r2, #0]
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b70:	f000 b8dc 	b.w	8004d2c <__malloc_unlock>
 8004b74:	42a3      	cmp	r3, r4
 8004b76:	d908      	bls.n	8004b8a <_free_r+0x42>
 8004b78:	6820      	ldr	r0, [r4, #0]
 8004b7a:	1821      	adds	r1, r4, r0
 8004b7c:	428b      	cmp	r3, r1
 8004b7e:	bf01      	itttt	eq
 8004b80:	6819      	ldreq	r1, [r3, #0]
 8004b82:	685b      	ldreq	r3, [r3, #4]
 8004b84:	1809      	addeq	r1, r1, r0
 8004b86:	6021      	streq	r1, [r4, #0]
 8004b88:	e7ed      	b.n	8004b66 <_free_r+0x1e>
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	b10b      	cbz	r3, 8004b94 <_free_r+0x4c>
 8004b90:	42a3      	cmp	r3, r4
 8004b92:	d9fa      	bls.n	8004b8a <_free_r+0x42>
 8004b94:	6811      	ldr	r1, [r2, #0]
 8004b96:	1850      	adds	r0, r2, r1
 8004b98:	42a0      	cmp	r0, r4
 8004b9a:	d10b      	bne.n	8004bb4 <_free_r+0x6c>
 8004b9c:	6820      	ldr	r0, [r4, #0]
 8004b9e:	4401      	add	r1, r0
 8004ba0:	1850      	adds	r0, r2, r1
 8004ba2:	4283      	cmp	r3, r0
 8004ba4:	6011      	str	r1, [r2, #0]
 8004ba6:	d1e0      	bne.n	8004b6a <_free_r+0x22>
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	6053      	str	r3, [r2, #4]
 8004bae:	4408      	add	r0, r1
 8004bb0:	6010      	str	r0, [r2, #0]
 8004bb2:	e7da      	b.n	8004b6a <_free_r+0x22>
 8004bb4:	d902      	bls.n	8004bbc <_free_r+0x74>
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	602b      	str	r3, [r5, #0]
 8004bba:	e7d6      	b.n	8004b6a <_free_r+0x22>
 8004bbc:	6820      	ldr	r0, [r4, #0]
 8004bbe:	1821      	adds	r1, r4, r0
 8004bc0:	428b      	cmp	r3, r1
 8004bc2:	bf04      	itt	eq
 8004bc4:	6819      	ldreq	r1, [r3, #0]
 8004bc6:	685b      	ldreq	r3, [r3, #4]
 8004bc8:	6063      	str	r3, [r4, #4]
 8004bca:	bf04      	itt	eq
 8004bcc:	1809      	addeq	r1, r1, r0
 8004bce:	6021      	streq	r1, [r4, #0]
 8004bd0:	6054      	str	r4, [r2, #4]
 8004bd2:	e7ca      	b.n	8004b6a <_free_r+0x22>
 8004bd4:	bd38      	pop	{r3, r4, r5, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20004330 	.word	0x20004330

08004bdc <sbrk_aligned>:
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	4e0f      	ldr	r6, [pc, #60]	@ (8004c1c <sbrk_aligned+0x40>)
 8004be0:	460c      	mov	r4, r1
 8004be2:	6831      	ldr	r1, [r6, #0]
 8004be4:	4605      	mov	r5, r0
 8004be6:	b911      	cbnz	r1, 8004bee <sbrk_aligned+0x12>
 8004be8:	f000 fba4 	bl	8005334 <_sbrk_r>
 8004bec:	6030      	str	r0, [r6, #0]
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f000 fb9f 	bl	8005334 <_sbrk_r>
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	d103      	bne.n	8004c02 <sbrk_aligned+0x26>
 8004bfa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004bfe:	4620      	mov	r0, r4
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
 8004c02:	1cc4      	adds	r4, r0, #3
 8004c04:	f024 0403 	bic.w	r4, r4, #3
 8004c08:	42a0      	cmp	r0, r4
 8004c0a:	d0f8      	beq.n	8004bfe <sbrk_aligned+0x22>
 8004c0c:	1a21      	subs	r1, r4, r0
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 fb90 	bl	8005334 <_sbrk_r>
 8004c14:	3001      	adds	r0, #1
 8004c16:	d1f2      	bne.n	8004bfe <sbrk_aligned+0x22>
 8004c18:	e7ef      	b.n	8004bfa <sbrk_aligned+0x1e>
 8004c1a:	bf00      	nop
 8004c1c:	2000432c 	.word	0x2000432c

08004c20 <_malloc_r>:
 8004c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c24:	1ccd      	adds	r5, r1, #3
 8004c26:	f025 0503 	bic.w	r5, r5, #3
 8004c2a:	3508      	adds	r5, #8
 8004c2c:	2d0c      	cmp	r5, #12
 8004c2e:	bf38      	it	cc
 8004c30:	250c      	movcc	r5, #12
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	4606      	mov	r6, r0
 8004c36:	db01      	blt.n	8004c3c <_malloc_r+0x1c>
 8004c38:	42a9      	cmp	r1, r5
 8004c3a:	d904      	bls.n	8004c46 <_malloc_r+0x26>
 8004c3c:	230c      	movs	r3, #12
 8004c3e:	6033      	str	r3, [r6, #0]
 8004c40:	2000      	movs	r0, #0
 8004c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d1c <_malloc_r+0xfc>
 8004c4a:	f000 f869 	bl	8004d20 <__malloc_lock>
 8004c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c52:	461c      	mov	r4, r3
 8004c54:	bb44      	cbnz	r4, 8004ca8 <_malloc_r+0x88>
 8004c56:	4629      	mov	r1, r5
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f7ff ffbf 	bl	8004bdc <sbrk_aligned>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	4604      	mov	r4, r0
 8004c62:	d158      	bne.n	8004d16 <_malloc_r+0xf6>
 8004c64:	f8d8 4000 	ldr.w	r4, [r8]
 8004c68:	4627      	mov	r7, r4
 8004c6a:	2f00      	cmp	r7, #0
 8004c6c:	d143      	bne.n	8004cf6 <_malloc_r+0xd6>
 8004c6e:	2c00      	cmp	r4, #0
 8004c70:	d04b      	beq.n	8004d0a <_malloc_r+0xea>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	4639      	mov	r1, r7
 8004c76:	4630      	mov	r0, r6
 8004c78:	eb04 0903 	add.w	r9, r4, r3
 8004c7c:	f000 fb5a 	bl	8005334 <_sbrk_r>
 8004c80:	4581      	cmp	r9, r0
 8004c82:	d142      	bne.n	8004d0a <_malloc_r+0xea>
 8004c84:	6821      	ldr	r1, [r4, #0]
 8004c86:	1a6d      	subs	r5, r5, r1
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7ff ffa6 	bl	8004bdc <sbrk_aligned>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d03a      	beq.n	8004d0a <_malloc_r+0xea>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	442b      	add	r3, r5
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	bb62      	cbnz	r2, 8004cfc <_malloc_r+0xdc>
 8004ca2:	f8c8 7000 	str.w	r7, [r8]
 8004ca6:	e00f      	b.n	8004cc8 <_malloc_r+0xa8>
 8004ca8:	6822      	ldr	r2, [r4, #0]
 8004caa:	1b52      	subs	r2, r2, r5
 8004cac:	d420      	bmi.n	8004cf0 <_malloc_r+0xd0>
 8004cae:	2a0b      	cmp	r2, #11
 8004cb0:	d917      	bls.n	8004ce2 <_malloc_r+0xc2>
 8004cb2:	1961      	adds	r1, r4, r5
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	6025      	str	r5, [r4, #0]
 8004cb8:	bf18      	it	ne
 8004cba:	6059      	strne	r1, [r3, #4]
 8004cbc:	6863      	ldr	r3, [r4, #4]
 8004cbe:	bf08      	it	eq
 8004cc0:	f8c8 1000 	streq.w	r1, [r8]
 8004cc4:	5162      	str	r2, [r4, r5]
 8004cc6:	604b      	str	r3, [r1, #4]
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f000 f82f 	bl	8004d2c <__malloc_unlock>
 8004cce:	f104 000b 	add.w	r0, r4, #11
 8004cd2:	1d23      	adds	r3, r4, #4
 8004cd4:	f020 0007 	bic.w	r0, r0, #7
 8004cd8:	1ac2      	subs	r2, r0, r3
 8004cda:	bf1c      	itt	ne
 8004cdc:	1a1b      	subne	r3, r3, r0
 8004cde:	50a3      	strne	r3, [r4, r2]
 8004ce0:	e7af      	b.n	8004c42 <_malloc_r+0x22>
 8004ce2:	6862      	ldr	r2, [r4, #4]
 8004ce4:	42a3      	cmp	r3, r4
 8004ce6:	bf0c      	ite	eq
 8004ce8:	f8c8 2000 	streq.w	r2, [r8]
 8004cec:	605a      	strne	r2, [r3, #4]
 8004cee:	e7eb      	b.n	8004cc8 <_malloc_r+0xa8>
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	6864      	ldr	r4, [r4, #4]
 8004cf4:	e7ae      	b.n	8004c54 <_malloc_r+0x34>
 8004cf6:	463c      	mov	r4, r7
 8004cf8:	687f      	ldr	r7, [r7, #4]
 8004cfa:	e7b6      	b.n	8004c6a <_malloc_r+0x4a>
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	42a3      	cmp	r3, r4
 8004d02:	d1fb      	bne.n	8004cfc <_malloc_r+0xdc>
 8004d04:	2300      	movs	r3, #0
 8004d06:	6053      	str	r3, [r2, #4]
 8004d08:	e7de      	b.n	8004cc8 <_malloc_r+0xa8>
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	6033      	str	r3, [r6, #0]
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f000 f80c 	bl	8004d2c <__malloc_unlock>
 8004d14:	e794      	b.n	8004c40 <_malloc_r+0x20>
 8004d16:	6005      	str	r5, [r0, #0]
 8004d18:	e7d6      	b.n	8004cc8 <_malloc_r+0xa8>
 8004d1a:	bf00      	nop
 8004d1c:	20004330 	.word	0x20004330

08004d20 <__malloc_lock>:
 8004d20:	4801      	ldr	r0, [pc, #4]	@ (8004d28 <__malloc_lock+0x8>)
 8004d22:	f7ff bf01 	b.w	8004b28 <__retarget_lock_acquire_recursive>
 8004d26:	bf00      	nop
 8004d28:	20004328 	.word	0x20004328

08004d2c <__malloc_unlock>:
 8004d2c:	4801      	ldr	r0, [pc, #4]	@ (8004d34 <__malloc_unlock+0x8>)
 8004d2e:	f7ff befc 	b.w	8004b2a <__retarget_lock_release_recursive>
 8004d32:	bf00      	nop
 8004d34:	20004328 	.word	0x20004328

08004d38 <__ssputs_r>:
 8004d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	688e      	ldr	r6, [r1, #8]
 8004d3e:	461f      	mov	r7, r3
 8004d40:	42be      	cmp	r6, r7
 8004d42:	680b      	ldr	r3, [r1, #0]
 8004d44:	4682      	mov	sl, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	4690      	mov	r8, r2
 8004d4a:	d82d      	bhi.n	8004da8 <__ssputs_r+0x70>
 8004d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d54:	d026      	beq.n	8004da4 <__ssputs_r+0x6c>
 8004d56:	6965      	ldr	r5, [r4, #20]
 8004d58:	6909      	ldr	r1, [r1, #16]
 8004d5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d5e:	eba3 0901 	sub.w	r9, r3, r1
 8004d62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d66:	1c7b      	adds	r3, r7, #1
 8004d68:	444b      	add	r3, r9
 8004d6a:	106d      	asrs	r5, r5, #1
 8004d6c:	429d      	cmp	r5, r3
 8004d6e:	bf38      	it	cc
 8004d70:	461d      	movcc	r5, r3
 8004d72:	0553      	lsls	r3, r2, #21
 8004d74:	d527      	bpl.n	8004dc6 <__ssputs_r+0x8e>
 8004d76:	4629      	mov	r1, r5
 8004d78:	f7ff ff52 	bl	8004c20 <_malloc_r>
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	b360      	cbz	r0, 8004dda <__ssputs_r+0xa2>
 8004d80:	6921      	ldr	r1, [r4, #16]
 8004d82:	464a      	mov	r2, r9
 8004d84:	f7ff fed2 	bl	8004b2c <memcpy>
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d92:	81a3      	strh	r3, [r4, #12]
 8004d94:	6126      	str	r6, [r4, #16]
 8004d96:	6165      	str	r5, [r4, #20]
 8004d98:	444e      	add	r6, r9
 8004d9a:	eba5 0509 	sub.w	r5, r5, r9
 8004d9e:	6026      	str	r6, [r4, #0]
 8004da0:	60a5      	str	r5, [r4, #8]
 8004da2:	463e      	mov	r6, r7
 8004da4:	42be      	cmp	r6, r7
 8004da6:	d900      	bls.n	8004daa <__ssputs_r+0x72>
 8004da8:	463e      	mov	r6, r7
 8004daa:	6820      	ldr	r0, [r4, #0]
 8004dac:	4632      	mov	r2, r6
 8004dae:	4641      	mov	r1, r8
 8004db0:	f000 faa6 	bl	8005300 <memmove>
 8004db4:	68a3      	ldr	r3, [r4, #8]
 8004db6:	1b9b      	subs	r3, r3, r6
 8004db8:	60a3      	str	r3, [r4, #8]
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	4433      	add	r3, r6
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc6:	462a      	mov	r2, r5
 8004dc8:	f000 fac4 	bl	8005354 <_realloc_r>
 8004dcc:	4606      	mov	r6, r0
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	d1e0      	bne.n	8004d94 <__ssputs_r+0x5c>
 8004dd2:	6921      	ldr	r1, [r4, #16]
 8004dd4:	4650      	mov	r0, sl
 8004dd6:	f7ff feb7 	bl	8004b48 <_free_r>
 8004dda:	230c      	movs	r3, #12
 8004ddc:	f8ca 3000 	str.w	r3, [sl]
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004de6:	81a3      	strh	r3, [r4, #12]
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dec:	e7e9      	b.n	8004dc2 <__ssputs_r+0x8a>
	...

08004df0 <_svfiprintf_r>:
 8004df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df4:	4698      	mov	r8, r3
 8004df6:	898b      	ldrh	r3, [r1, #12]
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	b09d      	sub	sp, #116	@ 0x74
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	460d      	mov	r5, r1
 8004e00:	4614      	mov	r4, r2
 8004e02:	d510      	bpl.n	8004e26 <_svfiprintf_r+0x36>
 8004e04:	690b      	ldr	r3, [r1, #16]
 8004e06:	b973      	cbnz	r3, 8004e26 <_svfiprintf_r+0x36>
 8004e08:	2140      	movs	r1, #64	@ 0x40
 8004e0a:	f7ff ff09 	bl	8004c20 <_malloc_r>
 8004e0e:	6028      	str	r0, [r5, #0]
 8004e10:	6128      	str	r0, [r5, #16]
 8004e12:	b930      	cbnz	r0, 8004e22 <_svfiprintf_r+0x32>
 8004e14:	230c      	movs	r3, #12
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e1c:	b01d      	add	sp, #116	@ 0x74
 8004e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e22:	2340      	movs	r3, #64	@ 0x40
 8004e24:	616b      	str	r3, [r5, #20]
 8004e26:	2300      	movs	r3, #0
 8004e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e2a:	2320      	movs	r3, #32
 8004e2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e34:	2330      	movs	r3, #48	@ 0x30
 8004e36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004fd4 <_svfiprintf_r+0x1e4>
 8004e3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e3e:	f04f 0901 	mov.w	r9, #1
 8004e42:	4623      	mov	r3, r4
 8004e44:	469a      	mov	sl, r3
 8004e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e4a:	b10a      	cbz	r2, 8004e50 <_svfiprintf_r+0x60>
 8004e4c:	2a25      	cmp	r2, #37	@ 0x25
 8004e4e:	d1f9      	bne.n	8004e44 <_svfiprintf_r+0x54>
 8004e50:	ebba 0b04 	subs.w	fp, sl, r4
 8004e54:	d00b      	beq.n	8004e6e <_svfiprintf_r+0x7e>
 8004e56:	465b      	mov	r3, fp
 8004e58:	4622      	mov	r2, r4
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f7ff ff6b 	bl	8004d38 <__ssputs_r>
 8004e62:	3001      	adds	r0, #1
 8004e64:	f000 80a7 	beq.w	8004fb6 <_svfiprintf_r+0x1c6>
 8004e68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e6a:	445a      	add	r2, fp
 8004e6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 809f 	beq.w	8004fb6 <_svfiprintf_r+0x1c6>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e82:	f10a 0a01 	add.w	sl, sl, #1
 8004e86:	9304      	str	r3, [sp, #16]
 8004e88:	9307      	str	r3, [sp, #28]
 8004e8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e90:	4654      	mov	r4, sl
 8004e92:	2205      	movs	r2, #5
 8004e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e98:	484e      	ldr	r0, [pc, #312]	@ (8004fd4 <_svfiprintf_r+0x1e4>)
 8004e9a:	f7fb f9a1 	bl	80001e0 <memchr>
 8004e9e:	9a04      	ldr	r2, [sp, #16]
 8004ea0:	b9d8      	cbnz	r0, 8004eda <_svfiprintf_r+0xea>
 8004ea2:	06d0      	lsls	r0, r2, #27
 8004ea4:	bf44      	itt	mi
 8004ea6:	2320      	movmi	r3, #32
 8004ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eac:	0711      	lsls	r1, r2, #28
 8004eae:	bf44      	itt	mi
 8004eb0:	232b      	movmi	r3, #43	@ 0x2b
 8004eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ebc:	d015      	beq.n	8004eea <_svfiprintf_r+0xfa>
 8004ebe:	9a07      	ldr	r2, [sp, #28]
 8004ec0:	4654      	mov	r4, sl
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f04f 0c0a 	mov.w	ip, #10
 8004ec8:	4621      	mov	r1, r4
 8004eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ece:	3b30      	subs	r3, #48	@ 0x30
 8004ed0:	2b09      	cmp	r3, #9
 8004ed2:	d94b      	bls.n	8004f6c <_svfiprintf_r+0x17c>
 8004ed4:	b1b0      	cbz	r0, 8004f04 <_svfiprintf_r+0x114>
 8004ed6:	9207      	str	r2, [sp, #28]
 8004ed8:	e014      	b.n	8004f04 <_svfiprintf_r+0x114>
 8004eda:	eba0 0308 	sub.w	r3, r0, r8
 8004ede:	fa09 f303 	lsl.w	r3, r9, r3
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	46a2      	mov	sl, r4
 8004ee8:	e7d2      	b.n	8004e90 <_svfiprintf_r+0xa0>
 8004eea:	9b03      	ldr	r3, [sp, #12]
 8004eec:	1d19      	adds	r1, r3, #4
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	9103      	str	r1, [sp, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bfbb      	ittet	lt
 8004ef6:	425b      	neglt	r3, r3
 8004ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8004efc:	9307      	strge	r3, [sp, #28]
 8004efe:	9307      	strlt	r3, [sp, #28]
 8004f00:	bfb8      	it	lt
 8004f02:	9204      	strlt	r2, [sp, #16]
 8004f04:	7823      	ldrb	r3, [r4, #0]
 8004f06:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f08:	d10a      	bne.n	8004f20 <_svfiprintf_r+0x130>
 8004f0a:	7863      	ldrb	r3, [r4, #1]
 8004f0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f0e:	d132      	bne.n	8004f76 <_svfiprintf_r+0x186>
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	1d1a      	adds	r2, r3, #4
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	9203      	str	r2, [sp, #12]
 8004f18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f1c:	3402      	adds	r4, #2
 8004f1e:	9305      	str	r3, [sp, #20]
 8004f20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004fe4 <_svfiprintf_r+0x1f4>
 8004f24:	7821      	ldrb	r1, [r4, #0]
 8004f26:	2203      	movs	r2, #3
 8004f28:	4650      	mov	r0, sl
 8004f2a:	f7fb f959 	bl	80001e0 <memchr>
 8004f2e:	b138      	cbz	r0, 8004f40 <_svfiprintf_r+0x150>
 8004f30:	9b04      	ldr	r3, [sp, #16]
 8004f32:	eba0 000a 	sub.w	r0, r0, sl
 8004f36:	2240      	movs	r2, #64	@ 0x40
 8004f38:	4082      	lsls	r2, r0
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	3401      	adds	r4, #1
 8004f3e:	9304      	str	r3, [sp, #16]
 8004f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f44:	4824      	ldr	r0, [pc, #144]	@ (8004fd8 <_svfiprintf_r+0x1e8>)
 8004f46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f4a:	2206      	movs	r2, #6
 8004f4c:	f7fb f948 	bl	80001e0 <memchr>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d036      	beq.n	8004fc2 <_svfiprintf_r+0x1d2>
 8004f54:	4b21      	ldr	r3, [pc, #132]	@ (8004fdc <_svfiprintf_r+0x1ec>)
 8004f56:	bb1b      	cbnz	r3, 8004fa0 <_svfiprintf_r+0x1b0>
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	3307      	adds	r3, #7
 8004f5c:	f023 0307 	bic.w	r3, r3, #7
 8004f60:	3308      	adds	r3, #8
 8004f62:	9303      	str	r3, [sp, #12]
 8004f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f66:	4433      	add	r3, r6
 8004f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f6a:	e76a      	b.n	8004e42 <_svfiprintf_r+0x52>
 8004f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f70:	460c      	mov	r4, r1
 8004f72:	2001      	movs	r0, #1
 8004f74:	e7a8      	b.n	8004ec8 <_svfiprintf_r+0xd8>
 8004f76:	2300      	movs	r3, #0
 8004f78:	3401      	adds	r4, #1
 8004f7a:	9305      	str	r3, [sp, #20]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f04f 0c0a 	mov.w	ip, #10
 8004f82:	4620      	mov	r0, r4
 8004f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f88:	3a30      	subs	r2, #48	@ 0x30
 8004f8a:	2a09      	cmp	r2, #9
 8004f8c:	d903      	bls.n	8004f96 <_svfiprintf_r+0x1a6>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0c6      	beq.n	8004f20 <_svfiprintf_r+0x130>
 8004f92:	9105      	str	r1, [sp, #20]
 8004f94:	e7c4      	b.n	8004f20 <_svfiprintf_r+0x130>
 8004f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e7f0      	b.n	8004f82 <_svfiprintf_r+0x192>
 8004fa0:	ab03      	add	r3, sp, #12
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	462a      	mov	r2, r5
 8004fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe0 <_svfiprintf_r+0x1f0>)
 8004fa8:	a904      	add	r1, sp, #16
 8004faa:	4638      	mov	r0, r7
 8004fac:	f3af 8000 	nop.w
 8004fb0:	1c42      	adds	r2, r0, #1
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	d1d6      	bne.n	8004f64 <_svfiprintf_r+0x174>
 8004fb6:	89ab      	ldrh	r3, [r5, #12]
 8004fb8:	065b      	lsls	r3, r3, #25
 8004fba:	f53f af2d 	bmi.w	8004e18 <_svfiprintf_r+0x28>
 8004fbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fc0:	e72c      	b.n	8004e1c <_svfiprintf_r+0x2c>
 8004fc2:	ab03      	add	r3, sp, #12
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	462a      	mov	r2, r5
 8004fc8:	4b05      	ldr	r3, [pc, #20]	@ (8004fe0 <_svfiprintf_r+0x1f0>)
 8004fca:	a904      	add	r1, sp, #16
 8004fcc:	4638      	mov	r0, r7
 8004fce:	f000 f879 	bl	80050c4 <_printf_i>
 8004fd2:	e7ed      	b.n	8004fb0 <_svfiprintf_r+0x1c0>
 8004fd4:	08005478 	.word	0x08005478
 8004fd8:	08005482 	.word	0x08005482
 8004fdc:	00000000 	.word	0x00000000
 8004fe0:	08004d39 	.word	0x08004d39
 8004fe4:	0800547e 	.word	0x0800547e

08004fe8 <_printf_common>:
 8004fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	4616      	mov	r6, r2
 8004fee:	4698      	mov	r8, r3
 8004ff0:	688a      	ldr	r2, [r1, #8]
 8004ff2:	690b      	ldr	r3, [r1, #16]
 8004ff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	bfb8      	it	lt
 8004ffc:	4613      	movlt	r3, r2
 8004ffe:	6033      	str	r3, [r6, #0]
 8005000:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005004:	4607      	mov	r7, r0
 8005006:	460c      	mov	r4, r1
 8005008:	b10a      	cbz	r2, 800500e <_printf_common+0x26>
 800500a:	3301      	adds	r3, #1
 800500c:	6033      	str	r3, [r6, #0]
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	0699      	lsls	r1, r3, #26
 8005012:	bf42      	ittt	mi
 8005014:	6833      	ldrmi	r3, [r6, #0]
 8005016:	3302      	addmi	r3, #2
 8005018:	6033      	strmi	r3, [r6, #0]
 800501a:	6825      	ldr	r5, [r4, #0]
 800501c:	f015 0506 	ands.w	r5, r5, #6
 8005020:	d106      	bne.n	8005030 <_printf_common+0x48>
 8005022:	f104 0a19 	add.w	sl, r4, #25
 8005026:	68e3      	ldr	r3, [r4, #12]
 8005028:	6832      	ldr	r2, [r6, #0]
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	42ab      	cmp	r3, r5
 800502e:	dc26      	bgt.n	800507e <_printf_common+0x96>
 8005030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	3b00      	subs	r3, #0
 8005038:	bf18      	it	ne
 800503a:	2301      	movne	r3, #1
 800503c:	0692      	lsls	r2, r2, #26
 800503e:	d42b      	bmi.n	8005098 <_printf_common+0xb0>
 8005040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005044:	4641      	mov	r1, r8
 8005046:	4638      	mov	r0, r7
 8005048:	47c8      	blx	r9
 800504a:	3001      	adds	r0, #1
 800504c:	d01e      	beq.n	800508c <_printf_common+0xa4>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	6922      	ldr	r2, [r4, #16]
 8005052:	f003 0306 	and.w	r3, r3, #6
 8005056:	2b04      	cmp	r3, #4
 8005058:	bf02      	ittt	eq
 800505a:	68e5      	ldreq	r5, [r4, #12]
 800505c:	6833      	ldreq	r3, [r6, #0]
 800505e:	1aed      	subeq	r5, r5, r3
 8005060:	68a3      	ldr	r3, [r4, #8]
 8005062:	bf0c      	ite	eq
 8005064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005068:	2500      	movne	r5, #0
 800506a:	4293      	cmp	r3, r2
 800506c:	bfc4      	itt	gt
 800506e:	1a9b      	subgt	r3, r3, r2
 8005070:	18ed      	addgt	r5, r5, r3
 8005072:	2600      	movs	r6, #0
 8005074:	341a      	adds	r4, #26
 8005076:	42b5      	cmp	r5, r6
 8005078:	d11a      	bne.n	80050b0 <_printf_common+0xc8>
 800507a:	2000      	movs	r0, #0
 800507c:	e008      	b.n	8005090 <_printf_common+0xa8>
 800507e:	2301      	movs	r3, #1
 8005080:	4652      	mov	r2, sl
 8005082:	4641      	mov	r1, r8
 8005084:	4638      	mov	r0, r7
 8005086:	47c8      	blx	r9
 8005088:	3001      	adds	r0, #1
 800508a:	d103      	bne.n	8005094 <_printf_common+0xac>
 800508c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005094:	3501      	adds	r5, #1
 8005096:	e7c6      	b.n	8005026 <_printf_common+0x3e>
 8005098:	18e1      	adds	r1, r4, r3
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	2030      	movs	r0, #48	@ 0x30
 800509e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050a2:	4422      	add	r2, r4
 80050a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050ac:	3302      	adds	r3, #2
 80050ae:	e7c7      	b.n	8005040 <_printf_common+0x58>
 80050b0:	2301      	movs	r3, #1
 80050b2:	4622      	mov	r2, r4
 80050b4:	4641      	mov	r1, r8
 80050b6:	4638      	mov	r0, r7
 80050b8:	47c8      	blx	r9
 80050ba:	3001      	adds	r0, #1
 80050bc:	d0e6      	beq.n	800508c <_printf_common+0xa4>
 80050be:	3601      	adds	r6, #1
 80050c0:	e7d9      	b.n	8005076 <_printf_common+0x8e>
	...

080050c4 <_printf_i>:
 80050c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050c8:	7e0f      	ldrb	r7, [r1, #24]
 80050ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050cc:	2f78      	cmp	r7, #120	@ 0x78
 80050ce:	4691      	mov	r9, r2
 80050d0:	4680      	mov	r8, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	469a      	mov	sl, r3
 80050d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050da:	d807      	bhi.n	80050ec <_printf_i+0x28>
 80050dc:	2f62      	cmp	r7, #98	@ 0x62
 80050de:	d80a      	bhi.n	80050f6 <_printf_i+0x32>
 80050e0:	2f00      	cmp	r7, #0
 80050e2:	f000 80d1 	beq.w	8005288 <_printf_i+0x1c4>
 80050e6:	2f58      	cmp	r7, #88	@ 0x58
 80050e8:	f000 80b8 	beq.w	800525c <_printf_i+0x198>
 80050ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050f4:	e03a      	b.n	800516c <_printf_i+0xa8>
 80050f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050fa:	2b15      	cmp	r3, #21
 80050fc:	d8f6      	bhi.n	80050ec <_printf_i+0x28>
 80050fe:	a101      	add	r1, pc, #4	@ (adr r1, 8005104 <_printf_i+0x40>)
 8005100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005104:	0800515d 	.word	0x0800515d
 8005108:	08005171 	.word	0x08005171
 800510c:	080050ed 	.word	0x080050ed
 8005110:	080050ed 	.word	0x080050ed
 8005114:	080050ed 	.word	0x080050ed
 8005118:	080050ed 	.word	0x080050ed
 800511c:	08005171 	.word	0x08005171
 8005120:	080050ed 	.word	0x080050ed
 8005124:	080050ed 	.word	0x080050ed
 8005128:	080050ed 	.word	0x080050ed
 800512c:	080050ed 	.word	0x080050ed
 8005130:	0800526f 	.word	0x0800526f
 8005134:	0800519b 	.word	0x0800519b
 8005138:	08005229 	.word	0x08005229
 800513c:	080050ed 	.word	0x080050ed
 8005140:	080050ed 	.word	0x080050ed
 8005144:	08005291 	.word	0x08005291
 8005148:	080050ed 	.word	0x080050ed
 800514c:	0800519b 	.word	0x0800519b
 8005150:	080050ed 	.word	0x080050ed
 8005154:	080050ed 	.word	0x080050ed
 8005158:	08005231 	.word	0x08005231
 800515c:	6833      	ldr	r3, [r6, #0]
 800515e:	1d1a      	adds	r2, r3, #4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6032      	str	r2, [r6, #0]
 8005164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800516c:	2301      	movs	r3, #1
 800516e:	e09c      	b.n	80052aa <_printf_i+0x1e6>
 8005170:	6833      	ldr	r3, [r6, #0]
 8005172:	6820      	ldr	r0, [r4, #0]
 8005174:	1d19      	adds	r1, r3, #4
 8005176:	6031      	str	r1, [r6, #0]
 8005178:	0606      	lsls	r6, r0, #24
 800517a:	d501      	bpl.n	8005180 <_printf_i+0xbc>
 800517c:	681d      	ldr	r5, [r3, #0]
 800517e:	e003      	b.n	8005188 <_printf_i+0xc4>
 8005180:	0645      	lsls	r5, r0, #25
 8005182:	d5fb      	bpl.n	800517c <_printf_i+0xb8>
 8005184:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005188:	2d00      	cmp	r5, #0
 800518a:	da03      	bge.n	8005194 <_printf_i+0xd0>
 800518c:	232d      	movs	r3, #45	@ 0x2d
 800518e:	426d      	negs	r5, r5
 8005190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005194:	4858      	ldr	r0, [pc, #352]	@ (80052f8 <_printf_i+0x234>)
 8005196:	230a      	movs	r3, #10
 8005198:	e011      	b.n	80051be <_printf_i+0xfa>
 800519a:	6821      	ldr	r1, [r4, #0]
 800519c:	6833      	ldr	r3, [r6, #0]
 800519e:	0608      	lsls	r0, r1, #24
 80051a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80051a4:	d402      	bmi.n	80051ac <_printf_i+0xe8>
 80051a6:	0649      	lsls	r1, r1, #25
 80051a8:	bf48      	it	mi
 80051aa:	b2ad      	uxthmi	r5, r5
 80051ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80051ae:	4852      	ldr	r0, [pc, #328]	@ (80052f8 <_printf_i+0x234>)
 80051b0:	6033      	str	r3, [r6, #0]
 80051b2:	bf14      	ite	ne
 80051b4:	230a      	movne	r3, #10
 80051b6:	2308      	moveq	r3, #8
 80051b8:	2100      	movs	r1, #0
 80051ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051be:	6866      	ldr	r6, [r4, #4]
 80051c0:	60a6      	str	r6, [r4, #8]
 80051c2:	2e00      	cmp	r6, #0
 80051c4:	db05      	blt.n	80051d2 <_printf_i+0x10e>
 80051c6:	6821      	ldr	r1, [r4, #0]
 80051c8:	432e      	orrs	r6, r5
 80051ca:	f021 0104 	bic.w	r1, r1, #4
 80051ce:	6021      	str	r1, [r4, #0]
 80051d0:	d04b      	beq.n	800526a <_printf_i+0x1a6>
 80051d2:	4616      	mov	r6, r2
 80051d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80051d8:	fb03 5711 	mls	r7, r3, r1, r5
 80051dc:	5dc7      	ldrb	r7, [r0, r7]
 80051de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051e2:	462f      	mov	r7, r5
 80051e4:	42bb      	cmp	r3, r7
 80051e6:	460d      	mov	r5, r1
 80051e8:	d9f4      	bls.n	80051d4 <_printf_i+0x110>
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d10b      	bne.n	8005206 <_printf_i+0x142>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	07df      	lsls	r7, r3, #31
 80051f2:	d508      	bpl.n	8005206 <_printf_i+0x142>
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	6861      	ldr	r1, [r4, #4]
 80051f8:	4299      	cmp	r1, r3
 80051fa:	bfde      	ittt	le
 80051fc:	2330      	movle	r3, #48	@ 0x30
 80051fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005202:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005206:	1b92      	subs	r2, r2, r6
 8005208:	6122      	str	r2, [r4, #16]
 800520a:	f8cd a000 	str.w	sl, [sp]
 800520e:	464b      	mov	r3, r9
 8005210:	aa03      	add	r2, sp, #12
 8005212:	4621      	mov	r1, r4
 8005214:	4640      	mov	r0, r8
 8005216:	f7ff fee7 	bl	8004fe8 <_printf_common>
 800521a:	3001      	adds	r0, #1
 800521c:	d14a      	bne.n	80052b4 <_printf_i+0x1f0>
 800521e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005222:	b004      	add	sp, #16
 8005224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	f043 0320 	orr.w	r3, r3, #32
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	4832      	ldr	r0, [pc, #200]	@ (80052fc <_printf_i+0x238>)
 8005232:	2778      	movs	r7, #120	@ 0x78
 8005234:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	6831      	ldr	r1, [r6, #0]
 800523c:	061f      	lsls	r7, r3, #24
 800523e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005242:	d402      	bmi.n	800524a <_printf_i+0x186>
 8005244:	065f      	lsls	r7, r3, #25
 8005246:	bf48      	it	mi
 8005248:	b2ad      	uxthmi	r5, r5
 800524a:	6031      	str	r1, [r6, #0]
 800524c:	07d9      	lsls	r1, r3, #31
 800524e:	bf44      	itt	mi
 8005250:	f043 0320 	orrmi.w	r3, r3, #32
 8005254:	6023      	strmi	r3, [r4, #0]
 8005256:	b11d      	cbz	r5, 8005260 <_printf_i+0x19c>
 8005258:	2310      	movs	r3, #16
 800525a:	e7ad      	b.n	80051b8 <_printf_i+0xf4>
 800525c:	4826      	ldr	r0, [pc, #152]	@ (80052f8 <_printf_i+0x234>)
 800525e:	e7e9      	b.n	8005234 <_printf_i+0x170>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	f023 0320 	bic.w	r3, r3, #32
 8005266:	6023      	str	r3, [r4, #0]
 8005268:	e7f6      	b.n	8005258 <_printf_i+0x194>
 800526a:	4616      	mov	r6, r2
 800526c:	e7bd      	b.n	80051ea <_printf_i+0x126>
 800526e:	6833      	ldr	r3, [r6, #0]
 8005270:	6825      	ldr	r5, [r4, #0]
 8005272:	6961      	ldr	r1, [r4, #20]
 8005274:	1d18      	adds	r0, r3, #4
 8005276:	6030      	str	r0, [r6, #0]
 8005278:	062e      	lsls	r6, r5, #24
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	d501      	bpl.n	8005282 <_printf_i+0x1be>
 800527e:	6019      	str	r1, [r3, #0]
 8005280:	e002      	b.n	8005288 <_printf_i+0x1c4>
 8005282:	0668      	lsls	r0, r5, #25
 8005284:	d5fb      	bpl.n	800527e <_printf_i+0x1ba>
 8005286:	8019      	strh	r1, [r3, #0]
 8005288:	2300      	movs	r3, #0
 800528a:	6123      	str	r3, [r4, #16]
 800528c:	4616      	mov	r6, r2
 800528e:	e7bc      	b.n	800520a <_printf_i+0x146>
 8005290:	6833      	ldr	r3, [r6, #0]
 8005292:	1d1a      	adds	r2, r3, #4
 8005294:	6032      	str	r2, [r6, #0]
 8005296:	681e      	ldr	r6, [r3, #0]
 8005298:	6862      	ldr	r2, [r4, #4]
 800529a:	2100      	movs	r1, #0
 800529c:	4630      	mov	r0, r6
 800529e:	f7fa ff9f 	bl	80001e0 <memchr>
 80052a2:	b108      	cbz	r0, 80052a8 <_printf_i+0x1e4>
 80052a4:	1b80      	subs	r0, r0, r6
 80052a6:	6060      	str	r0, [r4, #4]
 80052a8:	6863      	ldr	r3, [r4, #4]
 80052aa:	6123      	str	r3, [r4, #16]
 80052ac:	2300      	movs	r3, #0
 80052ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b2:	e7aa      	b.n	800520a <_printf_i+0x146>
 80052b4:	6923      	ldr	r3, [r4, #16]
 80052b6:	4632      	mov	r2, r6
 80052b8:	4649      	mov	r1, r9
 80052ba:	4640      	mov	r0, r8
 80052bc:	47d0      	blx	sl
 80052be:	3001      	adds	r0, #1
 80052c0:	d0ad      	beq.n	800521e <_printf_i+0x15a>
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	079b      	lsls	r3, r3, #30
 80052c6:	d413      	bmi.n	80052f0 <_printf_i+0x22c>
 80052c8:	68e0      	ldr	r0, [r4, #12]
 80052ca:	9b03      	ldr	r3, [sp, #12]
 80052cc:	4298      	cmp	r0, r3
 80052ce:	bfb8      	it	lt
 80052d0:	4618      	movlt	r0, r3
 80052d2:	e7a6      	b.n	8005222 <_printf_i+0x15e>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4632      	mov	r2, r6
 80052d8:	4649      	mov	r1, r9
 80052da:	4640      	mov	r0, r8
 80052dc:	47d0      	blx	sl
 80052de:	3001      	adds	r0, #1
 80052e0:	d09d      	beq.n	800521e <_printf_i+0x15a>
 80052e2:	3501      	adds	r5, #1
 80052e4:	68e3      	ldr	r3, [r4, #12]
 80052e6:	9903      	ldr	r1, [sp, #12]
 80052e8:	1a5b      	subs	r3, r3, r1
 80052ea:	42ab      	cmp	r3, r5
 80052ec:	dcf2      	bgt.n	80052d4 <_printf_i+0x210>
 80052ee:	e7eb      	b.n	80052c8 <_printf_i+0x204>
 80052f0:	2500      	movs	r5, #0
 80052f2:	f104 0619 	add.w	r6, r4, #25
 80052f6:	e7f5      	b.n	80052e4 <_printf_i+0x220>
 80052f8:	08005489 	.word	0x08005489
 80052fc:	0800549a 	.word	0x0800549a

08005300 <memmove>:
 8005300:	4288      	cmp	r0, r1
 8005302:	b510      	push	{r4, lr}
 8005304:	eb01 0402 	add.w	r4, r1, r2
 8005308:	d902      	bls.n	8005310 <memmove+0x10>
 800530a:	4284      	cmp	r4, r0
 800530c:	4623      	mov	r3, r4
 800530e:	d807      	bhi.n	8005320 <memmove+0x20>
 8005310:	1e43      	subs	r3, r0, #1
 8005312:	42a1      	cmp	r1, r4
 8005314:	d008      	beq.n	8005328 <memmove+0x28>
 8005316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800531a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800531e:	e7f8      	b.n	8005312 <memmove+0x12>
 8005320:	4402      	add	r2, r0
 8005322:	4601      	mov	r1, r0
 8005324:	428a      	cmp	r2, r1
 8005326:	d100      	bne.n	800532a <memmove+0x2a>
 8005328:	bd10      	pop	{r4, pc}
 800532a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800532e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005332:	e7f7      	b.n	8005324 <memmove+0x24>

08005334 <_sbrk_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d06      	ldr	r5, [pc, #24]	@ (8005350 <_sbrk_r+0x1c>)
 8005338:	2300      	movs	r3, #0
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	602b      	str	r3, [r5, #0]
 8005340:	f7fb fdde 	bl	8000f00 <_sbrk>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_sbrk_r+0x1a>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_sbrk_r+0x1a>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	20004324 	.word	0x20004324

08005354 <_realloc_r>:
 8005354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005358:	4607      	mov	r7, r0
 800535a:	4614      	mov	r4, r2
 800535c:	460d      	mov	r5, r1
 800535e:	b921      	cbnz	r1, 800536a <_realloc_r+0x16>
 8005360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005364:	4611      	mov	r1, r2
 8005366:	f7ff bc5b 	b.w	8004c20 <_malloc_r>
 800536a:	b92a      	cbnz	r2, 8005378 <_realloc_r+0x24>
 800536c:	f7ff fbec 	bl	8004b48 <_free_r>
 8005370:	4625      	mov	r5, r4
 8005372:	4628      	mov	r0, r5
 8005374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005378:	f000 f81a 	bl	80053b0 <_malloc_usable_size_r>
 800537c:	4284      	cmp	r4, r0
 800537e:	4606      	mov	r6, r0
 8005380:	d802      	bhi.n	8005388 <_realloc_r+0x34>
 8005382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005386:	d8f4      	bhi.n	8005372 <_realloc_r+0x1e>
 8005388:	4621      	mov	r1, r4
 800538a:	4638      	mov	r0, r7
 800538c:	f7ff fc48 	bl	8004c20 <_malloc_r>
 8005390:	4680      	mov	r8, r0
 8005392:	b908      	cbnz	r0, 8005398 <_realloc_r+0x44>
 8005394:	4645      	mov	r5, r8
 8005396:	e7ec      	b.n	8005372 <_realloc_r+0x1e>
 8005398:	42b4      	cmp	r4, r6
 800539a:	4622      	mov	r2, r4
 800539c:	4629      	mov	r1, r5
 800539e:	bf28      	it	cs
 80053a0:	4632      	movcs	r2, r6
 80053a2:	f7ff fbc3 	bl	8004b2c <memcpy>
 80053a6:	4629      	mov	r1, r5
 80053a8:	4638      	mov	r0, r7
 80053aa:	f7ff fbcd 	bl	8004b48 <_free_r>
 80053ae:	e7f1      	b.n	8005394 <_realloc_r+0x40>

080053b0 <_malloc_usable_size_r>:
 80053b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b4:	1f18      	subs	r0, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	bfbc      	itt	lt
 80053ba:	580b      	ldrlt	r3, [r1, r0]
 80053bc:	18c0      	addlt	r0, r0, r3
 80053be:	4770      	bx	lr

080053c0 <_init>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr

080053cc <_fini>:
 80053cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ce:	bf00      	nop
 80053d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d2:	bc08      	pop	{r3}
 80053d4:	469e      	mov	lr, r3
 80053d6:	4770      	bx	lr
