
rtosproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005ea0  08005ea0  00006ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f60  08005f60  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005f60  08005f60  00006f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f68  08005f68  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f68  08005f68  00006f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f6c  08005f6c  00006f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005f70  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          000042e0  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004340  20004340  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000147a9  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d3f  00000000  00000000  0001b839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  0001e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc3  00000000  00000000  0001f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023efe  00000000  00000000  000204e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b10  00000000  00000000  000443e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e05b5  00000000  00000000  00056ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001374a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004de0  00000000  00000000  001374ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0013c2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e88 	.word	0x08005e88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005e88 	.word	0x08005e88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009d0:	f000 b988 	b.w	8000ce4 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	468e      	mov	lr, r1
 80009f4:	4604      	mov	r4, r0
 80009f6:	4688      	mov	r8, r1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d14a      	bne.n	8000a92 <__udivmoddi4+0xa6>
 80009fc:	428a      	cmp	r2, r1
 80009fe:	4617      	mov	r7, r2
 8000a00:	d962      	bls.n	8000ac8 <__udivmoddi4+0xdc>
 8000a02:	fab2 f682 	clz	r6, r2
 8000a06:	b14e      	cbz	r6, 8000a1c <__udivmoddi4+0x30>
 8000a08:	f1c6 0320 	rsb	r3, r6, #32
 8000a0c:	fa01 f806 	lsl.w	r8, r1, r6
 8000a10:	fa20 f303 	lsr.w	r3, r0, r3
 8000a14:	40b7      	lsls	r7, r6
 8000a16:	ea43 0808 	orr.w	r8, r3, r8
 8000a1a:	40b4      	lsls	r4, r6
 8000a1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a20:	fa1f fc87 	uxth.w	ip, r7
 8000a24:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a28:	0c23      	lsrs	r3, r4, #16
 8000a2a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a32:	fb01 f20c 	mul.w	r2, r1, ip
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d909      	bls.n	8000a4e <__udivmoddi4+0x62>
 8000a3a:	18fb      	adds	r3, r7, r3
 8000a3c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000a40:	f080 80ea 	bcs.w	8000c18 <__udivmoddi4+0x22c>
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f240 80e7 	bls.w	8000c18 <__udivmoddi4+0x22c>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	443b      	add	r3, r7
 8000a4e:	1a9a      	subs	r2, r3, r2
 8000a50:	b2a3      	uxth	r3, r4
 8000a52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a5e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a62:	459c      	cmp	ip, r3
 8000a64:	d909      	bls.n	8000a7a <__udivmoddi4+0x8e>
 8000a66:	18fb      	adds	r3, r7, r3
 8000a68:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000a6c:	f080 80d6 	bcs.w	8000c1c <__udivmoddi4+0x230>
 8000a70:	459c      	cmp	ip, r3
 8000a72:	f240 80d3 	bls.w	8000c1c <__udivmoddi4+0x230>
 8000a76:	443b      	add	r3, r7
 8000a78:	3802      	subs	r0, #2
 8000a7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a7e:	eba3 030c 	sub.w	r3, r3, ip
 8000a82:	2100      	movs	r1, #0
 8000a84:	b11d      	cbz	r5, 8000a8e <__udivmoddi4+0xa2>
 8000a86:	40f3      	lsrs	r3, r6
 8000a88:	2200      	movs	r2, #0
 8000a8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d905      	bls.n	8000aa2 <__udivmoddi4+0xb6>
 8000a96:	b10d      	cbz	r5, 8000a9c <__udivmoddi4+0xb0>
 8000a98:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4608      	mov	r0, r1
 8000aa0:	e7f5      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000aa2:	fab3 f183 	clz	r1, r3
 8000aa6:	2900      	cmp	r1, #0
 8000aa8:	d146      	bne.n	8000b38 <__udivmoddi4+0x14c>
 8000aaa:	4573      	cmp	r3, lr
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xc8>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 8105 	bhi.w	8000cbe <__udivmoddi4+0x2d2>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4690      	mov	r8, r2
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	d0e5      	beq.n	8000a8e <__udivmoddi4+0xa2>
 8000ac2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ac6:	e7e2      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	f000 8090 	beq.w	8000bee <__udivmoddi4+0x202>
 8000ace:	fab2 f682 	clz	r6, r2
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	f040 80a4 	bne.w	8000c20 <__udivmoddi4+0x234>
 8000ad8:	1a8a      	subs	r2, r1, r2
 8000ada:	0c03      	lsrs	r3, r0, #16
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	b280      	uxth	r0, r0
 8000ae2:	b2bc      	uxth	r4, r7
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000aea:	fb0e 221c 	mls	r2, lr, ip, r2
 8000aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000af2:	fb04 f20c 	mul.w	r2, r4, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d907      	bls.n	8000b0a <__udivmoddi4+0x11e>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b00:	d202      	bcs.n	8000b08 <__udivmoddi4+0x11c>
 8000b02:	429a      	cmp	r2, r3
 8000b04:	f200 80e0 	bhi.w	8000cc8 <__udivmoddi4+0x2dc>
 8000b08:	46c4      	mov	ip, r8
 8000b0a:	1a9b      	subs	r3, r3, r2
 8000b0c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b10:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b18:	fb02 f404 	mul.w	r4, r2, r4
 8000b1c:	429c      	cmp	r4, r3
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x144>
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x142>
 8000b28:	429c      	cmp	r4, r3
 8000b2a:	f200 80ca 	bhi.w	8000cc2 <__udivmoddi4+0x2d6>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	1b1b      	subs	r3, r3, r4
 8000b32:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b36:	e7a5      	b.n	8000a84 <__udivmoddi4+0x98>
 8000b38:	f1c1 0620 	rsb	r6, r1, #32
 8000b3c:	408b      	lsls	r3, r1
 8000b3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b42:	431f      	orrs	r7, r3
 8000b44:	fa0e f401 	lsl.w	r4, lr, r1
 8000b48:	fa20 f306 	lsr.w	r3, r0, r6
 8000b4c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b50:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b54:	4323      	orrs	r3, r4
 8000b56:	fa00 f801 	lsl.w	r8, r0, r1
 8000b5a:	fa1f fc87 	uxth.w	ip, r7
 8000b5e:	fbbe f0f9 	udiv	r0, lr, r9
 8000b62:	0c1c      	lsrs	r4, r3, #16
 8000b64:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b6c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b70:	45a6      	cmp	lr, r4
 8000b72:	fa02 f201 	lsl.w	r2, r2, r1
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x1a0>
 8000b78:	193c      	adds	r4, r7, r4
 8000b7a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000b7e:	f080 809c 	bcs.w	8000cba <__udivmoddi4+0x2ce>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f240 8099 	bls.w	8000cba <__udivmoddi4+0x2ce>
 8000b88:	3802      	subs	r0, #2
 8000b8a:	443c      	add	r4, r7
 8000b8c:	eba4 040e 	sub.w	r4, r4, lr
 8000b90:	fa1f fe83 	uxth.w	lr, r3
 8000b94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b98:	fb09 4413 	mls	r4, r9, r3, r4
 8000b9c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ba0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d908      	bls.n	8000bba <__udivmoddi4+0x1ce>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000bae:	f080 8082 	bcs.w	8000cb6 <__udivmoddi4+0x2ca>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	d97f      	bls.n	8000cb6 <__udivmoddi4+0x2ca>
 8000bb6:	3b02      	subs	r3, #2
 8000bb8:	443c      	add	r4, r7
 8000bba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bbe:	eba4 040c 	sub.w	r4, r4, ip
 8000bc2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bc6:	4564      	cmp	r4, ip
 8000bc8:	4673      	mov	r3, lr
 8000bca:	46e1      	mov	r9, ip
 8000bcc:	d362      	bcc.n	8000c94 <__udivmoddi4+0x2a8>
 8000bce:	d05f      	beq.n	8000c90 <__udivmoddi4+0x2a4>
 8000bd0:	b15d      	cbz	r5, 8000bea <__udivmoddi4+0x1fe>
 8000bd2:	ebb8 0203 	subs.w	r2, r8, r3
 8000bd6:	eb64 0409 	sbc.w	r4, r4, r9
 8000bda:	fa04 f606 	lsl.w	r6, r4, r6
 8000bde:	fa22 f301 	lsr.w	r3, r2, r1
 8000be2:	431e      	orrs	r6, r3
 8000be4:	40cc      	lsrs	r4, r1
 8000be6:	e9c5 6400 	strd	r6, r4, [r5]
 8000bea:	2100      	movs	r1, #0
 8000bec:	e74f      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000bee:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bf2:	0c01      	lsrs	r1, r0, #16
 8000bf4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bf8:	b280      	uxth	r0, r0
 8000bfa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4638      	mov	r0, r7
 8000c02:	463c      	mov	r4, r7
 8000c04:	46b8      	mov	r8, r7
 8000c06:	46be      	mov	lr, r7
 8000c08:	2620      	movs	r6, #32
 8000c0a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c0e:	eba2 0208 	sub.w	r2, r2, r8
 8000c12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c16:	e766      	b.n	8000ae6 <__udivmoddi4+0xfa>
 8000c18:	4601      	mov	r1, r0
 8000c1a:	e718      	b.n	8000a4e <__udivmoddi4+0x62>
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	e72c      	b.n	8000a7a <__udivmoddi4+0x8e>
 8000c20:	f1c6 0220 	rsb	r2, r6, #32
 8000c24:	fa2e f302 	lsr.w	r3, lr, r2
 8000c28:	40b7      	lsls	r7, r6
 8000c2a:	40b1      	lsls	r1, r6
 8000c2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c34:	430a      	orrs	r2, r1
 8000c36:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c3a:	b2bc      	uxth	r4, r7
 8000c3c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c40:	0c11      	lsrs	r1, r2, #16
 8000c42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c46:	fb08 f904 	mul.w	r9, r8, r4
 8000c4a:	40b0      	lsls	r0, r6
 8000c4c:	4589      	cmp	r9, r1
 8000c4e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c52:	b280      	uxth	r0, r0
 8000c54:	d93e      	bls.n	8000cd4 <__udivmoddi4+0x2e8>
 8000c56:	1879      	adds	r1, r7, r1
 8000c58:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000c5c:	d201      	bcs.n	8000c62 <__udivmoddi4+0x276>
 8000c5e:	4589      	cmp	r9, r1
 8000c60:	d81f      	bhi.n	8000ca2 <__udivmoddi4+0x2b6>
 8000c62:	eba1 0109 	sub.w	r1, r1, r9
 8000c66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c6a:	fb09 f804 	mul.w	r8, r9, r4
 8000c6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c72:	b292      	uxth	r2, r2
 8000c74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c78:	4542      	cmp	r2, r8
 8000c7a:	d229      	bcs.n	8000cd0 <__udivmoddi4+0x2e4>
 8000c7c:	18ba      	adds	r2, r7, r2
 8000c7e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000c82:	d2c4      	bcs.n	8000c0e <__udivmoddi4+0x222>
 8000c84:	4542      	cmp	r2, r8
 8000c86:	d2c2      	bcs.n	8000c0e <__udivmoddi4+0x222>
 8000c88:	f1a9 0102 	sub.w	r1, r9, #2
 8000c8c:	443a      	add	r2, r7
 8000c8e:	e7be      	b.n	8000c0e <__udivmoddi4+0x222>
 8000c90:	45f0      	cmp	r8, lr
 8000c92:	d29d      	bcs.n	8000bd0 <__udivmoddi4+0x1e4>
 8000c94:	ebbe 0302 	subs.w	r3, lr, r2
 8000c98:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c9c:	3801      	subs	r0, #1
 8000c9e:	46e1      	mov	r9, ip
 8000ca0:	e796      	b.n	8000bd0 <__udivmoddi4+0x1e4>
 8000ca2:	eba7 0909 	sub.w	r9, r7, r9
 8000ca6:	4449      	add	r1, r9
 8000ca8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cac:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb0:	fb09 f804 	mul.w	r8, r9, r4
 8000cb4:	e7db      	b.n	8000c6e <__udivmoddi4+0x282>
 8000cb6:	4673      	mov	r3, lr
 8000cb8:	e77f      	b.n	8000bba <__udivmoddi4+0x1ce>
 8000cba:	4650      	mov	r0, sl
 8000cbc:	e766      	b.n	8000b8c <__udivmoddi4+0x1a0>
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e6fd      	b.n	8000abe <__udivmoddi4+0xd2>
 8000cc2:	443b      	add	r3, r7
 8000cc4:	3a02      	subs	r2, #2
 8000cc6:	e733      	b.n	8000b30 <__udivmoddi4+0x144>
 8000cc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ccc:	443b      	add	r3, r7
 8000cce:	e71c      	b.n	8000b0a <__udivmoddi4+0x11e>
 8000cd0:	4649      	mov	r1, r9
 8000cd2:	e79c      	b.n	8000c0e <__udivmoddi4+0x222>
 8000cd4:	eba1 0109 	sub.w	r1, r1, r9
 8000cd8:	46c4      	mov	ip, r8
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fb09 f804 	mul.w	r8, r9, r4
 8000ce2:	e7c4      	b.n	8000c6e <__udivmoddi4+0x282>

08000ce4 <__aeabi_idiv0>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	4a06      	ldr	r2, [pc, #24]	@ (8000d18 <vApplicationGetIdleTaskMemory+0x30>)
 8000cfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2280      	movs	r2, #128	@ 0x80
 8000d04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	2000007c 	.word	0x2000007c
 8000d18:	2000011c 	.word	0x2000011c
 8000d1c:	00000000 	.word	0x00000000

08000d20 <HAL_TIM_IC_CaptureCallback>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,GPIO_PIN_RESET);
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
	{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
        	if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d30:	f040 808f 	bne.w	8000e52 <HAL_TIM_IC_CaptureCallback+0x132>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7f1b      	ldrb	r3, [r3, #28]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	f040 808a 	bne.w	8000e52 <HAL_TIM_IC_CaptureCallback+0x132>

			{
				if(is_first_captured==0)
 8000d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d11a      	bne.n	8000d7e <HAL_TIM_IC_CaptureCallback+0x5e>
				{
					ic_val1=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000d48:	2104      	movs	r1, #4
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f002 fda0 	bl	8003890 <HAL_TIM_ReadCapturedValue>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4a46      	ldr	r2, [pc, #280]	@ (8000e6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d54:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_FALLING);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6a1a      	ldr	r2, [r3, #32]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000d64:	621a      	str	r2, [r3, #32]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6a1a      	ldr	r2, [r3, #32]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f042 0220 	orr.w	r2, r2, #32
 8000d74:	621a      	str	r2, [r3, #32]
					is_first_captured=1;
 8000d76:	4b3c      	ldr	r3, [pc, #240]	@ (8000e68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
					is_first_captured=0;
					__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);
					HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
				}
			}
	}
 8000d7c:	e069      	b.n	8000e52 <HAL_TIM_IC_CaptureCallback+0x132>
				else if(is_first_captured==1)
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d164      	bne.n	8000e52 <HAL_TIM_IC_CaptureCallback+0x132>
					ic_val2=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000d88:	2104      	movs	r1, #4
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f002 fd80 	bl	8003890 <HAL_TIM_ReadCapturedValue>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4a37      	ldr	r2, [pc, #220]	@ (8000e70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000d94:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COUNTER(htim,0);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
					if(ic_val2>ic_val1)
 8000d9e:	4b34      	ldr	r3, [pc, #208]	@ (8000e70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b32      	ldr	r3, [pc, #200]	@ (8000e6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d907      	bls.n	8000dba <HAL_TIM_IC_CaptureCallback+0x9a>
						difference=ic_val2-ic_val1;
 8000daa:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b2f      	ldr	r3, [pc, #188]	@ (8000e6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	4a2f      	ldr	r2, [pc, #188]	@ (8000e74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	e009      	b.n	8000dce <HAL_TIM_IC_CaptureCallback+0xae>
						difference=(0xFFFF- ic_val1) + ic_val2;		//for buffer overflow mechanism
 8000dba:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000e6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000dc8:	33ff      	adds	r3, #255	@ 0xff
 8000dca:	4a2a      	ldr	r2, [pc, #168]	@ (8000e74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000dcc:	6013      	str	r3, [r2, #0]
					distance = (float)difference *0.034/2; //for conversion of cm
 8000dce:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	ee07 3a90 	vmov	s15, r3
 8000dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dda:	ee17 0a90 	vmov	r0, s15
 8000dde:	f7ff fb63 	bl	80004a8 <__aeabi_f2d>
 8000de2:	a31f      	add	r3, pc, #124	@ (adr r3, 8000e60 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de8:	f7ff fbb6 	bl	8000558 <__aeabi_dmul>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dfc:	f7ff fcd6 	bl	80007ac <__aeabi_ddiv>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	f7ff fdb8 	bl	800097c <__aeabi_d2uiz>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000e12:	701a      	strb	r2, [r3, #0]
					distance*=10;
 8000e14:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	0092      	lsls	r2, r2, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000e26:	701a      	strb	r2, [r3, #0]
					is_first_captured=0;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6a1a      	ldr	r2, [r3, #32]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000e3c:	621a      	str	r2, [r3, #32]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6a12      	ldr	r2, [r2, #32]
 8000e48:	621a      	str	r2, [r3, #32]
					HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f002 fa6a 	bl	8003326 <HAL_TIM_IC_Stop>
	}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	f3af 8000 	nop.w
 8000e60:	b020c49c 	.word	0xb020c49c
 8000e64:	3fa16872 	.word	0x3fa16872
 8000e68:	20000454 	.word	0x20000454
 8000e6c:	2000044c 	.word	0x2000044c
 8000e70:	20000450 	.word	0x20000450
 8000e74:	20000458 	.word	0x20000458
 8000e78:	2000045c 	.word	0x2000045c

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b5b0      	push	{r4, r5, r7, lr}
 8000e7e:	b09c      	sub	sp, #112	@ 0x70
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f000 fd7b 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 f869 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f000 fa0f 	bl	80012ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e8e:	f000 f8cf 	bl	8001030 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e92:	f000 f9e1 	bl	8001258 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e96:	f000 f96f 	bl	8001178 <MX_TIM2_Init>
  MX_ADC2_Init();
 8000e9a:	f000 f91b 	bl	80010d4 <MX_ADC2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of gas */
  osThreadDef(gas, rotsgas, osPriorityHigh, 0, 128);
 8000e9e:	4b27      	ldr	r3, [pc, #156]	@ (8000f3c <main+0xc0>)
 8000ea0:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gasHandle = osThreadCreate(osThread(gas), NULL);
 8000eb2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fc96 	bl	80047ea <osThreadCreate>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8000f40 <main+0xc4>)
 8000ec2:	6013      	str	r3, [r2, #0]

  /* definition and creation of ultra */
  osThreadDef(ultra, rtosultra, osPriorityBelowNormal, 0, 128);
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f44 <main+0xc8>)
 8000ec6:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000eca:	461d      	mov	r5, r3
 8000ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ed4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ultraHandle = osThreadCreate(osThread(ultra), NULL);
 8000ed8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 fc83 	bl	80047ea <osThreadCreate>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a18      	ldr	r2, [pc, #96]	@ (8000f48 <main+0xcc>)
 8000ee8:	6013      	str	r3, [r2, #0]

  /* definition and creation of RTOSIRRIGATION */
  osThreadDef(RTOSIRRIGATION, IRRIGATION, osPriorityNormal, 0, 128);
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <main+0xd0>)
 8000eec:	f107 041c 	add.w	r4, r7, #28
 8000ef0:	461d      	mov	r5, r3
 8000ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000efa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RTOSIRRIGATIONHandle = osThreadCreate(osThread(RTOSIRRIGATION), NULL);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fc70 	bl	80047ea <osThreadCreate>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a10      	ldr	r2, [pc, #64]	@ (8000f50 <main+0xd4>)
 8000f0e:	6013      	str	r3, [r2, #0]

  /* definition and creation of IRSENSOR */
  osThreadDef(IRSENSOR, RTOSIRSENSOR, osPriorityAboveNormal, 0, 128);
 8000f10:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <main+0xd8>)
 8000f12:	463c      	mov	r4, r7
 8000f14:	461d      	mov	r5, r3
 8000f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IRSENSORHandle = osThreadCreate(osThread(IRSENSOR), NULL);
 8000f22:	463b      	mov	r3, r7
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fc5f 	bl	80047ea <osThreadCreate>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <main+0xdc>)
 8000f30:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f32:	f003 fc53 	bl	80047dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f36:	bf00      	nop
 8000f38:	e7fd      	b.n	8000f36 <main+0xba>
 8000f3a:	bf00      	nop
 8000f3c:	08005ea4 	.word	0x08005ea4
 8000f40:	2000043c 	.word	0x2000043c
 8000f44:	08005ec8 	.word	0x08005ec8
 8000f48:	20000440 	.word	0x20000440
 8000f4c:	08005ef4 	.word	0x08005ef4
 8000f50:	20000444 	.word	0x20000444
 8000f54:	08005f1c 	.word	0x08005f1c
 8000f58:	20000448 	.word	0x20000448

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	@ 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	@ 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f004 feaa 	bl	8005cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <SystemClock_Config+0xcc>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	4a27      	ldr	r2, [pc, #156]	@ (8001028 <SystemClock_Config+0xcc>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f90:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <SystemClock_Config+0xcc>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4b22      	ldr	r3, [pc, #136]	@ (800102c <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a21      	ldr	r2, [pc, #132]	@ (800102c <SystemClock_Config+0xd0>)
 8000fa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <SystemClock_Config+0xd0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000fd0:	2332      	movs	r3, #50	@ 0x32
 8000fd2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fbbd 	bl	8002760 <HAL_RCC_OscConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fec:	f000 fa9c 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001000:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001006:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2101      	movs	r1, #1
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fe1e 	bl	8002c50 <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800101a:	f000 fa85 	bl	8001528 <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3750      	adds	r7, #80	@ 0x50
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001042:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <MX_ADC1_Init+0x98>)
 8001044:	4a21      	ldr	r2, [pc, #132]	@ (80010cc <MX_ADC1_Init+0x9c>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001048:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <MX_ADC1_Init+0x98>)
 800104a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800104e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001050:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800105c:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001062:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <MX_ADC1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <MX_ADC1_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001070:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <MX_ADC1_Init+0x98>)
 8001072:	4a17      	ldr	r2, [pc, #92]	@ (80010d0 <MX_ADC1_Init+0xa0>)
 8001074:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <MX_ADC1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_ADC1_Init+0x98>)
 800107e:	2201      	movs	r2, #1
 8001080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108a:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_ADC1_Init+0x98>)
 800108c:	2201      	movs	r2, #1
 800108e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001090:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <MX_ADC1_Init+0x98>)
 8001092:	f000 fcb5 	bl	8001a00 <HAL_ADC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800109c:	f000 fa44 	bl	8001528 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_ADC1_Init+0x98>)
 80010b2:	f000 fe87 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010bc:	f000 fa34 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000031c 	.word	0x2000031c
 80010cc:	40012000 	.word	0x40012000
 80010d0:	0f000001 	.word	0x0f000001

080010d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80010e6:	4b21      	ldr	r3, [pc, #132]	@ (800116c <MX_ADC2_Init+0x98>)
 80010e8:	4a21      	ldr	r2, [pc, #132]	@ (8001170 <MX_ADC2_Init+0x9c>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <MX_ADC2_Init+0x98>)
 80010ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <MX_ADC2_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <MX_ADC2_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001100:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <MX_ADC2_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001106:	4b19      	ldr	r3, [pc, #100]	@ (800116c <MX_ADC2_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110e:	4b17      	ldr	r3, [pc, #92]	@ (800116c <MX_ADC2_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001114:	4b15      	ldr	r3, [pc, #84]	@ (800116c <MX_ADC2_Init+0x98>)
 8001116:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <MX_ADC2_Init+0xa0>)
 8001118:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_ADC2_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <MX_ADC2_Init+0x98>)
 8001122:	2201      	movs	r2, #1
 8001124:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_ADC2_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112e:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_ADC2_Init+0x98>)
 8001130:	2201      	movs	r2, #1
 8001132:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001134:	480d      	ldr	r0, [pc, #52]	@ (800116c <MX_ADC2_Init+0x98>)
 8001136:	f000 fc63 	bl	8001a00 <HAL_ADC_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001140:	f000 f9f2 	bl	8001528 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001144:	2306      	movs	r3, #6
 8001146:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_ADC2_Init+0x98>)
 8001156:	f000 fe35 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001160:	f000 f9e2 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000364 	.word	0x20000364
 8001170:	40012100 	.word	0x40012100
 8001174:	0f000001 	.word	0x0f000001

08001178 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001254 <MX_TIM2_Init+0xdc>)
 80011a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80011aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001254 <MX_TIM2_Init+0xdc>)
 80011ac:	2253      	movs	r2, #83	@ 0x53
 80011ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b28      	ldr	r3, [pc, #160]	@ (8001254 <MX_TIM2_Init+0xdc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011b6:	4b27      	ldr	r3, [pc, #156]	@ (8001254 <MX_TIM2_Init+0xdc>)
 80011b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	4b25      	ldr	r3, [pc, #148]	@ (8001254 <MX_TIM2_Init+0xdc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <MX_TIM2_Init+0xdc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ca:	4822      	ldr	r0, [pc, #136]	@ (8001254 <MX_TIM2_Init+0xdc>)
 80011cc:	f001 ff92 	bl	80030f4 <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80011d6:	f000 f9a7 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4619      	mov	r1, r3
 80011e6:	481b      	ldr	r0, [pc, #108]	@ (8001254 <MX_TIM2_Init+0xdc>)
 80011e8:	f002 fa8a 	bl	8003700 <HAL_TIM_ConfigClockSource>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011f2:	f000 f999 	bl	8001528 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011f6:	4817      	ldr	r0, [pc, #92]	@ (8001254 <MX_TIM2_Init+0xdc>)
 80011f8:	f002 f83c 	bl	8003274 <HAL_TIM_IC_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001202:	f000 f991 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	480f      	ldr	r0, [pc, #60]	@ (8001254 <MX_TIM2_Init+0xdc>)
 8001216:	f002 fe2d 	bl	8003e74 <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001220:	f000 f982 	bl	8001528 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001224:	2300      	movs	r3, #0
 8001226:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001228:	2301      	movs	r3, #1
 800122a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	2204      	movs	r2, #4
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	@ (8001254 <MX_TIM2_Init+0xdc>)
 800123c:	f002 f9c4 	bl	80035c8 <HAL_TIM_IC_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001246:	f000 f96f 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	@ 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200003ac 	.word	0x200003ac

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <MX_USART2_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001290:	f002 fe80 	bl	8003f94 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f000 f945 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200003f4 	.word	0x200003f4
 80012a8:	40004400 	.word	0x40004400

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <MX_GPIO_Init+0xdc>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001388 <MX_GPIO_Init+0xdc>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <MX_GPIO_Init+0xdc>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <MX_GPIO_Init+0xdc>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a28      	ldr	r2, [pc, #160]	@ (8001388 <MX_GPIO_Init+0xdc>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <MX_GPIO_Init+0xdc>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <MX_GPIO_Init+0xdc>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <MX_GPIO_Init+0xdc>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <MX_GPIO_Init+0xdc>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800131c:	481b      	ldr	r0, [pc, #108]	@ (800138c <MX_GPIO_Init+0xe0>)
 800131e:	f001 fa05 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2140      	movs	r1, #64	@ 0x40
 8001326:	481a      	ldr	r0, [pc, #104]	@ (8001390 <MX_GPIO_Init+0xe4>)
 8001328:	f001 fa00 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800132c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4619      	mov	r1, r3
 8001340:	4812      	ldr	r0, [pc, #72]	@ (800138c <MX_GPIO_Init+0xe0>)
 8001342:	f001 f83f 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001346:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800134a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	4619      	mov	r1, r3
 800135e:	480b      	ldr	r0, [pc, #44]	@ (800138c <MX_GPIO_Init+0xe0>)
 8001360:	f001 f830 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001364:	2340      	movs	r3, #64	@ 0x40
 8001366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	4805      	ldr	r0, [pc, #20]	@ (8001390 <MX_GPIO_Init+0xe4>)
 800137c:	f001 f822 	bl	80023c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40020800 	.word	0x40020800

08001394 <rotsgas>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_rotsgas */
void rotsgas(void const * argument)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
	 for(;;)
	    {
	        HAL_ADC_Start(&hadc1);
 800139c:	4813      	ldr	r0, [pc, #76]	@ (80013ec <rotsgas+0x58>)
 800139e:	f000 fb73 	bl	8001a88 <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80013a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013a6:	4811      	ldr	r0, [pc, #68]	@ (80013ec <rotsgas+0x58>)
 80013a8:	f000 fc73 	bl	8001c92 <HAL_ADC_PollForConversion>
	        uint16_t value = HAL_ADC_GetValue(&hadc1);
 80013ac:	480f      	ldr	r0, [pc, #60]	@ (80013ec <rotsgas+0x58>)
 80013ae:	f000 fcfb 	bl	8001da8 <HAL_ADC_GetValue>
 80013b2:	4603      	mov	r3, r0
 80013b4:	81fb      	strh	r3, [r7, #14]
	        HAL_ADC_Stop(&hadc1);
 80013b6:	480d      	ldr	r0, [pc, #52]	@ (80013ec <rotsgas+0x58>)
 80013b8:	f000 fc38 	bl	8001c2c <HAL_ADC_Stop>

		    if(value > 1250)
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d906      	bls.n	80013d4 <rotsgas+0x40>
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // LED ON
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013cc:	4808      	ldr	r0, [pc, #32]	@ (80013f0 <rotsgas+0x5c>)
 80013ce:	f001 f9ad 	bl	800272c <HAL_GPIO_WritePin>
 80013d2:	e005      	b.n	80013e0 <rotsgas+0x4c>
	        else
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // LED OFF
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013da:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <rotsgas+0x5c>)
 80013dc:	f001 f9a6 	bl	800272c <HAL_GPIO_WritePin>


	        osDelay(500);
 80013e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013e4:	f003 fa4d 	bl	8004882 <osDelay>
	    {
 80013e8:	e7d8      	b.n	800139c <rotsgas+0x8>
 80013ea:	bf00      	nop
 80013ec:	2000031c 	.word	0x2000031c
 80013f0:	40020c00 	.word	0x40020c00

080013f4 <rtosultra>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rtosultra */
void rtosultra(void const * argument)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rtosultra */
	//char str[50];
  /* Infinite loop */
	 for(;;)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <rtosultra+0x8>

08001400 <IRRIGATION>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IRRIGATION */
void IRRIGATION(void const * argument)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IRRIGATION */

  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(& hadc2);
 8001408:	4812      	ldr	r0, [pc, #72]	@ (8001454 <IRRIGATION+0x54>)
 800140a:	f000 fb3d 	bl	8001a88 <HAL_ADC_Start>
	  		HAL_ADC_PollForConversion(& hadc2, HAL_MAX_DELAY);
 800140e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001412:	4810      	ldr	r0, [pc, #64]	@ (8001454 <IRRIGATION+0x54>)
 8001414:	f000 fc3d 	bl	8001c92 <HAL_ADC_PollForConversion>
	  		uint16_t value = HAL_ADC_GetValue(& hadc2);
 8001418:	480e      	ldr	r0, [pc, #56]	@ (8001454 <IRRIGATION+0x54>)
 800141a:	f000 fcc5 	bl	8001da8 <HAL_ADC_GetValue>
 800141e:	4603      	mov	r3, r0
 8001420:	81fb      	strh	r3, [r7, #14]
	  		HAL_ADC_Stop(& hadc2);
 8001422:	480c      	ldr	r0, [pc, #48]	@ (8001454 <IRRIGATION+0x54>)
 8001424:	f000 fc02 	bl	8001c2c <HAL_ADC_Stop>
	  	  if(value < 10)
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	2b09      	cmp	r3, #9
 800142c:	d806      	bhi.n	800143c <IRRIGATION+0x3c>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // LED ON
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001434:	4808      	ldr	r0, [pc, #32]	@ (8001458 <IRRIGATION+0x58>)
 8001436:	f001 f979 	bl	800272c <HAL_GPIO_WritePin>
 800143a:	e005      	b.n	8001448 <IRRIGATION+0x48>
	  		 else
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // LED OFF
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001442:	4805      	ldr	r0, [pc, #20]	@ (8001458 <IRRIGATION+0x58>)
 8001444:	f001 f972 	bl	800272c <HAL_GPIO_WritePin>


    osDelay(500);
 8001448:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800144c:	f003 fa19 	bl	8004882 <osDelay>
  {
 8001450:	e7da      	b.n	8001408 <IRRIGATION+0x8>
 8001452:	bf00      	nop
 8001454:	20000364 	.word	0x20000364
 8001458:	40020c00 	.word	0x40020c00

0800145c <RTOSIRSENSOR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOSIRSENSOR */
void RTOSIRSENSOR(void const * argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOSIRSENSOR */
	uint8_t signal_on[] = "1\n";
 8001464:	4a23      	ldr	r2, [pc, #140]	@ (80014f4 <RTOSIRSENSOR+0x98>)
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	4611      	mov	r1, r2
 800146e:	8019      	strh	r1, [r3, #0]
 8001470:	3302      	adds	r3, #2
 8001472:	0c12      	lsrs	r2, r2, #16
 8001474:	701a      	strb	r2, [r3, #0]
	  uint8_t signal_off[] = "0\n";
 8001476:	4a20      	ldr	r2, [pc, #128]	@ (80014f8 <RTOSIRSENSOR+0x9c>)
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	4611      	mov	r1, r2
 8001480:	8019      	strh	r1, [r3, #0]
 8001482:	3302      	adds	r3, #2
 8001484:	0c12      	lsrs	r2, r2, #16
 8001486:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_RESET)   // IR detected
 8001488:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800148c:	481b      	ldr	r0, [pc, #108]	@ (80014fc <RTOSIRSENSOR+0xa0>)
 800148e:	f001 f935 	bl	80026fc <HAL_GPIO_ReadPin>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d114      	bne.n	80014c2 <RTOSIRSENSOR+0x66>
	        {
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);  // LED on STM32
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800149e:	4817      	ldr	r0, [pc, #92]	@ (80014fc <RTOSIRSENSOR+0xa0>)
 80014a0:	f001 f944 	bl	800272c <HAL_GPIO_WritePin>
	            HAL_UART_Transmit(&huart2, signal_on, strlen((char*)signal_on), HAL_MAX_DELAY);
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe fe91 	bl	80001d0 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	f107 010c 	add.w	r1, r7, #12
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ba:	4811      	ldr	r0, [pc, #68]	@ (8001500 <RTOSIRSENSOR+0xa4>)
 80014bc:	f002 fdba 	bl	8004034 <HAL_UART_Transmit>
 80014c0:	e013      	b.n	80014ea <RTOSIRSENSOR+0x8e>
	        }
	        else
	        {
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // LED off
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014c8:	480c      	ldr	r0, [pc, #48]	@ (80014fc <RTOSIRSENSOR+0xa0>)
 80014ca:	f001 f92f 	bl	800272c <HAL_GPIO_WritePin>
	            HAL_UART_Transmit(&huart2, signal_off, strlen((char*)signal_off), HAL_MAX_DELAY);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe fe7c 	bl	80001d0 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f107 0108 	add.w	r1, r7, #8
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014e4:	4806      	ldr	r0, [pc, #24]	@ (8001500 <RTOSIRSENSOR+0xa4>)
 80014e6:	f002 fda5 	bl	8004034 <HAL_UART_Transmit>
	        }

    osDelay(500);
 80014ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014ee:	f003 f9c8 	bl	8004882 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_RESET)   // IR detected
 80014f2:	e7c9      	b.n	8001488 <RTOSIRSENSOR+0x2c>
 80014f4:	08005f38 	.word	0x08005f38
 80014f8:	08005f3c 	.word	0x08005f3c
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	200003f4 	.word	0x200003f4

08001504 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001516:	f000 fa53 	bl	80019c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40010000 	.word	0x40010000

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <Error_Handler+0x8>

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <HAL_MspInit+0x54>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001542:	4a11      	ldr	r2, [pc, #68]	@ (8001588 <HAL_MspInit+0x54>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001548:	6453      	str	r3, [r2, #68]	@ 0x44
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <HAL_MspInit+0x54>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <HAL_MspInit+0x54>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <HAL_MspInit+0x54>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	@ 0x40
 8001566:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <HAL_MspInit+0x54>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	210f      	movs	r1, #15
 8001576:	f06f 0001 	mvn.w	r0, #1
 800157a:	f000 fef9 	bl	8002370 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001664 <HAL_ADC_MspInit+0xd8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d128      	bne.n	8001600 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <HAL_ADC_MspInit+0xdc>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001668 <HAL_ADC_MspInit+0xdc>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <HAL_ADC_MspInit+0xdc>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	4b26      	ldr	r3, [pc, #152]	@ (8001668 <HAL_ADC_MspInit+0xdc>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a25      	ldr	r2, [pc, #148]	@ (8001668 <HAL_ADC_MspInit+0xdc>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <HAL_ADC_MspInit+0xdc>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ea:	2303      	movs	r3, #3
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	481c      	ldr	r0, [pc, #112]	@ (800166c <HAL_ADC_MspInit+0xe0>)
 80015fa:	f000 fee3 	bl	80023c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80015fe:	e02c      	b.n	800165a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1a      	ldr	r2, [pc, #104]	@ (8001670 <HAL_ADC_MspInit+0xe4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d127      	bne.n	800165a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <HAL_ADC_MspInit+0xdc>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001612:	4a15      	ldr	r2, [pc, #84]	@ (8001668 <HAL_ADC_MspInit+0xdc>)
 8001614:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001618:	6453      	str	r3, [r2, #68]	@ 0x44
 800161a:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <HAL_ADC_MspInit+0xdc>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <HAL_ADC_MspInit+0xdc>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a0e      	ldr	r2, [pc, #56]	@ (8001668 <HAL_ADC_MspInit+0xdc>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <HAL_ADC_MspInit+0xdc>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001642:	2340      	movs	r3, #64	@ 0x40
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001646:	2303      	movs	r3, #3
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	@ (800166c <HAL_ADC_MspInit+0xe0>)
 8001656:	f000 feb5 	bl	80023c4 <HAL_GPIO_Init>
}
 800165a:	bf00      	nop
 800165c:	3730      	adds	r7, #48	@ 0x30
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40012000 	.word	0x40012000
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000
 8001670:	40012100 	.word	0x40012100

08001674 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001694:	d12b      	bne.n	80016ee <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <HAL_TIM_Base_MspInit+0x84>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	4a16      	ldr	r2, [pc, #88]	@ (80016f8 <HAL_TIM_Base_MspInit+0x84>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <HAL_TIM_Base_MspInit+0x84>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <HAL_TIM_Base_MspInit+0x84>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a0f      	ldr	r2, [pc, #60]	@ (80016f8 <HAL_TIM_Base_MspInit+0x84>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <HAL_TIM_Base_MspInit+0x84>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016ce:	2302      	movs	r3, #2
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016de:	2301      	movs	r3, #1
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4804      	ldr	r0, [pc, #16]	@ (80016fc <HAL_TIM_Base_MspInit+0x88>)
 80016ea:	f000 fe6b 	bl	80023c4 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	@ 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000

08001700 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	@ 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a28      	ldr	r2, [pc, #160]	@ (80017c0 <HAL_UART_MspInit+0xc0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d149      	bne.n	80017b6 <HAL_UART_MspInit+0xb6>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <HAL_UART_MspInit+0xc4>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	4a26      	ldr	r2, [pc, #152]	@ (80017c4 <HAL_UART_MspInit+0xc4>)
 800172c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001730:	6413      	str	r3, [r2, #64]	@ 0x40
 8001732:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <HAL_UART_MspInit+0xc4>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <HAL_UART_MspInit+0xc4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a1f      	ldr	r2, [pc, #124]	@ (80017c4 <HAL_UART_MspInit+0xc4>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <HAL_UART_MspInit+0xc4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <HAL_UART_MspInit+0xc4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a18      	ldr	r2, [pc, #96]	@ (80017c4 <HAL_UART_MspInit+0xc4>)
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <HAL_UART_MspInit+0xc4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001776:	2308      	movs	r3, #8
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001786:	2307      	movs	r3, #7
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	480d      	ldr	r0, [pc, #52]	@ (80017c8 <HAL_UART_MspInit+0xc8>)
 8001792:	f000 fe17 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001796:	2320      	movs	r3, #32
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017a6:	2307      	movs	r3, #7
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4806      	ldr	r0, [pc, #24]	@ (80017cc <HAL_UART_MspInit+0xcc>)
 80017b2:	f000 fe07 	bl	80023c4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	@ 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40004400 	.word	0x40004400
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40020c00 	.word	0x40020c00

080017d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	@ 0x30
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	4b2f      	ldr	r3, [pc, #188]	@ (80018a4 <HAL_InitTick+0xd4>)
 80017e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e8:	4a2e      	ldr	r2, [pc, #184]	@ (80018a4 <HAL_InitTick+0xd4>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f0:	4b2c      	ldr	r3, [pc, #176]	@ (80018a4 <HAL_InitTick+0xd4>)
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017fc:	f107 020c 	add.w	r2, r7, #12
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fc42 	bl	8003090 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800180c:	f001 fc2c 	bl	8003068 <HAL_RCC_GetPCLK2Freq>
 8001810:	4603      	mov	r3, r0
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001818:	4a23      	ldr	r2, [pc, #140]	@ (80018a8 <HAL_InitTick+0xd8>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0c9b      	lsrs	r3, r3, #18
 8001820:	3b01      	subs	r3, #1
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001824:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <HAL_InitTick+0xdc>)
 8001826:	4a22      	ldr	r2, [pc, #136]	@ (80018b0 <HAL_InitTick+0xe0>)
 8001828:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800182a:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <HAL_InitTick+0xdc>)
 800182c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001830:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001832:	4a1e      	ldr	r2, [pc, #120]	@ (80018ac <HAL_InitTick+0xdc>)
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001838:	4b1c      	ldr	r3, [pc, #112]	@ (80018ac <HAL_InitTick+0xdc>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_InitTick+0xdc>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HAL_InitTick+0xdc>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800184a:	4818      	ldr	r0, [pc, #96]	@ (80018ac <HAL_InitTick+0xdc>)
 800184c:	f001 fc52 	bl	80030f4 <HAL_TIM_Base_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001856:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800185a:	2b00      	cmp	r3, #0
 800185c:	d11b      	bne.n	8001896 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800185e:	4813      	ldr	r0, [pc, #76]	@ (80018ac <HAL_InitTick+0xdc>)
 8001860:	f001 fc98 	bl	8003194 <HAL_TIM_Base_Start_IT>
 8001864:	4603      	mov	r3, r0
 8001866:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800186a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800186e:	2b00      	cmp	r3, #0
 8001870:	d111      	bne.n	8001896 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001872:	2019      	movs	r0, #25
 8001874:	f000 fd98 	bl	80023a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b0f      	cmp	r3, #15
 800187c:	d808      	bhi.n	8001890 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800187e:	2200      	movs	r2, #0
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	2019      	movs	r0, #25
 8001884:	f000 fd74 	bl	8002370 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001888:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <HAL_InitTick+0xe4>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e002      	b.n	8001896 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001896:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800189a:	4618      	mov	r0, r3
 800189c:	3730      	adds	r7, #48	@ 0x30
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	431bde83 	.word	0x431bde83
 80018ac:	20000460 	.word	0x20000460
 80018b0:	40010000 	.word	0x40010000
 80018b4:	20000004 	.word	0x20000004

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <NMI_Handler+0x4>

080018c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <HardFault_Handler+0x4>

080018c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <MemManage_Handler+0x4>

080018d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <UsageFault_Handler+0x4>

080018e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018f6:	f001 fd77 	bl	80033e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000460 	.word	0x20000460

08001904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <SystemInit+0x20>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190e:	4a05      	ldr	r2, [pc, #20]	@ (8001924 <SystemInit+0x20>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001960 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800192c:	f7ff ffea 	bl	8001904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001930:	480c      	ldr	r0, [pc, #48]	@ (8001964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001932:	490d      	ldr	r1, [pc, #52]	@ (8001968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001934:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001938:	e002      	b.n	8001940 <LoopCopyDataInit>

0800193a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800193c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193e:	3304      	adds	r3, #4

08001940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001944:	d3f9      	bcc.n	800193a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001946:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001948:	4c0a      	ldr	r4, [pc, #40]	@ (8001974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800194c:	e001      	b.n	8001952 <LoopFillZerobss>

0800194e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001950:	3204      	adds	r2, #4

08001952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001954:	d3fb      	bcc.n	800194e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001956:	f004 fa1b 	bl	8005d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7ff fa8f 	bl	8000e7c <main>
  bx  lr    
 800195e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800196c:	08005f70 	.word	0x08005f70
  ldr r2, =_sbss
 8001970:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001974:	20004340 	.word	0x20004340

08001978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC_IRQHandler>
	...

0800197c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001980:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0d      	ldr	r2, [pc, #52]	@ (80019bc <HAL_Init+0x40>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800198a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800198c:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <HAL_Init+0x40>)
 8001992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <HAL_Init+0x40>)
 800199e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 fcd8 	bl	800235a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	200f      	movs	r0, #15
 80019ac:	f7ff ff10 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fdc0 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023c00 	.word	0x40023c00

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000008 	.word	0x20000008
 80019e4:	200004a8 	.word	0x200004a8

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200004a8 	.word	0x200004a8

08001a00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e033      	b.n	8001a7e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fdb4 	bl	800158c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d118      	bne.n	8001a70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a46:	f023 0302 	bic.w	r3, r3, #2
 8001a4a:	f043 0202 	orr.w	r2, r3, #2
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fad8 	bl	8002008 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f023 0303 	bic.w	r3, r3, #3
 8001a66:	f043 0201 	orr.w	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a6e:	e001      	b.n	8001a74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_Start+0x1a>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e0b2      	b.n	8001c08 <HAL_ADC_Start+0x180>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d018      	beq.n	8001aea <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac8:	4b52      	ldr	r3, [pc, #328]	@ (8001c14 <HAL_ADC_Start+0x18c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a52      	ldr	r2, [pc, #328]	@ (8001c18 <HAL_ADC_Start+0x190>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	0c9a      	lsrs	r2, r3, #18
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001adc:	e002      	b.n	8001ae4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f9      	bne.n	8001ade <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d17a      	bne.n	8001bee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3c:	f023 0206 	bic.w	r2, r3, #6
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b44:	e002      	b.n	8001b4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b54:	4b31      	ldr	r3, [pc, #196]	@ (8001c1c <HAL_ADC_Start+0x194>)
 8001b56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b60:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d12a      	bne.n	8001bc4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a2b      	ldr	r2, [pc, #172]	@ (8001c20 <HAL_ADC_Start+0x198>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d015      	beq.n	8001ba4 <HAL_ADC_Start+0x11c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <HAL_ADC_Start+0x19c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d105      	bne.n	8001b8e <HAL_ADC_Start+0x106>
 8001b82:	4b26      	ldr	r3, [pc, #152]	@ (8001c1c <HAL_ADC_Start+0x194>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00a      	beq.n	8001ba4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a25      	ldr	r2, [pc, #148]	@ (8001c28 <HAL_ADC_Start+0x1a0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d136      	bne.n	8001c06 <HAL_ADC_Start+0x17e>
 8001b98:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <HAL_ADC_Start+0x194>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d130      	bne.n	8001c06 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d129      	bne.n	8001c06 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	e020      	b.n	8001c06 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a15      	ldr	r2, [pc, #84]	@ (8001c20 <HAL_ADC_Start+0x198>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d11b      	bne.n	8001c06 <HAL_ADC_Start+0x17e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d114      	bne.n	8001c06 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	e00b      	b.n	8001c06 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f043 0210 	orr.w	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	f043 0201 	orr.w	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	20000000 	.word	0x20000000
 8001c18:	431bde83 	.word	0x431bde83
 8001c1c:	40012300 	.word	0x40012300
 8001c20:	40012000 	.word	0x40012000
 8001c24:	40012100 	.word	0x40012100
 8001c28:	40012200 	.word	0x40012200

08001c2c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_Stop+0x16>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e021      	b.n	8001c86 <HAL_ADC_Stop+0x5a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0201 	bic.w	r2, r2, #1
 8001c58:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d109      	bne.n	8001c7c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	f043 0201 	orr.w	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cae:	d113      	bne.n	8001cd8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e063      	b.n	8001da0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cd8:	f7ff fe86 	bl	80019e8 <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cde:	e021      	b.n	8001d24 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ce6:	d01d      	beq.n	8001d24 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_ADC_PollForConversion+0x6c>
 8001cee:	f7ff fe7b 	bl	80019e8 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d212      	bcs.n	8001d24 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d00b      	beq.n	8001d24 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	f043 0204 	orr.w	r2, r3, #4
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e03d      	b.n	8001da0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d1d6      	bne.n	8001ce0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f06f 0212 	mvn.w	r2, #18
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d123      	bne.n	8001d9e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d11f      	bne.n	8001d9e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d64:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d111      	bne.n	8001d9e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d105      	bne.n	8001d9e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1c>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e105      	b.n	8001fec <HAL_ADC_ConfigChannel+0x228>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b09      	cmp	r3, #9
 8001dee:	d925      	bls.n	8001e3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68d9      	ldr	r1, [r3, #12]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	3b1e      	subs	r3, #30
 8001e06:	2207      	movs	r2, #7
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	400a      	ands	r2, r1
 8001e14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68d9      	ldr	r1, [r3, #12]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	4603      	mov	r3, r0
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4403      	add	r3, r0
 8001e2e:	3b1e      	subs	r3, #30
 8001e30:	409a      	lsls	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	e022      	b.n	8001e82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6919      	ldr	r1, [r3, #16]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	2207      	movs	r2, #7
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6919      	ldr	r1, [r3, #16]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	4603      	mov	r3, r0
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4403      	add	r3, r0
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d824      	bhi.n	8001ed4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	3b05      	subs	r3, #5
 8001e9c:	221f      	movs	r2, #31
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b05      	subs	r3, #5
 8001ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ed2:	e04c      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b0c      	cmp	r3, #12
 8001eda:	d824      	bhi.n	8001f26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	3b23      	subs	r3, #35	@ 0x23
 8001eee:	221f      	movs	r2, #31
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	400a      	ands	r2, r1
 8001efc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	3b23      	subs	r3, #35	@ 0x23
 8001f18:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f24:	e023      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	3b41      	subs	r3, #65	@ 0x41
 8001f38:	221f      	movs	r2, #31
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	400a      	ands	r2, r1
 8001f46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	4618      	mov	r0, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	3b41      	subs	r3, #65	@ 0x41
 8001f62:	fa00 f203 	lsl.w	r2, r0, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x234>)
 8001f70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a21      	ldr	r2, [pc, #132]	@ (8001ffc <HAL_ADC_ConfigChannel+0x238>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d109      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x1cc>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b12      	cmp	r3, #18
 8001f82:	d105      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a19      	ldr	r2, [pc, #100]	@ (8001ffc <HAL_ADC_ConfigChannel+0x238>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d123      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x21e>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d003      	beq.n	8001faa <HAL_ADC_ConfigChannel+0x1e6>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b11      	cmp	r3, #17
 8001fa8:	d11b      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	d111      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <HAL_ADC_ConfigChannel+0x23c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a10      	ldr	r2, [pc, #64]	@ (8002004 <HAL_ADC_ConfigChannel+0x240>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	0c9a      	lsrs	r2, r3, #18
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fd4:	e002      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f9      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40012300 	.word	0x40012300
 8001ffc:	40012000 	.word	0x40012000
 8002000:	20000000 	.word	0x20000000
 8002004:	431bde83 	.word	0x431bde83

08002008 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002010:	4b79      	ldr	r3, [pc, #484]	@ (80021f8 <ADC_Init+0x1f0>)
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	431a      	orrs	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800203c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	021a      	lsls	r2, r3, #8
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002060:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002082:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6899      	ldr	r1, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209a:	4a58      	ldr	r2, [pc, #352]	@ (80021fc <ADC_Init+0x1f4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d022      	beq.n	80020e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6899      	ldr	r1, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6899      	ldr	r1, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	e00f      	b.n	8002106 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002104:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0202 	bic.w	r2, r2, #2
 8002114:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6899      	ldr	r1, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7e1b      	ldrb	r3, [r3, #24]
 8002120:	005a      	lsls	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01b      	beq.n	800216c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002142:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002152:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6859      	ldr	r1, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	3b01      	subs	r3, #1
 8002160:	035a      	lsls	r2, r3, #13
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	e007      	b.n	800217c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800217a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800218a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	3b01      	subs	r3, #1
 8002198:	051a      	lsls	r2, r3, #20
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6899      	ldr	r1, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021be:	025a      	lsls	r2, r3, #9
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6899      	ldr	r1, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	029a      	lsls	r2, r3, #10
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	609a      	str	r2, [r3, #8]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40012300 	.word	0x40012300
 80021fc:	0f000001 	.word	0x0f000001

08002200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002210:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002228:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800222c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224c:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <__NVIC_GetPriorityGrouping+0x18>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0307 	and.w	r3, r3, #7
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	db0b      	blt.n	800228e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4907      	ldr	r1, [pc, #28]	@ (800229c <__NVIC_EnableIRQ+0x38>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2001      	movs	r0, #1
 8002286:	fa00 f202 	lsl.w	r2, r0, r2
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100

080022a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db0a      	blt.n	80022ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	490c      	ldr	r1, [pc, #48]	@ (80022ec <__NVIC_SetPriority+0x4c>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	440b      	add	r3, r1
 80022c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c8:	e00a      	b.n	80022e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4908      	ldr	r1, [pc, #32]	@ (80022f0 <__NVIC_SetPriority+0x50>)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3b04      	subs	r3, #4
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	440b      	add	r3, r1
 80022de:	761a      	strb	r2, [r3, #24]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	@ 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f1c3 0307 	rsb	r3, r3, #7
 800230e:	2b04      	cmp	r3, #4
 8002310:	bf28      	it	cs
 8002312:	2304      	movcs	r3, #4
 8002314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3304      	adds	r3, #4
 800231a:	2b06      	cmp	r3, #6
 800231c:	d902      	bls.n	8002324 <NVIC_EncodePriority+0x30>
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3b03      	subs	r3, #3
 8002322:	e000      	b.n	8002326 <NVIC_EncodePriority+0x32>
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	401a      	ands	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800233c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43d9      	mvns	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	4313      	orrs	r3, r2
         );
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	@ 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ff4c 	bl	8002200 <__NVIC_SetPriorityGrouping>
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002382:	f7ff ff61 	bl	8002248 <__NVIC_GetPriorityGrouping>
 8002386:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	6978      	ldr	r0, [r7, #20]
 800238e:	f7ff ffb1 	bl	80022f4 <NVIC_EncodePriority>
 8002392:	4602      	mov	r2, r0
 8002394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff80 	bl	80022a0 <__NVIC_SetPriority>
}
 80023a0:	bf00      	nop
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ff54 	bl	8002264 <__NVIC_EnableIRQ>
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e16b      	b.n	80026b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 815a 	bne.w	80026b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d005      	beq.n	8002416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	2b02      	cmp	r3, #2
 8002414:	d130      	bne.n	8002478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 0201 	and.w	r2, r3, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b03      	cmp	r3, #3
 8002482:	d017      	beq.n	80024b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80b4 	beq.w	80026b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b60      	ldr	r3, [pc, #384]	@ (80026d0 <HAL_GPIO_Init+0x30c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	4a5f      	ldr	r2, [pc, #380]	@ (80026d0 <HAL_GPIO_Init+0x30c>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002558:	6453      	str	r3, [r2, #68]	@ 0x44
 800255a:	4b5d      	ldr	r3, [pc, #372]	@ (80026d0 <HAL_GPIO_Init+0x30c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002566:	4a5b      	ldr	r2, [pc, #364]	@ (80026d4 <HAL_GPIO_Init+0x310>)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a52      	ldr	r2, [pc, #328]	@ (80026d8 <HAL_GPIO_Init+0x314>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d02b      	beq.n	80025ea <HAL_GPIO_Init+0x226>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a51      	ldr	r2, [pc, #324]	@ (80026dc <HAL_GPIO_Init+0x318>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d025      	beq.n	80025e6 <HAL_GPIO_Init+0x222>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a50      	ldr	r2, [pc, #320]	@ (80026e0 <HAL_GPIO_Init+0x31c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d01f      	beq.n	80025e2 <HAL_GPIO_Init+0x21e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4f      	ldr	r2, [pc, #316]	@ (80026e4 <HAL_GPIO_Init+0x320>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d019      	beq.n	80025de <HAL_GPIO_Init+0x21a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4e      	ldr	r2, [pc, #312]	@ (80026e8 <HAL_GPIO_Init+0x324>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d013      	beq.n	80025da <HAL_GPIO_Init+0x216>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4d      	ldr	r2, [pc, #308]	@ (80026ec <HAL_GPIO_Init+0x328>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00d      	beq.n	80025d6 <HAL_GPIO_Init+0x212>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4c      	ldr	r2, [pc, #304]	@ (80026f0 <HAL_GPIO_Init+0x32c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4b      	ldr	r2, [pc, #300]	@ (80026f4 <HAL_GPIO_Init+0x330>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <HAL_GPIO_Init+0x20a>
 80025ca:	2307      	movs	r3, #7
 80025cc:	e00e      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025ce:	2308      	movs	r3, #8
 80025d0:	e00c      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025d2:	2306      	movs	r3, #6
 80025d4:	e00a      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025d6:	2305      	movs	r3, #5
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025da:	2304      	movs	r3, #4
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	4935      	ldr	r1, [pc, #212]	@ (80026d4 <HAL_GPIO_Init+0x310>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260a:	4b3b      	ldr	r3, [pc, #236]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262e:	4a32      	ldr	r2, [pc, #200]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002634:	4b30      	ldr	r3, [pc, #192]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002658:	4a27      	ldr	r2, [pc, #156]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265e:	4b26      	ldr	r3, [pc, #152]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002682:	4a1d      	ldr	r2, [pc, #116]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002688:	4b1b      	ldr	r3, [pc, #108]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ac:	4a12      	ldr	r2, [pc, #72]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f ae90 	bls.w	80023e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40021400 	.word	0x40021400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40021c00 	.word	0x40021c00
 80026f8:	40013c00 	.word	0x40013c00

080026fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	887b      	ldrh	r3, [r7, #2]
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e001      	b.n	800271e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
 8002738:	4613      	mov	r3, r2
 800273a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800273c:	787b      	ldrb	r3, [r7, #1]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002748:	e003      	b.n	8002752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	041a      	lsls	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	619a      	str	r2, [r3, #24]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e267      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d075      	beq.n	800286a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800277e:	4b88      	ldr	r3, [pc, #544]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b04      	cmp	r3, #4
 8002788:	d00c      	beq.n	80027a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278a:	4b85      	ldr	r3, [pc, #532]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002792:	2b08      	cmp	r3, #8
 8002794:	d112      	bne.n	80027bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002796:	4b82      	ldr	r3, [pc, #520]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027a2:	d10b      	bne.n	80027bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	4b7e      	ldr	r3, [pc, #504]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d05b      	beq.n	8002868 <HAL_RCC_OscConfig+0x108>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d157      	bne.n	8002868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e242      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c4:	d106      	bne.n	80027d4 <HAL_RCC_OscConfig+0x74>
 80027c6:	4b76      	ldr	r3, [pc, #472]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a75      	ldr	r2, [pc, #468]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e01d      	b.n	8002810 <HAL_RCC_OscConfig+0xb0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x98>
 80027de:	4b70      	ldr	r3, [pc, #448]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a6f      	ldr	r2, [pc, #444]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b6d      	ldr	r3, [pc, #436]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6c      	ldr	r2, [pc, #432]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_OscConfig+0xb0>
 80027f8:	4b69      	ldr	r3, [pc, #420]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a68      	ldr	r2, [pc, #416]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b66      	ldr	r3, [pc, #408]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a65      	ldr	r2, [pc, #404]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800280a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7ff f8e6 	bl	80019e8 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002820:	f7ff f8e2 	bl	80019e8 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	@ 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e207      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b5b      	ldr	r3, [pc, #364]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0xc0>
 800283e:	e014      	b.n	800286a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7ff f8d2 	bl	80019e8 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7ff f8ce 	bl	80019e8 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	@ 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1f3      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	4b51      	ldr	r3, [pc, #324]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0xe8>
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d063      	beq.n	800293e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002876:	4b4a      	ldr	r3, [pc, #296]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002882:	4b47      	ldr	r3, [pc, #284]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800288a:	2b08      	cmp	r3, #8
 800288c:	d11c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b44      	ldr	r3, [pc, #272]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	4b41      	ldr	r3, [pc, #260]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_RCC_OscConfig+0x152>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e1c7      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b2:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4937      	ldr	r1, [pc, #220]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	e03a      	b.n	800293e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d0:	4b34      	ldr	r3, [pc, #208]	@ (80029a4 <HAL_RCC_OscConfig+0x244>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7ff f887 	bl	80019e8 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028de:	f7ff f883 	bl	80019e8 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e1a8      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	4b2b      	ldr	r3, [pc, #172]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b28      	ldr	r3, [pc, #160]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4925      	ldr	r1, [pc, #148]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
 8002910:	e015      	b.n	800293e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002912:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <HAL_RCC_OscConfig+0x244>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7ff f866 	bl	80019e8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002920:	f7ff f862 	bl	80019e8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e187      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d036      	beq.n	80029b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <HAL_RCC_OscConfig+0x248>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7ff f846 	bl	80019e8 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002960:	f7ff f842 	bl	80019e8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e167      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x200>
 800297e:	e01b      	b.n	80029b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002980:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_OscConfig+0x248>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002986:	f7ff f82f 	bl	80019e8 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	e00e      	b.n	80029ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298e:	f7ff f82b 	bl	80019e8 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d907      	bls.n	80029ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e150      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
 80029a0:	40023800 	.word	0x40023800
 80029a4:	42470000 	.word	0x42470000
 80029a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ac:	4b88      	ldr	r3, [pc, #544]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ea      	bne.n	800298e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8097 	beq.w	8002af4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ca:	4b81      	ldr	r3, [pc, #516]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	4b7d      	ldr	r3, [pc, #500]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	4a7c      	ldr	r2, [pc, #496]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e6:	4b7a      	ldr	r3, [pc, #488]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f2:	2301      	movs	r3, #1
 80029f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4b77      	ldr	r3, [pc, #476]	@ (8002bd4 <HAL_RCC_OscConfig+0x474>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d118      	bne.n	8002a34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a02:	4b74      	ldr	r3, [pc, #464]	@ (8002bd4 <HAL_RCC_OscConfig+0x474>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a73      	ldr	r2, [pc, #460]	@ (8002bd4 <HAL_RCC_OscConfig+0x474>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe ffeb 	bl	80019e8 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a16:	f7fe ffe7 	bl	80019e8 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e10c      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd4 <HAL_RCC_OscConfig+0x474>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x2ea>
 8002a3c:	4b64      	ldr	r3, [pc, #400]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	4a63      	ldr	r2, [pc, #396]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a48:	e01c      	b.n	8002a84 <HAL_RCC_OscConfig+0x324>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x30c>
 8002a52:	4b5f      	ldr	r3, [pc, #380]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a56:	4a5e      	ldr	r2, [pc, #376]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0x324>
 8002a6c:	4b58      	ldr	r3, [pc, #352]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a70:	4a57      	ldr	r2, [pc, #348]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a78:	4b55      	ldr	r3, [pc, #340]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7c:	4a54      	ldr	r2, [pc, #336]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	f023 0304 	bic.w	r3, r3, #4
 8002a82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe ffac 	bl	80019e8 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe ffa8 	bl	80019e8 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0cb      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aaa:	4b49      	ldr	r3, [pc, #292]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0ee      	beq.n	8002a94 <HAL_RCC_OscConfig+0x334>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab8:	f7fe ff96 	bl	80019e8 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7fe ff92 	bl	80019e8 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0b5      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ee      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b39      	ldr	r3, [pc, #228]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	4a38      	ldr	r2, [pc, #224]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80a1 	beq.w	8002c40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002afe:	4b34      	ldr	r3, [pc, #208]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d05c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d141      	bne.n	8002b96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b12:	4b31      	ldr	r3, [pc, #196]	@ (8002bd8 <HAL_RCC_OscConfig+0x478>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe ff66 	bl	80019e8 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe ff62 	bl	80019e8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e087      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	4b27      	ldr	r3, [pc, #156]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	3b01      	subs	r3, #1
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	491b      	ldr	r1, [pc, #108]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b68:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd8 <HAL_RCC_OscConfig+0x478>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe ff3b 	bl	80019e8 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b76:	f7fe ff37 	bl	80019e8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e05c      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b88:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x416>
 8002b94:	e054      	b.n	8002c40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_RCC_OscConfig+0x478>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe ff24 	bl	80019e8 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe ff20 	bl	80019e8 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e045      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x444>
 8002bc2:	e03d      	b.n	8002c40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e038      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_RCC_OscConfig+0x4ec>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d028      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d121      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d11a      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d111      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	3b01      	subs	r3, #1
 8002c26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0cc      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c64:	4b68      	ldr	r3, [pc, #416]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d90c      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b65      	ldr	r3, [pc, #404]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b63      	ldr	r3, [pc, #396]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0b8      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca4:	4b59      	ldr	r3, [pc, #356]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4a58      	ldr	r2, [pc, #352]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cbc:	4b53      	ldr	r3, [pc, #332]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4a52      	ldr	r2, [pc, #328]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc8:	4b50      	ldr	r3, [pc, #320]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	494d      	ldr	r1, [pc, #308]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d044      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b47      	ldr	r3, [pc, #284]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d119      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e07f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e06f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e067      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2e:	4b37      	ldr	r3, [pc, #220]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4934      	ldr	r1, [pc, #208]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d40:	f7fe fe52 	bl	80019e8 <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7fe fe4e 	bl	80019e8 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e04f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 020c 	and.w	r2, r3, #12
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1eb      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b25      	ldr	r3, [pc, #148]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d20c      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b22      	ldr	r3, [pc, #136]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e032      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da4:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4916      	ldr	r1, [pc, #88]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc2:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	490e      	ldr	r1, [pc, #56]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dd6:	f000 f821 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	490a      	ldr	r1, [pc, #40]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	5ccb      	ldrb	r3, [r1, r3]
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	4a09      	ldr	r2, [pc, #36]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002df2:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fcea 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023c00 	.word	0x40023c00
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	08005f48 	.word	0x08005f48
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000004 	.word	0x20000004

08002e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e20:	b094      	sub	sp, #80	@ 0x50
 8002e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e34:	4b79      	ldr	r3, [pc, #484]	@ (800301c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d00d      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x40>
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	f200 80e1 	bhi.w	8003008 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x34>
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e4e:	e0db      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b73      	ldr	r3, [pc, #460]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e54:	e0db      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e56:	4b73      	ldr	r3, [pc, #460]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e5a:	e0d8      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e5c:	4b6f      	ldr	r3, [pc, #444]	@ (800301c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e64:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e66:	4b6d      	ldr	r3, [pc, #436]	@ (800301c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d063      	beq.n	8002f3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e72:	4b6a      	ldr	r3, [pc, #424]	@ (800301c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	2200      	movs	r2, #0
 8002e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e86:	2300      	movs	r3, #0
 8002e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e8e:	4622      	mov	r2, r4
 8002e90:	462b      	mov	r3, r5
 8002e92:	f04f 0000 	mov.w	r0, #0
 8002e96:	f04f 0100 	mov.w	r1, #0
 8002e9a:	0159      	lsls	r1, r3, #5
 8002e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea0:	0150      	lsls	r0, r2, #5
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	1a51      	subs	r1, r2, r1
 8002eaa:	6139      	str	r1, [r7, #16]
 8002eac:	4629      	mov	r1, r5
 8002eae:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec0:	4659      	mov	r1, fp
 8002ec2:	018b      	lsls	r3, r1, #6
 8002ec4:	4651      	mov	r1, sl
 8002ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eca:	4651      	mov	r1, sl
 8002ecc:	018a      	lsls	r2, r1, #6
 8002ece:	4651      	mov	r1, sl
 8002ed0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eee:	4690      	mov	r8, r2
 8002ef0:	4699      	mov	r9, r3
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	eb18 0303 	adds.w	r3, r8, r3
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	462b      	mov	r3, r5
 8002efc:	eb49 0303 	adc.w	r3, r9, r3
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f0e:	4629      	mov	r1, r5
 8002f10:	024b      	lsls	r3, r1, #9
 8002f12:	4621      	mov	r1, r4
 8002f14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f18:	4621      	mov	r1, r4
 8002f1a:	024a      	lsls	r2, r1, #9
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f22:	2200      	movs	r2, #0
 8002f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f2c:	f7fd fd46 	bl	80009bc <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4613      	mov	r3, r2
 8002f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f38:	e058      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3a:	4b38      	ldr	r3, [pc, #224]	@ (800301c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	2200      	movs	r2, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	4611      	mov	r1, r2
 8002f46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f54:	4642      	mov	r2, r8
 8002f56:	464b      	mov	r3, r9
 8002f58:	f04f 0000 	mov.w	r0, #0
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	0159      	lsls	r1, r3, #5
 8002f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f66:	0150      	lsls	r0, r2, #5
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f72:	4649      	mov	r1, r9
 8002f74:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f8c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f90:	eb63 050b 	sbc.w	r5, r3, fp
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	00eb      	lsls	r3, r5, #3
 8002f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa2:	00e2      	lsls	r2, r4, #3
 8002fa4:	4614      	mov	r4, r2
 8002fa6:	461d      	mov	r5, r3
 8002fa8:	4643      	mov	r3, r8
 8002faa:	18e3      	adds	r3, r4, r3
 8002fac:	603b      	str	r3, [r7, #0]
 8002fae:	464b      	mov	r3, r9
 8002fb0:	eb45 0303 	adc.w	r3, r5, r3
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	028b      	lsls	r3, r1, #10
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fcc:	4621      	mov	r1, r4
 8002fce:	028a      	lsls	r2, r1, #10
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	61fa      	str	r2, [r7, #28]
 8002fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe0:	f7fd fcec 	bl	80009bc <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ffc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003006:	e002      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003008:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x204>)
 800300a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800300c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003010:	4618      	mov	r0, r3
 8003012:	3750      	adds	r7, #80	@ 0x50
 8003014:	46bd      	mov	sp, r7
 8003016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200

08003028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	@ (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000000 	.word	0x20000000

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003044:	f7ff fff0 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4903      	ldr	r1, [pc, #12]	@ (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	08005f58 	.word	0x08005f58

08003068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800306c:	f7ff ffdc 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0b5b      	lsrs	r3, r3, #13
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4903      	ldr	r1, [pc, #12]	@ (800308c <HAL_RCC_GetPCLK2Freq+0x24>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	08005f58 	.word	0x08005f58

08003090 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	220f      	movs	r2, #15
 800309e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030a0:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <HAL_RCC_GetClockConfig+0x5c>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0203 	and.w	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030ac:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <HAL_RCC_GetClockConfig+0x5c>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030b8:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <HAL_RCC_GetClockConfig+0x5c>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030c4:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_RCC_GetClockConfig+0x5c>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	08db      	lsrs	r3, r3, #3
 80030ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030d2:	4b07      	ldr	r3, [pc, #28]	@ (80030f0 <HAL_RCC_GetClockConfig+0x60>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0207 	and.w	r2, r3, #7
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	601a      	str	r2, [r3, #0]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40023c00 	.word	0x40023c00

080030f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e041      	b.n	800318a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe faaa 	bl	8001674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f000 fc0e 	bl	8003954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d001      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e04e      	b.n	800324a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a23      	ldr	r2, [pc, #140]	@ (8003258 <HAL_TIM_Base_Start_IT+0xc4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d022      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d6:	d01d      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1f      	ldr	r2, [pc, #124]	@ (800325c <HAL_TIM_Base_Start_IT+0xc8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d018      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003260 <HAL_TIM_Base_Start_IT+0xcc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d013      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003264 <HAL_TIM_Base_Start_IT+0xd0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00e      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003268 <HAL_TIM_Base_Start_IT+0xd4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d009      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a19      	ldr	r2, [pc, #100]	@ (800326c <HAL_TIM_Base_Start_IT+0xd8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a18      	ldr	r2, [pc, #96]	@ (8003270 <HAL_TIM_Base_Start_IT+0xdc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d111      	bne.n	8003238 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b06      	cmp	r3, #6
 8003224:	d010      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003236:	e007      	b.n	8003248 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	40000c00 	.word	0x40000c00
 8003268:	40010400 	.word	0x40010400
 800326c:	40014000 	.word	0x40014000
 8003270:	40001800 	.word	0x40001800

08003274 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e041      	b.n	800330a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f839 	bl	8003312 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4619      	mov	r1, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f000 fb4e 	bl	8003954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2200      	movs	r2, #0
 8003336:	6839      	ldr	r1, [r7, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fd75 	bl	8003e28 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10f      	bne.n	800336e <HAL_TIM_IC_Stop+0x48>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1a      	ldr	r2, [r3, #32]
 8003354:	f240 4344 	movw	r3, #1092	@ 0x444
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d107      	bne.n	800336e <HAL_TIM_IC_Stop+0x48>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d104      	bne.n	800337e <HAL_TIM_IC_Stop+0x58>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800337c:	e013      	b.n	80033a6 <HAL_TIM_IC_Stop+0x80>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d104      	bne.n	800338e <HAL_TIM_IC_Stop+0x68>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800338c:	e00b      	b.n	80033a6 <HAL_TIM_IC_Stop+0x80>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d104      	bne.n	800339e <HAL_TIM_IC_Stop+0x78>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800339c:	e003      	b.n	80033a6 <HAL_TIM_IC_Stop+0x80>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d104      	bne.n	80033b6 <HAL_TIM_IC_Stop+0x90>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033b4:	e013      	b.n	80033de <HAL_TIM_IC_Stop+0xb8>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d104      	bne.n	80033c6 <HAL_TIM_IC_Stop+0xa0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033c4:	e00b      	b.n	80033de <HAL_TIM_IC_Stop+0xb8>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d104      	bne.n	80033d6 <HAL_TIM_IC_Stop+0xb0>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033d4:	e003      	b.n	80033de <HAL_TIM_IC_Stop+0xb8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d020      	beq.n	800344c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01b      	beq.n	800344c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0202 	mvn.w	r2, #2
 800341c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fc74 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa6c 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fa73 	bl	800392c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d020      	beq.n	8003498 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01b      	beq.n	8003498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0204 	mvn.w	r2, #4
 8003468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2202      	movs	r2, #2
 800346e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd fc4e 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8003484:	e005      	b.n	8003492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fa46 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fa4d 	bl	800392c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d020      	beq.n	80034e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01b      	beq.n	80034e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0208 	mvn.w	r2, #8
 80034b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2204      	movs	r2, #4
 80034ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd fc28 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 80034d0:	e005      	b.n	80034de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fa20 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fa27 	bl	800392c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d020      	beq.n	8003530 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01b      	beq.n	8003530 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0210 	mvn.w	r2, #16
 8003500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2208      	movs	r2, #8
 8003506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fd fc02 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 800351c:	e005      	b.n	800352a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9fa 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fa01 	bl	800392c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0201 	mvn.w	r2, #1
 800354c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd ffd8 	bl	8001504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00c      	beq.n	8003578 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fd04 	bl	8003f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9d2 	bl	8003940 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00c      	beq.n	80035c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0220 	mvn.w	r2, #32
 80035b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fcd6 	bl	8003f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035c0:	bf00      	nop
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e088      	b.n	80036f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11b      	bne.n	800362c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003604:	f000 fa4c 	bl	8003aa0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 020c 	bic.w	r2, r2, #12
 8003616:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6999      	ldr	r1, [r3, #24]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	619a      	str	r2, [r3, #24]
 800362a:	e060      	b.n	80036ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b04      	cmp	r3, #4
 8003630:	d11c      	bne.n	800366c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003642:	f000 fad0 	bl	8003be6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699a      	ldr	r2, [r3, #24]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003654:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6999      	ldr	r1, [r3, #24]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	021a      	lsls	r2, r3, #8
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	619a      	str	r2, [r3, #24]
 800366a:	e040      	b.n	80036ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b08      	cmp	r3, #8
 8003670:	d11b      	bne.n	80036aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003682:	f000 fb1d 	bl	8003cc0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 020c 	bic.w	r2, r2, #12
 8003694:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69d9      	ldr	r1, [r3, #28]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	61da      	str	r2, [r3, #28]
 80036a8:	e021      	b.n	80036ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b0c      	cmp	r3, #12
 80036ae:	d11c      	bne.n	80036ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80036c0:	f000 fb3a 	bl	8003d38 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80036d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69d9      	ldr	r1, [r3, #28]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	021a      	lsls	r2, r3, #8
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	61da      	str	r2, [r3, #28]
 80036e8:	e001      	b.n	80036ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_TIM_ConfigClockSource+0x1c>
 8003718:	2302      	movs	r3, #2
 800371a:	e0b4      	b.n	8003886 <HAL_TIM_ConfigClockSource+0x186>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800373a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003754:	d03e      	beq.n	80037d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800375a:	f200 8087 	bhi.w	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003762:	f000 8086 	beq.w	8003872 <HAL_TIM_ConfigClockSource+0x172>
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800376a:	d87f      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b70      	cmp	r3, #112	@ 0x70
 800376e:	d01a      	beq.n	80037a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003770:	2b70      	cmp	r3, #112	@ 0x70
 8003772:	d87b      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b60      	cmp	r3, #96	@ 0x60
 8003776:	d050      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x11a>
 8003778:	2b60      	cmp	r3, #96	@ 0x60
 800377a:	d877      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b50      	cmp	r3, #80	@ 0x50
 800377e:	d03c      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0xfa>
 8003780:	2b50      	cmp	r3, #80	@ 0x50
 8003782:	d873      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b40      	cmp	r3, #64	@ 0x40
 8003786:	d058      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x13a>
 8003788:	2b40      	cmp	r3, #64	@ 0x40
 800378a:	d86f      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b30      	cmp	r3, #48	@ 0x30
 800378e:	d064      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 8003790:	2b30      	cmp	r3, #48	@ 0x30
 8003792:	d86b      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d060      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 8003798:	2b20      	cmp	r3, #32
 800379a:	d867      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d05c      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d05a      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 80037a4:	e062      	b.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037b6:	f000 fb17 	bl	8003de8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	609a      	str	r2, [r3, #8]
      break;
 80037d2:	e04f      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037e4:	f000 fb00 	bl	8003de8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037f6:	609a      	str	r2, [r3, #8]
      break;
 80037f8:	e03c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003806:	461a      	mov	r2, r3
 8003808:	f000 f9be 	bl	8003b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2150      	movs	r1, #80	@ 0x50
 8003812:	4618      	mov	r0, r3
 8003814:	f000 facd 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 8003818:	e02c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003826:	461a      	mov	r2, r3
 8003828:	f000 fa1a 	bl	8003c60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2160      	movs	r1, #96	@ 0x60
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fabd 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 8003838:	e01c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003846:	461a      	mov	r2, r3
 8003848:	f000 f99e 	bl	8003b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2140      	movs	r1, #64	@ 0x40
 8003852:	4618      	mov	r0, r3
 8003854:	f000 faad 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 8003858:	e00c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f000 faa4 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 800386a:	e003      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      break;
 8003870:	e000      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	d831      	bhi.n	8003908 <HAL_TIM_ReadCapturedValue+0x78>
 80038a4:	a201      	add	r2, pc, #4	@ (adr r2, 80038ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038e1 	.word	0x080038e1
 80038b0:	08003909 	.word	0x08003909
 80038b4:	08003909 	.word	0x08003909
 80038b8:	08003909 	.word	0x08003909
 80038bc:	080038eb 	.word	0x080038eb
 80038c0:	08003909 	.word	0x08003909
 80038c4:	08003909 	.word	0x08003909
 80038c8:	08003909 	.word	0x08003909
 80038cc:	080038f5 	.word	0x080038f5
 80038d0:	08003909 	.word	0x08003909
 80038d4:	08003909 	.word	0x08003909
 80038d8:	08003909 	.word	0x08003909
 80038dc:	080038ff 	.word	0x080038ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e6:	60fb      	str	r3, [r7, #12]

      break;
 80038e8:	e00f      	b.n	800390a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f0:	60fb      	str	r3, [r7, #12]

      break;
 80038f2:	e00a      	b.n	800390a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fa:	60fb      	str	r3, [r7, #12]

      break;
 80038fc:	e005      	b.n	800390a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	60fb      	str	r3, [r7, #12]

      break;
 8003906:	e000      	b.n	800390a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003908:	bf00      	nop
  }

  return tmpreg;
 800390a:	68fb      	ldr	r3, [r7, #12]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a43      	ldr	r2, [pc, #268]	@ (8003a74 <TIM_Base_SetConfig+0x120>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003972:	d00f      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a40      	ldr	r2, [pc, #256]	@ (8003a78 <TIM_Base_SetConfig+0x124>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00b      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a3f      	ldr	r2, [pc, #252]	@ (8003a7c <TIM_Base_SetConfig+0x128>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a3e      	ldr	r2, [pc, #248]	@ (8003a80 <TIM_Base_SetConfig+0x12c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a84 <TIM_Base_SetConfig+0x130>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d108      	bne.n	80039a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a32      	ldr	r2, [pc, #200]	@ (8003a74 <TIM_Base_SetConfig+0x120>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d02b      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b4:	d027      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003a78 <TIM_Base_SetConfig+0x124>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d023      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a7c <TIM_Base_SetConfig+0x128>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01f      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003a80 <TIM_Base_SetConfig+0x12c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d01b      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003a84 <TIM_Base_SetConfig+0x130>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d017      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a88 <TIM_Base_SetConfig+0x134>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d013      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a8c <TIM_Base_SetConfig+0x138>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00f      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a29      	ldr	r2, [pc, #164]	@ (8003a90 <TIM_Base_SetConfig+0x13c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00b      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a28      	ldr	r2, [pc, #160]	@ (8003a94 <TIM_Base_SetConfig+0x140>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d007      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a27      	ldr	r2, [pc, #156]	@ (8003a98 <TIM_Base_SetConfig+0x144>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d003      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a26      	ldr	r2, [pc, #152]	@ (8003a9c <TIM_Base_SetConfig+0x148>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d108      	bne.n	8003a18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a0e      	ldr	r2, [pc, #56]	@ (8003a74 <TIM_Base_SetConfig+0x120>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_Base_SetConfig+0xf2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a10      	ldr	r2, [pc, #64]	@ (8003a84 <TIM_Base_SetConfig+0x130>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d103      	bne.n	8003a4e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f043 0204 	orr.w	r2, r3, #4
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	601a      	str	r2, [r3, #0]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40010000 	.word	0x40010000
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	40000c00 	.word	0x40000c00
 8003a84:	40010400 	.word	0x40010400
 8003a88:	40014000 	.word	0x40014000
 8003a8c:	40014400 	.word	0x40014400
 8003a90:	40014800 	.word	0x40014800
 8003a94:	40001800 	.word	0x40001800
 8003a98:	40001c00 	.word	0x40001c00
 8003a9c:	40002000 	.word	0x40002000

08003aa0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f023 0201 	bic.w	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a28      	ldr	r2, [pc, #160]	@ (8003b6c <TIM_TI1_SetConfig+0xcc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01b      	beq.n	8003b06 <TIM_TI1_SetConfig+0x66>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad4:	d017      	beq.n	8003b06 <TIM_TI1_SetConfig+0x66>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a25      	ldr	r2, [pc, #148]	@ (8003b70 <TIM_TI1_SetConfig+0xd0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <TIM_TI1_SetConfig+0x66>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4a24      	ldr	r2, [pc, #144]	@ (8003b74 <TIM_TI1_SetConfig+0xd4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00f      	beq.n	8003b06 <TIM_TI1_SetConfig+0x66>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4a23      	ldr	r2, [pc, #140]	@ (8003b78 <TIM_TI1_SetConfig+0xd8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00b      	beq.n	8003b06 <TIM_TI1_SetConfig+0x66>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4a22      	ldr	r2, [pc, #136]	@ (8003b7c <TIM_TI1_SetConfig+0xdc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <TIM_TI1_SetConfig+0x66>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a21      	ldr	r2, [pc, #132]	@ (8003b80 <TIM_TI1_SetConfig+0xe0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <TIM_TI1_SetConfig+0x66>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a20      	ldr	r2, [pc, #128]	@ (8003b84 <TIM_TI1_SetConfig+0xe4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d101      	bne.n	8003b0a <TIM_TI1_SetConfig+0x6a>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <TIM_TI1_SetConfig+0x6c>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e003      	b.n	8003b2a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f023 030a 	bic.w	r3, r3, #10
 8003b44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f003 030a 	and.w	r3, r3, #10
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40010400 	.word	0x40010400
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40001800 	.word	0x40001800

08003b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f023 0201 	bic.w	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f023 030a 	bic.w	r3, r3, #10
 8003bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b087      	sub	sp, #28
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f023 0210 	bic.w	r2, r3, #16
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	031b      	lsls	r3, r3, #12
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c38:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	621a      	str	r2, [r3, #32]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0210 	bic.w	r2, r3, #16
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	031b      	lsls	r3, r3, #12
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	621a      	str	r2, [r3, #32]
}
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f023 0303 	bic.w	r3, r3, #3
 8003cec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cfc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003d10:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	621a      	str	r2, [r3, #32]
}
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d76:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	031b      	lsls	r3, r3, #12
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003d8a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	031b      	lsls	r3, r3, #12
 8003d90:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	621a      	str	r2, [r3, #32]
}
 8003da6:	bf00      	nop
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f043 0307 	orr.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 031f 	and.w	r3, r3, #31
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1a      	ldr	r2, [r3, #32]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e05a      	b.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a21      	ldr	r2, [pc, #132]	@ (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d022      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed8:	d01d      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1d      	ldr	r2, [pc, #116]	@ (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d018      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a18      	ldr	r2, [pc, #96]	@ (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a17      	ldr	r2, [pc, #92]	@ (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a15      	ldr	r2, [pc, #84]	@ (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10c      	bne.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40010000 	.word	0x40010000
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800
 8003f5c:	40000c00 	.word	0x40000c00
 8003f60:	40010400 	.word	0x40010400
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40001800 	.word	0x40001800

08003f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e042      	b.n	800402c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd fba0 	bl	8001700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2224      	movs	r2, #36	@ 0x24
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f973 	bl	80042c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800400c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08a      	sub	sp, #40	@ 0x28
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b20      	cmp	r3, #32
 8004052:	d175      	bne.n	8004140 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_UART_Transmit+0x2c>
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e06e      	b.n	8004142 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2221      	movs	r2, #33	@ 0x21
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004072:	f7fd fcb9 	bl	80019e8 <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	88fa      	ldrh	r2, [r7, #6]
 8004082:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408c:	d108      	bne.n	80040a0 <HAL_UART_Transmit+0x6c>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	e003      	b.n	80040a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040a8:	e02e      	b.n	8004108 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2200      	movs	r2, #0
 80040b2:	2180      	movs	r1, #128	@ 0x80
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f848 	bl	800414a <UART_WaitOnFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e03a      	b.n	8004142 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	3302      	adds	r3, #2
 80040e6:	61bb      	str	r3, [r7, #24]
 80040e8:	e007      	b.n	80040fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	781a      	ldrb	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	3301      	adds	r3, #1
 80040f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1cb      	bne.n	80040aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	2140      	movs	r1, #64	@ 0x40
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f814 	bl	800414a <UART_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e006      	b.n	8004142 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	e000      	b.n	8004142 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004140:	2302      	movs	r3, #2
  }
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b086      	sub	sp, #24
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	4613      	mov	r3, r2
 8004158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415a:	e03b      	b.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004162:	d037      	beq.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004164:	f7fd fc40 	bl	80019e8 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	6a3a      	ldr	r2, [r7, #32]
 8004170:	429a      	cmp	r2, r3
 8004172:	d302      	bcc.n	800417a <UART_WaitOnFlagUntilTimeout+0x30>
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e03a      	b.n	80041f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d023      	beq.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b80      	cmp	r3, #128	@ 0x80
 8004190:	d020      	beq.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b40      	cmp	r3, #64	@ 0x40
 8004196:	d01d      	beq.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d116      	bne.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f81d 	bl	80041fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2208      	movs	r2, #8
 80041c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e00f      	b.n	80041f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4013      	ands	r3, r2
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d0b4      	beq.n	800415c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b095      	sub	sp, #84	@ 0x54
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004216:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800421a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004224:	643a      	str	r2, [r7, #64]	@ 0x40
 8004226:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800422a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3314      	adds	r3, #20
 800423e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	61fb      	str	r3, [r7, #28]
   return(result);
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3314      	adds	r3, #20
 8004256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004258:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800425a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800425e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e5      	bne.n	8004238 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004270:	2b01      	cmp	r3, #1
 8004272:	d119      	bne.n	80042a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	60bb      	str	r3, [r7, #8]
   return(result);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f023 0310 	bic.w	r3, r3, #16
 800428a:	647b      	str	r3, [r7, #68]	@ 0x44
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	330c      	adds	r3, #12
 8004292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004294:	61ba      	str	r2, [r7, #24]
 8004296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6979      	ldr	r1, [r7, #20]
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	613b      	str	r3, [r7, #16]
   return(result);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e5      	bne.n	8004274 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042b6:	bf00      	nop
 80042b8:	3754      	adds	r7, #84	@ 0x54
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c8:	b0c0      	sub	sp, #256	@ 0x100
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e0:	68d9      	ldr	r1, [r3, #12]
 80042e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	ea40 0301 	orr.w	r3, r0, r1
 80042ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	431a      	orrs	r2, r3
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800431c:	f021 010c 	bic.w	r1, r1, #12
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800432a:	430b      	orrs	r3, r1
 800432c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433e:	6999      	ldr	r1, [r3, #24]
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	ea40 0301 	orr.w	r3, r0, r1
 800434a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b8f      	ldr	r3, [pc, #572]	@ (8004590 <UART_SetConfig+0x2cc>)
 8004354:	429a      	cmp	r2, r3
 8004356:	d005      	beq.n	8004364 <UART_SetConfig+0xa0>
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b8d      	ldr	r3, [pc, #564]	@ (8004594 <UART_SetConfig+0x2d0>)
 8004360:	429a      	cmp	r2, r3
 8004362:	d104      	bne.n	800436e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004364:	f7fe fe80 	bl	8003068 <HAL_RCC_GetPCLK2Freq>
 8004368:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800436c:	e003      	b.n	8004376 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800436e:	f7fe fe67 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8004372:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004380:	f040 810c 	bne.w	800459c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004388:	2200      	movs	r2, #0
 800438a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800438e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004392:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004396:	4622      	mov	r2, r4
 8004398:	462b      	mov	r3, r5
 800439a:	1891      	adds	r1, r2, r2
 800439c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800439e:	415b      	adcs	r3, r3
 80043a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043a6:	4621      	mov	r1, r4
 80043a8:	eb12 0801 	adds.w	r8, r2, r1
 80043ac:	4629      	mov	r1, r5
 80043ae:	eb43 0901 	adc.w	r9, r3, r1
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043c6:	4690      	mov	r8, r2
 80043c8:	4699      	mov	r9, r3
 80043ca:	4623      	mov	r3, r4
 80043cc:	eb18 0303 	adds.w	r3, r8, r3
 80043d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043d4:	462b      	mov	r3, r5
 80043d6:	eb49 0303 	adc.w	r3, r9, r3
 80043da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043f2:	460b      	mov	r3, r1
 80043f4:	18db      	adds	r3, r3, r3
 80043f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80043f8:	4613      	mov	r3, r2
 80043fa:	eb42 0303 	adc.w	r3, r2, r3
 80043fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004408:	f7fc fad8 	bl	80009bc <__aeabi_uldivmod>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4b61      	ldr	r3, [pc, #388]	@ (8004598 <UART_SetConfig+0x2d4>)
 8004412:	fba3 2302 	umull	r2, r3, r3, r2
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	011c      	lsls	r4, r3, #4
 800441a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800441e:	2200      	movs	r2, #0
 8004420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004424:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004428:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800442c:	4642      	mov	r2, r8
 800442e:	464b      	mov	r3, r9
 8004430:	1891      	adds	r1, r2, r2
 8004432:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004434:	415b      	adcs	r3, r3
 8004436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800443c:	4641      	mov	r1, r8
 800443e:	eb12 0a01 	adds.w	sl, r2, r1
 8004442:	4649      	mov	r1, r9
 8004444:	eb43 0b01 	adc.w	fp, r3, r1
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004454:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800445c:	4692      	mov	sl, r2
 800445e:	469b      	mov	fp, r3
 8004460:	4643      	mov	r3, r8
 8004462:	eb1a 0303 	adds.w	r3, sl, r3
 8004466:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800446a:	464b      	mov	r3, r9
 800446c:	eb4b 0303 	adc.w	r3, fp, r3
 8004470:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004480:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004484:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004488:	460b      	mov	r3, r1
 800448a:	18db      	adds	r3, r3, r3
 800448c:	643b      	str	r3, [r7, #64]	@ 0x40
 800448e:	4613      	mov	r3, r2
 8004490:	eb42 0303 	adc.w	r3, r2, r3
 8004494:	647b      	str	r3, [r7, #68]	@ 0x44
 8004496:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800449a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800449e:	f7fc fa8d 	bl	80009bc <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4611      	mov	r1, r2
 80044a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004598 <UART_SetConfig+0x2d4>)
 80044aa:	fba3 2301 	umull	r2, r3, r3, r1
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2264      	movs	r2, #100	@ 0x64
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	1acb      	subs	r3, r1, r3
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044be:	4b36      	ldr	r3, [pc, #216]	@ (8004598 <UART_SetConfig+0x2d4>)
 80044c0:	fba3 2302 	umull	r2, r3, r3, r2
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044cc:	441c      	add	r4, r3
 80044ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	1891      	adds	r1, r2, r2
 80044e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044e8:	415b      	adcs	r3, r3
 80044ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044f0:	4641      	mov	r1, r8
 80044f2:	1851      	adds	r1, r2, r1
 80044f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80044f6:	4649      	mov	r1, r9
 80044f8:	414b      	adcs	r3, r1
 80044fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004508:	4659      	mov	r1, fp
 800450a:	00cb      	lsls	r3, r1, #3
 800450c:	4651      	mov	r1, sl
 800450e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004512:	4651      	mov	r1, sl
 8004514:	00ca      	lsls	r2, r1, #3
 8004516:	4610      	mov	r0, r2
 8004518:	4619      	mov	r1, r3
 800451a:	4603      	mov	r3, r0
 800451c:	4642      	mov	r2, r8
 800451e:	189b      	adds	r3, r3, r2
 8004520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004524:	464b      	mov	r3, r9
 8004526:	460a      	mov	r2, r1
 8004528:	eb42 0303 	adc.w	r3, r2, r3
 800452c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800453c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004544:	460b      	mov	r3, r1
 8004546:	18db      	adds	r3, r3, r3
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800454a:	4613      	mov	r3, r2
 800454c:	eb42 0303 	adc.w	r3, r2, r3
 8004550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004556:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800455a:	f7fc fa2f 	bl	80009bc <__aeabi_uldivmod>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4b0d      	ldr	r3, [pc, #52]	@ (8004598 <UART_SetConfig+0x2d4>)
 8004564:	fba3 1302 	umull	r1, r3, r3, r2
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	2164      	movs	r1, #100	@ 0x64
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	3332      	adds	r3, #50	@ 0x32
 8004576:	4a08      	ldr	r2, [pc, #32]	@ (8004598 <UART_SetConfig+0x2d4>)
 8004578:	fba2 2303 	umull	r2, r3, r2, r3
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	f003 0207 	and.w	r2, r3, #7
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4422      	add	r2, r4
 800458a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800458c:	e106      	b.n	800479c <UART_SetConfig+0x4d8>
 800458e:	bf00      	nop
 8004590:	40011000 	.word	0x40011000
 8004594:	40011400 	.word	0x40011400
 8004598:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800459c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045ae:	4642      	mov	r2, r8
 80045b0:	464b      	mov	r3, r9
 80045b2:	1891      	adds	r1, r2, r2
 80045b4:	6239      	str	r1, [r7, #32]
 80045b6:	415b      	adcs	r3, r3
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045be:	4641      	mov	r1, r8
 80045c0:	1854      	adds	r4, r2, r1
 80045c2:	4649      	mov	r1, r9
 80045c4:	eb43 0501 	adc.w	r5, r3, r1
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	00eb      	lsls	r3, r5, #3
 80045d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045d6:	00e2      	lsls	r2, r4, #3
 80045d8:	4614      	mov	r4, r2
 80045da:	461d      	mov	r5, r3
 80045dc:	4643      	mov	r3, r8
 80045de:	18e3      	adds	r3, r4, r3
 80045e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045e4:	464b      	mov	r3, r9
 80045e6:	eb45 0303 	adc.w	r3, r5, r3
 80045ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800460a:	4629      	mov	r1, r5
 800460c:	008b      	lsls	r3, r1, #2
 800460e:	4621      	mov	r1, r4
 8004610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004614:	4621      	mov	r1, r4
 8004616:	008a      	lsls	r2, r1, #2
 8004618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800461c:	f7fc f9ce 	bl	80009bc <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4b60      	ldr	r3, [pc, #384]	@ (80047a8 <UART_SetConfig+0x4e4>)
 8004626:	fba3 2302 	umull	r2, r3, r3, r2
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	011c      	lsls	r4, r3, #4
 800462e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004632:	2200      	movs	r2, #0
 8004634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004638:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800463c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004640:	4642      	mov	r2, r8
 8004642:	464b      	mov	r3, r9
 8004644:	1891      	adds	r1, r2, r2
 8004646:	61b9      	str	r1, [r7, #24]
 8004648:	415b      	adcs	r3, r3
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004650:	4641      	mov	r1, r8
 8004652:	1851      	adds	r1, r2, r1
 8004654:	6139      	str	r1, [r7, #16]
 8004656:	4649      	mov	r1, r9
 8004658:	414b      	adcs	r3, r1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004668:	4659      	mov	r1, fp
 800466a:	00cb      	lsls	r3, r1, #3
 800466c:	4651      	mov	r1, sl
 800466e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004672:	4651      	mov	r1, sl
 8004674:	00ca      	lsls	r2, r1, #3
 8004676:	4610      	mov	r0, r2
 8004678:	4619      	mov	r1, r3
 800467a:	4603      	mov	r3, r0
 800467c:	4642      	mov	r2, r8
 800467e:	189b      	adds	r3, r3, r2
 8004680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004684:	464b      	mov	r3, r9
 8004686:	460a      	mov	r2, r1
 8004688:	eb42 0303 	adc.w	r3, r2, r3
 800468c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800469a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046a8:	4649      	mov	r1, r9
 80046aa:	008b      	lsls	r3, r1, #2
 80046ac:	4641      	mov	r1, r8
 80046ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046b2:	4641      	mov	r1, r8
 80046b4:	008a      	lsls	r2, r1, #2
 80046b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046ba:	f7fc f97f 	bl	80009bc <__aeabi_uldivmod>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4611      	mov	r1, r2
 80046c4:	4b38      	ldr	r3, [pc, #224]	@ (80047a8 <UART_SetConfig+0x4e4>)
 80046c6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2264      	movs	r2, #100	@ 0x64
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	1acb      	subs	r3, r1, r3
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	3332      	adds	r3, #50	@ 0x32
 80046d8:	4a33      	ldr	r2, [pc, #204]	@ (80047a8 <UART_SetConfig+0x4e4>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046e4:	441c      	add	r4, r3
 80046e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ea:	2200      	movs	r2, #0
 80046ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80046ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80046f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046f4:	4642      	mov	r2, r8
 80046f6:	464b      	mov	r3, r9
 80046f8:	1891      	adds	r1, r2, r2
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	415b      	adcs	r3, r3
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004704:	4641      	mov	r1, r8
 8004706:	1851      	adds	r1, r2, r1
 8004708:	6039      	str	r1, [r7, #0]
 800470a:	4649      	mov	r1, r9
 800470c:	414b      	adcs	r3, r1
 800470e:	607b      	str	r3, [r7, #4]
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800471c:	4659      	mov	r1, fp
 800471e:	00cb      	lsls	r3, r1, #3
 8004720:	4651      	mov	r1, sl
 8004722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004726:	4651      	mov	r1, sl
 8004728:	00ca      	lsls	r2, r1, #3
 800472a:	4610      	mov	r0, r2
 800472c:	4619      	mov	r1, r3
 800472e:	4603      	mov	r3, r0
 8004730:	4642      	mov	r2, r8
 8004732:	189b      	adds	r3, r3, r2
 8004734:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004736:	464b      	mov	r3, r9
 8004738:	460a      	mov	r2, r1
 800473a:	eb42 0303 	adc.w	r3, r2, r3
 800473e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	663b      	str	r3, [r7, #96]	@ 0x60
 800474a:	667a      	str	r2, [r7, #100]	@ 0x64
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004758:	4649      	mov	r1, r9
 800475a:	008b      	lsls	r3, r1, #2
 800475c:	4641      	mov	r1, r8
 800475e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004762:	4641      	mov	r1, r8
 8004764:	008a      	lsls	r2, r1, #2
 8004766:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800476a:	f7fc f927 	bl	80009bc <__aeabi_uldivmod>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4b0d      	ldr	r3, [pc, #52]	@ (80047a8 <UART_SetConfig+0x4e4>)
 8004774:	fba3 1302 	umull	r1, r3, r3, r2
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	2164      	movs	r1, #100	@ 0x64
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	3332      	adds	r3, #50	@ 0x32
 8004786:	4a08      	ldr	r2, [pc, #32]	@ (80047a8 <UART_SetConfig+0x4e4>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	f003 020f 	and.w	r2, r3, #15
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4422      	add	r2, r4
 800479a:	609a      	str	r2, [r3, #8]
}
 800479c:	bf00      	nop
 800479e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047a2:	46bd      	mov	sp, r7
 80047a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a8:	51eb851f 	.word	0x51eb851f

080047ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80047ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047be:	2b84      	cmp	r3, #132	@ 0x84
 80047c0:	d005      	beq.n	80047ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80047c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	3303      	adds	r3, #3
 80047cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80047ce:	68fb      	ldr	r3, [r7, #12]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80047e0:	f000 fafc 	bl	8004ddc <vTaskStartScheduler>
  
  return osOK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	bd80      	pop	{r7, pc}

080047ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80047ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ec:	b089      	sub	sp, #36	@ 0x24
 80047ee:	af04      	add	r7, sp, #16
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d020      	beq.n	800483e <osThreadCreate+0x54>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01c      	beq.n	800483e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685c      	ldr	r4, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691e      	ldr	r6, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff ffc8 	bl	80047ac <makeFreeRtosPriority>
 800481c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004826:	9202      	str	r2, [sp, #8]
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	9100      	str	r1, [sp, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	4632      	mov	r2, r6
 8004830:	4629      	mov	r1, r5
 8004832:	4620      	mov	r0, r4
 8004834:	f000 f8ed 	bl	8004a12 <xTaskCreateStatic>
 8004838:	4603      	mov	r3, r0
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e01c      	b.n	8004878 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685c      	ldr	r4, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800484a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff ffaa 	bl	80047ac <makeFreeRtosPriority>
 8004858:	4602      	mov	r2, r0
 800485a:	f107 030c 	add.w	r3, r7, #12
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	9200      	str	r2, [sp, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	4632      	mov	r2, r6
 8004866:	4629      	mov	r1, r5
 8004868:	4620      	mov	r0, r4
 800486a:	f000 f932 	bl	8004ad2 <xTaskCreate>
 800486e:	4603      	mov	r3, r0
 8004870:	2b01      	cmp	r3, #1
 8004872:	d001      	beq.n	8004878 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	e000      	b.n	800487a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004878:	68fb      	ldr	r3, [r7, #12]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004882 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <osDelay+0x16>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	e000      	b.n	800489a <osDelay+0x18>
 8004898:	2301      	movs	r3, #1
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fa68 	bl	8004d70 <vTaskDelay>
  
  return osOK;
 80048a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f103 0208 	add.w	r2, r3, #8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f103 0208 	add.w	r2, r3, #8
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f103 0208 	add.w	r2, r3, #8
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	601a      	str	r2, [r3, #0]
}
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004962:	d103      	bne.n	800496c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e00c      	b.n	8004986 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3308      	adds	r3, #8
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e002      	b.n	800497a <vListInsert+0x2e>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	429a      	cmp	r2, r3
 8004984:	d2f6      	bcs.n	8004974 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049be:	b480      	push	{r7}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6892      	ldr	r2, [r2, #8]
 80049d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6852      	ldr	r2, [r2, #4]
 80049de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d103      	bne.n	80049f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	1e5a      	subs	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b08e      	sub	sp, #56	@ 0x38
 8004a16:	af04      	add	r7, sp, #16
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
 8004a1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	e7fd      	b.n	8004a3a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10b      	bne.n	8004a5c <xTaskCreateStatic+0x4a>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	61fb      	str	r3, [r7, #28]
}
 8004a56:	bf00      	nop
 8004a58:	bf00      	nop
 8004a5a:	e7fd      	b.n	8004a58 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a5c:	23a0      	movs	r3, #160	@ 0xa0
 8004a5e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	2ba0      	cmp	r3, #160	@ 0xa0
 8004a64:	d00b      	beq.n	8004a7e <xTaskCreateStatic+0x6c>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	61bb      	str	r3, [r7, #24]
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	e7fd      	b.n	8004a7a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01e      	beq.n	8004ac4 <xTaskCreateStatic+0xb2>
 8004a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01b      	beq.n	8004ac4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a94:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	2202      	movs	r2, #2
 8004a9a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9303      	str	r3, [sp, #12]
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	9302      	str	r3, [sp, #8]
 8004aa6:	f107 0314 	add.w	r3, r7, #20
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f850 	bl	8004b5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004abc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004abe:	f000 f8ed 	bl	8004c9c <prvAddNewTaskToReadyList>
 8004ac2:	e001      	b.n	8004ac8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ac8:	697b      	ldr	r3, [r7, #20]
	}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3728      	adds	r7, #40	@ 0x28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b08c      	sub	sp, #48	@ 0x30
 8004ad6:	af04      	add	r7, sp, #16
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	603b      	str	r3, [r7, #0]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fefe 	bl	80058e8 <pvPortMalloc>
 8004aec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00e      	beq.n	8004b12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004af4:	20a0      	movs	r0, #160	@ 0xa0
 8004af6:	f000 fef7 	bl	80058e8 <pvPortMalloc>
 8004afa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b08:	e005      	b.n	8004b16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b0a:	6978      	ldr	r0, [r7, #20]
 8004b0c:	f000 ffba 	bl	8005a84 <vPortFree>
 8004b10:	e001      	b.n	8004b16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d017      	beq.n	8004b4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b24:	88fa      	ldrh	r2, [r7, #6]
 8004b26:	2300      	movs	r3, #0
 8004b28:	9303      	str	r3, [sp, #12]
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	9302      	str	r3, [sp, #8]
 8004b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f80e 	bl	8004b5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b40:	69f8      	ldr	r0, [r7, #28]
 8004b42:	f000 f8ab 	bl	8004c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b46:	2301      	movs	r3, #1
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	e002      	b.n	8004b52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b52:	69bb      	ldr	r3, [r7, #24]
	}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b74:	3b01      	subs	r3, #1
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f023 0307 	bic.w	r3, r3, #7
 8004b82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00b      	beq.n	8004ba6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	617b      	str	r3, [r7, #20]
}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	e7fd      	b.n	8004ba2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01f      	beq.n	8004bec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bac:	2300      	movs	r3, #0
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	e012      	b.n	8004bd8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	7819      	ldrb	r1, [r3, #0]
 8004bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3334      	adds	r3, #52	@ 0x34
 8004bc2:	460a      	mov	r2, r1
 8004bc4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	4413      	add	r3, r2
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d006      	beq.n	8004be0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b0f      	cmp	r3, #15
 8004bdc:	d9e9      	bls.n	8004bb2 <prvInitialiseNewTask+0x56>
 8004bde:	e000      	b.n	8004be2 <prvInitialiseNewTask+0x86>
			{
				break;
 8004be0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bea:	e003      	b.n	8004bf4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf6:	2b06      	cmp	r3, #6
 8004bf8:	d901      	bls.n	8004bfe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bfa:	2306      	movs	r3, #6
 8004bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c02:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c08:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c12:	3304      	adds	r3, #4
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fe68 	bl	80048ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	3318      	adds	r3, #24
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff fe63 	bl	80048ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	f1c3 0207 	rsb	r2, r3, #7
 8004c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c38:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4c:	334c      	adds	r3, #76	@ 0x4c
 8004c4e:	224c      	movs	r2, #76	@ 0x4c
 8004c50:	2100      	movs	r1, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 f836 	bl	8005cc4 <memset>
 8004c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8004c90 <prvInitialiseNewTask+0x134>)
 8004c5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	4a0c      	ldr	r2, [pc, #48]	@ (8004c94 <prvInitialiseNewTask+0x138>)
 8004c62:	655a      	str	r2, [r3, #84]	@ 0x54
 8004c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c66:	4a0c      	ldr	r2, [pc, #48]	@ (8004c98 <prvInitialiseNewTask+0x13c>)
 8004c68:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	68f9      	ldr	r1, [r7, #12]
 8004c6e:	69b8      	ldr	r0, [r7, #24]
 8004c70:	f000 fc2a 	bl	80054c8 <pxPortInitialiseStack>
 8004c74:	4602      	mov	r2, r0
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c86:	bf00      	nop
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20004200 	.word	0x20004200
 8004c94:	20004268 	.word	0x20004268
 8004c98:	200042d0 	.word	0x200042d0

08004c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ca4:	f000 fd40 	bl	8005728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8004d54 <prvAddNewTaskToReadyList+0xb8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	4a29      	ldr	r2, [pc, #164]	@ (8004d54 <prvAddNewTaskToReadyList+0xb8>)
 8004cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cb2:	4b29      	ldr	r3, [pc, #164]	@ (8004d58 <prvAddNewTaskToReadyList+0xbc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cba:	4a27      	ldr	r2, [pc, #156]	@ (8004d58 <prvAddNewTaskToReadyList+0xbc>)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cc0:	4b24      	ldr	r3, [pc, #144]	@ (8004d54 <prvAddNewTaskToReadyList+0xb8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d110      	bne.n	8004cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cc8:	f000 fad4 	bl	8005274 <prvInitialiseTaskLists>
 8004ccc:	e00d      	b.n	8004cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cce:	4b23      	ldr	r3, [pc, #140]	@ (8004d5c <prvAddNewTaskToReadyList+0xc0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cd6:	4b20      	ldr	r3, [pc, #128]	@ (8004d58 <prvAddNewTaskToReadyList+0xbc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d802      	bhi.n	8004cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d58 <prvAddNewTaskToReadyList+0xbc>)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cea:	4b1d      	ldr	r3, [pc, #116]	@ (8004d60 <prvAddNewTaskToReadyList+0xc4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8004d60 <prvAddNewTaskToReadyList+0xc4>)
 8004cf2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	4b19      	ldr	r3, [pc, #100]	@ (8004d64 <prvAddNewTaskToReadyList+0xc8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	4a18      	ldr	r2, [pc, #96]	@ (8004d64 <prvAddNewTaskToReadyList+0xc8>)
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4a15      	ldr	r2, [pc, #84]	@ (8004d68 <prvAddNewTaskToReadyList+0xcc>)
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f7ff fdf1 	bl	8004904 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d22:	f000 fd33 	bl	800578c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d26:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <prvAddNewTaskToReadyList+0xc0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00e      	beq.n	8004d4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d58 <prvAddNewTaskToReadyList+0xbc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d207      	bcs.n	8004d4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <prvAddNewTaskToReadyList+0xd0>)
 8004d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	200005ac 	.word	0x200005ac
 8004d58:	200004ac 	.word	0x200004ac
 8004d5c:	200005b8 	.word	0x200005b8
 8004d60:	200005c8 	.word	0x200005c8
 8004d64:	200005b4 	.word	0x200005b4
 8004d68:	200004b0 	.word	0x200004b0
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d018      	beq.n	8004db4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d82:	4b14      	ldr	r3, [pc, #80]	@ (8004dd4 <vTaskDelay+0x64>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <vTaskDelay+0x32>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	60bb      	str	r3, [r7, #8]
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	e7fd      	b.n	8004d9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004da2:	f000 f885 	bl	8004eb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004da6:	2100      	movs	r1, #0
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fb27 	bl	80053fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004dae:	f000 f88d 	bl	8004ecc <xTaskResumeAll>
 8004db2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d107      	bne.n	8004dca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004dba:	4b07      	ldr	r3, [pc, #28]	@ (8004dd8 <vTaskDelay+0x68>)
 8004dbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	200005d4 	.word	0x200005d4
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	@ 0x28
 8004de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dea:	463a      	mov	r2, r7
 8004dec:	1d39      	adds	r1, r7, #4
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fb ff78 	bl	8000ce8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	9202      	str	r2, [sp, #8]
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	2300      	movs	r3, #0
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	2300      	movs	r3, #0
 8004e08:	460a      	mov	r2, r1
 8004e0a:	4921      	ldr	r1, [pc, #132]	@ (8004e90 <vTaskStartScheduler+0xb4>)
 8004e0c:	4821      	ldr	r0, [pc, #132]	@ (8004e94 <vTaskStartScheduler+0xb8>)
 8004e0e:	f7ff fe00 	bl	8004a12 <xTaskCreateStatic>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4a20      	ldr	r2, [pc, #128]	@ (8004e98 <vTaskStartScheduler+0xbc>)
 8004e16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e18:	4b1f      	ldr	r3, [pc, #124]	@ (8004e98 <vTaskStartScheduler+0xbc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e20:	2301      	movs	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e001      	b.n	8004e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d11b      	bne.n	8004e68 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	613b      	str	r3, [r7, #16]
}
 8004e42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e44:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <vTaskStartScheduler+0xc0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	334c      	adds	r3, #76	@ 0x4c
 8004e4a:	4a15      	ldr	r2, [pc, #84]	@ (8004ea0 <vTaskStartScheduler+0xc4>)
 8004e4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ea4 <vTaskStartScheduler+0xc8>)
 8004e50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e56:	4b14      	ldr	r3, [pc, #80]	@ (8004ea8 <vTaskStartScheduler+0xcc>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e5c:	4b13      	ldr	r3, [pc, #76]	@ (8004eac <vTaskStartScheduler+0xd0>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e62:	f000 fbbd 	bl	80055e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e66:	e00f      	b.n	8004e88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e6e:	d10b      	bne.n	8004e88 <vTaskStartScheduler+0xac>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60fb      	str	r3, [r7, #12]
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <vTaskStartScheduler+0xa8>
}
 8004e88:	bf00      	nop
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	08005f40 	.word	0x08005f40
 8004e94:	08005245 	.word	0x08005245
 8004e98:	200005d0 	.word	0x200005d0
 8004e9c:	200004ac 	.word	0x200004ac
 8004ea0:	20000010 	.word	0x20000010
 8004ea4:	200005cc 	.word	0x200005cc
 8004ea8:	200005b8 	.word	0x200005b8
 8004eac:	200005b0 	.word	0x200005b0

08004eb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004eb4:	4b04      	ldr	r3, [pc, #16]	@ (8004ec8 <vTaskSuspendAll+0x18>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	4a03      	ldr	r2, [pc, #12]	@ (8004ec8 <vTaskSuspendAll+0x18>)
 8004ebc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ebe:	bf00      	nop
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	200005d4 	.word	0x200005d4

08004ecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004eda:	4b42      	ldr	r3, [pc, #264]	@ (8004fe4 <xTaskResumeAll+0x118>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <xTaskResumeAll+0x2e>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	603b      	str	r3, [r7, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop
 8004ef8:	e7fd      	b.n	8004ef6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004efa:	f000 fc15 	bl	8005728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004efe:	4b39      	ldr	r3, [pc, #228]	@ (8004fe4 <xTaskResumeAll+0x118>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	4a37      	ldr	r2, [pc, #220]	@ (8004fe4 <xTaskResumeAll+0x118>)
 8004f06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f08:	4b36      	ldr	r3, [pc, #216]	@ (8004fe4 <xTaskResumeAll+0x118>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d161      	bne.n	8004fd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f10:	4b35      	ldr	r3, [pc, #212]	@ (8004fe8 <xTaskResumeAll+0x11c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d05d      	beq.n	8004fd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f18:	e02e      	b.n	8004f78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f1a:	4b34      	ldr	r3, [pc, #208]	@ (8004fec <xTaskResumeAll+0x120>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3318      	adds	r3, #24
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff fd49 	bl	80049be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff fd44 	bl	80049be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ff0 <xTaskResumeAll+0x124>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff0 <xTaskResumeAll+0x124>)
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4a27      	ldr	r2, [pc, #156]	@ (8004ff4 <xTaskResumeAll+0x128>)
 8004f56:	441a      	add	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f7ff fcd0 	bl	8004904 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f68:	4b23      	ldr	r3, [pc, #140]	@ (8004ff8 <xTaskResumeAll+0x12c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f72:	4b22      	ldr	r3, [pc, #136]	@ (8004ffc <xTaskResumeAll+0x130>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f78:	4b1c      	ldr	r3, [pc, #112]	@ (8004fec <xTaskResumeAll+0x120>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1cc      	bne.n	8004f1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f86:	f000 fa19 	bl	80053bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8005000 <xTaskResumeAll+0x134>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d010      	beq.n	8004fb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f96:	f000 f837 	bl	8005008 <xTaskIncrementTick>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004fa0:	4b16      	ldr	r3, [pc, #88]	@ (8004ffc <xTaskResumeAll+0x130>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f1      	bne.n	8004f96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004fb2:	4b13      	ldr	r3, [pc, #76]	@ (8005000 <xTaskResumeAll+0x134>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fb8:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <xTaskResumeAll+0x130>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005004 <xTaskResumeAll+0x138>)
 8004fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fd4:	f000 fbda 	bl	800578c <vPortExitCritical>

	return xAlreadyYielded;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200005d4 	.word	0x200005d4
 8004fe8:	200005ac 	.word	0x200005ac
 8004fec:	2000056c 	.word	0x2000056c
 8004ff0:	200005b4 	.word	0x200005b4
 8004ff4:	200004b0 	.word	0x200004b0
 8004ff8:	200004ac 	.word	0x200004ac
 8004ffc:	200005c0 	.word	0x200005c0
 8005000:	200005bc 	.word	0x200005bc
 8005004:	e000ed04 	.word	0xe000ed04

08005008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005012:	4b4f      	ldr	r3, [pc, #316]	@ (8005150 <xTaskIncrementTick+0x148>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 808f 	bne.w	800513a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800501c:	4b4d      	ldr	r3, [pc, #308]	@ (8005154 <xTaskIncrementTick+0x14c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3301      	adds	r3, #1
 8005022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005024:	4a4b      	ldr	r2, [pc, #300]	@ (8005154 <xTaskIncrementTick+0x14c>)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d121      	bne.n	8005074 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005030:	4b49      	ldr	r3, [pc, #292]	@ (8005158 <xTaskIncrementTick+0x150>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <xTaskIncrementTick+0x4a>
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	603b      	str	r3, [r7, #0]
}
 800504c:	bf00      	nop
 800504e:	bf00      	nop
 8005050:	e7fd      	b.n	800504e <xTaskIncrementTick+0x46>
 8005052:	4b41      	ldr	r3, [pc, #260]	@ (8005158 <xTaskIncrementTick+0x150>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	4b40      	ldr	r3, [pc, #256]	@ (800515c <xTaskIncrementTick+0x154>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a3e      	ldr	r2, [pc, #248]	@ (8005158 <xTaskIncrementTick+0x150>)
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	4a3e      	ldr	r2, [pc, #248]	@ (800515c <xTaskIncrementTick+0x154>)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	4b3e      	ldr	r3, [pc, #248]	@ (8005160 <xTaskIncrementTick+0x158>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3301      	adds	r3, #1
 800506c:	4a3c      	ldr	r2, [pc, #240]	@ (8005160 <xTaskIncrementTick+0x158>)
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	f000 f9a4 	bl	80053bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005074:	4b3b      	ldr	r3, [pc, #236]	@ (8005164 <xTaskIncrementTick+0x15c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	429a      	cmp	r2, r3
 800507c:	d348      	bcc.n	8005110 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800507e:	4b36      	ldr	r3, [pc, #216]	@ (8005158 <xTaskIncrementTick+0x150>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005088:	4b36      	ldr	r3, [pc, #216]	@ (8005164 <xTaskIncrementTick+0x15c>)
 800508a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800508e:	601a      	str	r2, [r3, #0]
					break;
 8005090:	e03e      	b.n	8005110 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005092:	4b31      	ldr	r3, [pc, #196]	@ (8005158 <xTaskIncrementTick+0x150>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d203      	bcs.n	80050b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005164 <xTaskIncrementTick+0x15c>)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050b0:	e02e      	b.n	8005110 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fc81 	bl	80049be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	3318      	adds	r3, #24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fc78 	bl	80049be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	2201      	movs	r2, #1
 80050d4:	409a      	lsls	r2, r3
 80050d6:	4b24      	ldr	r3, [pc, #144]	@ (8005168 <xTaskIncrementTick+0x160>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4313      	orrs	r3, r2
 80050dc:	4a22      	ldr	r2, [pc, #136]	@ (8005168 <xTaskIncrementTick+0x160>)
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4a1f      	ldr	r2, [pc, #124]	@ (800516c <xTaskIncrementTick+0x164>)
 80050ee:	441a      	add	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f7ff fc04 	bl	8004904 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005100:	4b1b      	ldr	r3, [pc, #108]	@ (8005170 <xTaskIncrementTick+0x168>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	429a      	cmp	r2, r3
 8005108:	d3b9      	bcc.n	800507e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800510a:	2301      	movs	r3, #1
 800510c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800510e:	e7b6      	b.n	800507e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005110:	4b17      	ldr	r3, [pc, #92]	@ (8005170 <xTaskIncrementTick+0x168>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005116:	4915      	ldr	r1, [pc, #84]	@ (800516c <xTaskIncrementTick+0x164>)
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d901      	bls.n	800512c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800512c:	4b11      	ldr	r3, [pc, #68]	@ (8005174 <xTaskIncrementTick+0x16c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d007      	beq.n	8005144 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e004      	b.n	8005144 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800513a:	4b0f      	ldr	r3, [pc, #60]	@ (8005178 <xTaskIncrementTick+0x170>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3301      	adds	r3, #1
 8005140:	4a0d      	ldr	r2, [pc, #52]	@ (8005178 <xTaskIncrementTick+0x170>)
 8005142:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005144:	697b      	ldr	r3, [r7, #20]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	200005d4 	.word	0x200005d4
 8005154:	200005b0 	.word	0x200005b0
 8005158:	20000564 	.word	0x20000564
 800515c:	20000568 	.word	0x20000568
 8005160:	200005c4 	.word	0x200005c4
 8005164:	200005cc 	.word	0x200005cc
 8005168:	200005b4 	.word	0x200005b4
 800516c:	200004b0 	.word	0x200004b0
 8005170:	200004ac 	.word	0x200004ac
 8005174:	200005c0 	.word	0x200005c0
 8005178:	200005bc 	.word	0x200005bc

0800517c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005182:	4b2a      	ldr	r3, [pc, #168]	@ (800522c <vTaskSwitchContext+0xb0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800518a:	4b29      	ldr	r3, [pc, #164]	@ (8005230 <vTaskSwitchContext+0xb4>)
 800518c:	2201      	movs	r2, #1
 800518e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005190:	e045      	b.n	800521e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005192:	4b27      	ldr	r3, [pc, #156]	@ (8005230 <vTaskSwitchContext+0xb4>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005198:	4b26      	ldr	r3, [pc, #152]	@ (8005234 <vTaskSwitchContext+0xb8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	fab3 f383 	clz	r3, r3
 80051a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80051a6:	7afb      	ldrb	r3, [r7, #11]
 80051a8:	f1c3 031f 	rsb	r3, r3, #31
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	4922      	ldr	r1, [pc, #136]	@ (8005238 <vTaskSwitchContext+0xbc>)
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10b      	bne.n	80051da <vTaskSwitchContext+0x5e>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	607b      	str	r3, [r7, #4]
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	e7fd      	b.n	80051d6 <vTaskSwitchContext+0x5a>
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4a14      	ldr	r2, [pc, #80]	@ (8005238 <vTaskSwitchContext+0xbc>)
 80051e6:	4413      	add	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	605a      	str	r2, [r3, #4]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	3308      	adds	r3, #8
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d104      	bne.n	800520a <vTaskSwitchContext+0x8e>
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	605a      	str	r2, [r3, #4]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <vTaskSwitchContext+0xc0>)
 8005212:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005214:	4b09      	ldr	r3, [pc, #36]	@ (800523c <vTaskSwitchContext+0xc0>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	334c      	adds	r3, #76	@ 0x4c
 800521a:	4a09      	ldr	r2, [pc, #36]	@ (8005240 <vTaskSwitchContext+0xc4>)
 800521c:	6013      	str	r3, [r2, #0]
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	200005d4 	.word	0x200005d4
 8005230:	200005c0 	.word	0x200005c0
 8005234:	200005b4 	.word	0x200005b4
 8005238:	200004b0 	.word	0x200004b0
 800523c:	200004ac 	.word	0x200004ac
 8005240:	20000010 	.word	0x20000010

08005244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800524c:	f000 f852 	bl	80052f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005250:	4b06      	ldr	r3, [pc, #24]	@ (800526c <prvIdleTask+0x28>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d9f9      	bls.n	800524c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005258:	4b05      	ldr	r3, [pc, #20]	@ (8005270 <prvIdleTask+0x2c>)
 800525a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005268:	e7f0      	b.n	800524c <prvIdleTask+0x8>
 800526a:	bf00      	nop
 800526c:	200004b0 	.word	0x200004b0
 8005270:	e000ed04 	.word	0xe000ed04

08005274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800527a:	2300      	movs	r3, #0
 800527c:	607b      	str	r3, [r7, #4]
 800527e:	e00c      	b.n	800529a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4a12      	ldr	r2, [pc, #72]	@ (80052d4 <prvInitialiseTaskLists+0x60>)
 800528c:	4413      	add	r3, r2
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fb0b 	bl	80048aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3301      	adds	r3, #1
 8005298:	607b      	str	r3, [r7, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b06      	cmp	r3, #6
 800529e:	d9ef      	bls.n	8005280 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052a0:	480d      	ldr	r0, [pc, #52]	@ (80052d8 <prvInitialiseTaskLists+0x64>)
 80052a2:	f7ff fb02 	bl	80048aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052a6:	480d      	ldr	r0, [pc, #52]	@ (80052dc <prvInitialiseTaskLists+0x68>)
 80052a8:	f7ff faff 	bl	80048aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052ac:	480c      	ldr	r0, [pc, #48]	@ (80052e0 <prvInitialiseTaskLists+0x6c>)
 80052ae:	f7ff fafc 	bl	80048aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052b2:	480c      	ldr	r0, [pc, #48]	@ (80052e4 <prvInitialiseTaskLists+0x70>)
 80052b4:	f7ff faf9 	bl	80048aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052b8:	480b      	ldr	r0, [pc, #44]	@ (80052e8 <prvInitialiseTaskLists+0x74>)
 80052ba:	f7ff faf6 	bl	80048aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052be:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <prvInitialiseTaskLists+0x78>)
 80052c0:	4a05      	ldr	r2, [pc, #20]	@ (80052d8 <prvInitialiseTaskLists+0x64>)
 80052c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052c4:	4b0a      	ldr	r3, [pc, #40]	@ (80052f0 <prvInitialiseTaskLists+0x7c>)
 80052c6:	4a05      	ldr	r2, [pc, #20]	@ (80052dc <prvInitialiseTaskLists+0x68>)
 80052c8:	601a      	str	r2, [r3, #0]
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	200004b0 	.word	0x200004b0
 80052d8:	2000053c 	.word	0x2000053c
 80052dc:	20000550 	.word	0x20000550
 80052e0:	2000056c 	.word	0x2000056c
 80052e4:	20000580 	.word	0x20000580
 80052e8:	20000598 	.word	0x20000598
 80052ec:	20000564 	.word	0x20000564
 80052f0:	20000568 	.word	0x20000568

080052f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052fa:	e019      	b.n	8005330 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80052fc:	f000 fa14 	bl	8005728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005300:	4b10      	ldr	r3, [pc, #64]	@ (8005344 <prvCheckTasksWaitingTermination+0x50>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fb56 	bl	80049be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005312:	4b0d      	ldr	r3, [pc, #52]	@ (8005348 <prvCheckTasksWaitingTermination+0x54>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3b01      	subs	r3, #1
 8005318:	4a0b      	ldr	r2, [pc, #44]	@ (8005348 <prvCheckTasksWaitingTermination+0x54>)
 800531a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800531c:	4b0b      	ldr	r3, [pc, #44]	@ (800534c <prvCheckTasksWaitingTermination+0x58>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3b01      	subs	r3, #1
 8005322:	4a0a      	ldr	r2, [pc, #40]	@ (800534c <prvCheckTasksWaitingTermination+0x58>)
 8005324:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005326:	f000 fa31 	bl	800578c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f810 	bl	8005350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005330:	4b06      	ldr	r3, [pc, #24]	@ (800534c <prvCheckTasksWaitingTermination+0x58>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e1      	bne.n	80052fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000580 	.word	0x20000580
 8005348:	200005ac 	.word	0x200005ac
 800534c:	20000594 	.word	0x20000594

08005350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	334c      	adds	r3, #76	@ 0x4c
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fcb9 	bl	8005cd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005368:	2b00      	cmp	r3, #0
 800536a:	d108      	bne.n	800537e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fb87 	bl	8005a84 <vPortFree>
				vPortFree( pxTCB );
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fb84 	bl	8005a84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800537c:	e019      	b.n	80053b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005384:	2b01      	cmp	r3, #1
 8005386:	d103      	bne.n	8005390 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fb7b 	bl	8005a84 <vPortFree>
	}
 800538e:	e010      	b.n	80053b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005396:	2b02      	cmp	r3, #2
 8005398:	d00b      	beq.n	80053b2 <prvDeleteTCB+0x62>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	60fb      	str	r3, [r7, #12]
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	e7fd      	b.n	80053ae <prvDeleteTCB+0x5e>
	}
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053c2:	4b0c      	ldr	r3, [pc, #48]	@ (80053f4 <prvResetNextTaskUnblockTime+0x38>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053cc:	4b0a      	ldr	r3, [pc, #40]	@ (80053f8 <prvResetNextTaskUnblockTime+0x3c>)
 80053ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053d4:	e008      	b.n	80053e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d6:	4b07      	ldr	r3, [pc, #28]	@ (80053f4 <prvResetNextTaskUnblockTime+0x38>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	4a04      	ldr	r2, [pc, #16]	@ (80053f8 <prvResetNextTaskUnblockTime+0x3c>)
 80053e6:	6013      	str	r3, [r2, #0]
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	20000564 	.word	0x20000564
 80053f8:	200005cc 	.word	0x200005cc

080053fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005406:	4b29      	ldr	r3, [pc, #164]	@ (80054ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800540c:	4b28      	ldr	r3, [pc, #160]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3304      	adds	r3, #4
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fad3 	bl	80049be <uxListRemove>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800541e:	4b24      	ldr	r3, [pc, #144]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005424:	2201      	movs	r2, #1
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43da      	mvns	r2, r3
 800542c:	4b21      	ldr	r3, [pc, #132]	@ (80054b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4013      	ands	r3, r2
 8005432:	4a20      	ldr	r2, [pc, #128]	@ (80054b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005434:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800543c:	d10a      	bne.n	8005454 <prvAddCurrentTaskToDelayedList+0x58>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005444:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3304      	adds	r3, #4
 800544a:	4619      	mov	r1, r3
 800544c:	481a      	ldr	r0, [pc, #104]	@ (80054b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800544e:	f7ff fa59 	bl	8004904 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005452:	e026      	b.n	80054a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4413      	add	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800545c:	4b14      	ldr	r3, [pc, #80]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	429a      	cmp	r2, r3
 800546a:	d209      	bcs.n	8005480 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800546c:	4b13      	ldr	r3, [pc, #76]	@ (80054bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b0f      	ldr	r3, [pc, #60]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3304      	adds	r3, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f7ff fa67 	bl	800494c <vListInsert>
}
 800547e:	e010      	b.n	80054a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005480:	4b0f      	ldr	r3, [pc, #60]	@ (80054c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7ff fa5d 	bl	800494c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005492:	4b0c      	ldr	r3, [pc, #48]	@ (80054c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	d202      	bcs.n	80054a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800549c:	4a09      	ldr	r2, [pc, #36]	@ (80054c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	6013      	str	r3, [r2, #0]
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	200005b0 	.word	0x200005b0
 80054b0:	200004ac 	.word	0x200004ac
 80054b4:	200005b4 	.word	0x200005b4
 80054b8:	20000598 	.word	0x20000598
 80054bc:	20000568 	.word	0x20000568
 80054c0:	20000564 	.word	0x20000564
 80054c4:	200005cc 	.word	0x200005cc

080054c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3b04      	subs	r3, #4
 80054d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3b04      	subs	r3, #4
 80054e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f023 0201 	bic.w	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3b04      	subs	r3, #4
 80054f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054f8:	4a0c      	ldr	r2, [pc, #48]	@ (800552c <pxPortInitialiseStack+0x64>)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3b14      	subs	r3, #20
 8005502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3b04      	subs	r3, #4
 800550e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f06f 0202 	mvn.w	r2, #2
 8005516:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3b20      	subs	r3, #32
 800551c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800551e:	68fb      	ldr	r3, [r7, #12]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	08005531 	.word	0x08005531

08005530 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800553a:	4b13      	ldr	r3, [pc, #76]	@ (8005588 <prvTaskExitError+0x58>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005542:	d00b      	beq.n	800555c <prvTaskExitError+0x2c>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	60fb      	str	r3, [r7, #12]
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <prvTaskExitError+0x28>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	60bb      	str	r3, [r7, #8]
}
 800556e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005570:	bf00      	nop
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0fc      	beq.n	8005572 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	2000000c 	.word	0x2000000c
 800558c:	00000000 	.word	0x00000000

08005590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005590:	4b07      	ldr	r3, [pc, #28]	@ (80055b0 <pxCurrentTCBConst2>)
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	6808      	ldr	r0, [r1, #0]
 8005596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559a:	f380 8809 	msr	PSP, r0
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f04f 0000 	mov.w	r0, #0
 80055a6:	f380 8811 	msr	BASEPRI, r0
 80055aa:	4770      	bx	lr
 80055ac:	f3af 8000 	nop.w

080055b0 <pxCurrentTCBConst2>:
 80055b0:	200004ac 	.word	0x200004ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop

080055b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055b8:	4808      	ldr	r0, [pc, #32]	@ (80055dc <prvPortStartFirstTask+0x24>)
 80055ba:	6800      	ldr	r0, [r0, #0]
 80055bc:	6800      	ldr	r0, [r0, #0]
 80055be:	f380 8808 	msr	MSP, r0
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f380 8814 	msr	CONTROL, r0
 80055ca:	b662      	cpsie	i
 80055cc:	b661      	cpsie	f
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	df00      	svc	0
 80055d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055da:	bf00      	nop
 80055dc:	e000ed08 	.word	0xe000ed08

080055e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055e6:	4b47      	ldr	r3, [pc, #284]	@ (8005704 <xPortStartScheduler+0x124>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a47      	ldr	r2, [pc, #284]	@ (8005708 <xPortStartScheduler+0x128>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10b      	bne.n	8005608 <xPortStartScheduler+0x28>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	60fb      	str	r3, [r7, #12]
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005608:	4b3e      	ldr	r3, [pc, #248]	@ (8005704 <xPortStartScheduler+0x124>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a3f      	ldr	r2, [pc, #252]	@ (800570c <xPortStartScheduler+0x12c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d10b      	bne.n	800562a <xPortStartScheduler+0x4a>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	613b      	str	r3, [r7, #16]
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	e7fd      	b.n	8005626 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800562a:	4b39      	ldr	r3, [pc, #228]	@ (8005710 <xPortStartScheduler+0x130>)
 800562c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	22ff      	movs	r2, #255	@ 0xff
 800563a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4b31      	ldr	r3, [pc, #196]	@ (8005714 <xPortStartScheduler+0x134>)
 8005650:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005652:	4b31      	ldr	r3, [pc, #196]	@ (8005718 <xPortStartScheduler+0x138>)
 8005654:	2207      	movs	r2, #7
 8005656:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005658:	e009      	b.n	800566e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800565a:	4b2f      	ldr	r3, [pc, #188]	@ (8005718 <xPortStartScheduler+0x138>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3b01      	subs	r3, #1
 8005660:	4a2d      	ldr	r2, [pc, #180]	@ (8005718 <xPortStartScheduler+0x138>)
 8005662:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	b2db      	uxtb	r3, r3
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005676:	2b80      	cmp	r3, #128	@ 0x80
 8005678:	d0ef      	beq.n	800565a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800567a:	4b27      	ldr	r3, [pc, #156]	@ (8005718 <xPortStartScheduler+0x138>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1c3 0307 	rsb	r3, r3, #7
 8005682:	2b04      	cmp	r3, #4
 8005684:	d00b      	beq.n	800569e <xPortStartScheduler+0xbe>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	60bb      	str	r3, [r7, #8]
}
 8005698:	bf00      	nop
 800569a:	bf00      	nop
 800569c:	e7fd      	b.n	800569a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800569e:	4b1e      	ldr	r3, [pc, #120]	@ (8005718 <xPortStartScheduler+0x138>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005718 <xPortStartScheduler+0x138>)
 80056a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005718 <xPortStartScheduler+0x138>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056b0:	4a19      	ldr	r2, [pc, #100]	@ (8005718 <xPortStartScheduler+0x138>)
 80056b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056bc:	4b17      	ldr	r3, [pc, #92]	@ (800571c <xPortStartScheduler+0x13c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a16      	ldr	r2, [pc, #88]	@ (800571c <xPortStartScheduler+0x13c>)
 80056c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80056c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056c8:	4b14      	ldr	r3, [pc, #80]	@ (800571c <xPortStartScheduler+0x13c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a13      	ldr	r2, [pc, #76]	@ (800571c <xPortStartScheduler+0x13c>)
 80056ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80056d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056d4:	f000 f8da 	bl	800588c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056d8:	4b11      	ldr	r3, [pc, #68]	@ (8005720 <xPortStartScheduler+0x140>)
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056de:	f000 f8f9 	bl	80058d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056e2:	4b10      	ldr	r3, [pc, #64]	@ (8005724 <xPortStartScheduler+0x144>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005724 <xPortStartScheduler+0x144>)
 80056e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80056ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056ee:	f7ff ff63 	bl	80055b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056f2:	f7ff fd43 	bl	800517c <vTaskSwitchContext>
	prvTaskExitError();
 80056f6:	f7ff ff1b 	bl	8005530 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	e000ed00 	.word	0xe000ed00
 8005708:	410fc271 	.word	0x410fc271
 800570c:	410fc270 	.word	0x410fc270
 8005710:	e000e400 	.word	0xe000e400
 8005714:	200005d8 	.word	0x200005d8
 8005718:	200005dc 	.word	0x200005dc
 800571c:	e000ed20 	.word	0xe000ed20
 8005720:	2000000c 	.word	0x2000000c
 8005724:	e000ef34 	.word	0xe000ef34

08005728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	607b      	str	r3, [r7, #4]
}
 8005740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005742:	4b10      	ldr	r3, [pc, #64]	@ (8005784 <vPortEnterCritical+0x5c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3301      	adds	r3, #1
 8005748:	4a0e      	ldr	r2, [pc, #56]	@ (8005784 <vPortEnterCritical+0x5c>)
 800574a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800574c:	4b0d      	ldr	r3, [pc, #52]	@ (8005784 <vPortEnterCritical+0x5c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d110      	bne.n	8005776 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005754:	4b0c      	ldr	r3, [pc, #48]	@ (8005788 <vPortEnterCritical+0x60>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <vPortEnterCritical+0x4e>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	603b      	str	r3, [r7, #0]
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	e7fd      	b.n	8005772 <vPortEnterCritical+0x4a>
	}
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	2000000c 	.word	0x2000000c
 8005788:	e000ed04 	.word	0xe000ed04

0800578c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <vPortExitCritical+0x50>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10b      	bne.n	80057b2 <vPortExitCritical+0x26>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	607b      	str	r3, [r7, #4]
}
 80057ac:	bf00      	nop
 80057ae:	bf00      	nop
 80057b0:	e7fd      	b.n	80057ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057b2:	4b0a      	ldr	r3, [pc, #40]	@ (80057dc <vPortExitCritical+0x50>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	4a08      	ldr	r2, [pc, #32]	@ (80057dc <vPortExitCritical+0x50>)
 80057ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057bc:	4b07      	ldr	r3, [pc, #28]	@ (80057dc <vPortExitCritical+0x50>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <vPortExitCritical+0x44>
 80057c4:	2300      	movs	r3, #0
 80057c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	2000000c 	.word	0x2000000c

080057e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057e0:	f3ef 8009 	mrs	r0, PSP
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	4b15      	ldr	r3, [pc, #84]	@ (8005840 <pxCurrentTCBConst>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	f01e 0f10 	tst.w	lr, #16
 80057f0:	bf08      	it	eq
 80057f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fa:	6010      	str	r0, [r2, #0]
 80057fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005804:	f380 8811 	msr	BASEPRI, r0
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f7ff fcb4 	bl	800517c <vTaskSwitchContext>
 8005814:	f04f 0000 	mov.w	r0, #0
 8005818:	f380 8811 	msr	BASEPRI, r0
 800581c:	bc09      	pop	{r0, r3}
 800581e:	6819      	ldr	r1, [r3, #0]
 8005820:	6808      	ldr	r0, [r1, #0]
 8005822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005826:	f01e 0f10 	tst.w	lr, #16
 800582a:	bf08      	it	eq
 800582c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005830:	f380 8809 	msr	PSP, r0
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	f3af 8000 	nop.w

08005840 <pxCurrentTCBConst>:
 8005840:	200004ac 	.word	0x200004ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop

08005848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	607b      	str	r3, [r7, #4]
}
 8005860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005862:	f7ff fbd1 	bl	8005008 <xTaskIncrementTick>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800586c:	4b06      	ldr	r3, [pc, #24]	@ (8005888 <SysTick_Handler+0x40>)
 800586e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f383 8811 	msr	BASEPRI, r3
}
 800587e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005890:	4b0b      	ldr	r3, [pc, #44]	@ (80058c0 <vPortSetupTimerInterrupt+0x34>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005896:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <vPortSetupTimerInterrupt+0x38>)
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800589c:	4b0a      	ldr	r3, [pc, #40]	@ (80058c8 <vPortSetupTimerInterrupt+0x3c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0a      	ldr	r2, [pc, #40]	@ (80058cc <vPortSetupTimerInterrupt+0x40>)
 80058a2:	fba2 2303 	umull	r2, r3, r2, r3
 80058a6:	099b      	lsrs	r3, r3, #6
 80058a8:	4a09      	ldr	r2, [pc, #36]	@ (80058d0 <vPortSetupTimerInterrupt+0x44>)
 80058aa:	3b01      	subs	r3, #1
 80058ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058ae:	4b04      	ldr	r3, [pc, #16]	@ (80058c0 <vPortSetupTimerInterrupt+0x34>)
 80058b0:	2207      	movs	r2, #7
 80058b2:	601a      	str	r2, [r3, #0]
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	e000e010 	.word	0xe000e010
 80058c4:	e000e018 	.word	0xe000e018
 80058c8:	20000000 	.word	0x20000000
 80058cc:	10624dd3 	.word	0x10624dd3
 80058d0:	e000e014 	.word	0xe000e014

080058d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80058e4 <vPortEnableVFP+0x10>
 80058d8:	6801      	ldr	r1, [r0, #0]
 80058da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80058de:	6001      	str	r1, [r0, #0]
 80058e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058e2:	bf00      	nop
 80058e4:	e000ed88 	.word	0xe000ed88

080058e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	@ 0x28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058f4:	f7ff fadc 	bl	8004eb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058f8:	4b5c      	ldr	r3, [pc, #368]	@ (8005a6c <pvPortMalloc+0x184>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005900:	f000 f924 	bl	8005b4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005904:	4b5a      	ldr	r3, [pc, #360]	@ (8005a70 <pvPortMalloc+0x188>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 8095 	bne.w	8005a3c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01e      	beq.n	8005956 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005918:	2208      	movs	r2, #8
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b00      	cmp	r3, #0
 8005928:	d015      	beq.n	8005956 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f023 0307 	bic.w	r3, r3, #7
 8005930:	3308      	adds	r3, #8
 8005932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <pvPortMalloc+0x6e>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	617b      	str	r3, [r7, #20]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d06f      	beq.n	8005a3c <pvPortMalloc+0x154>
 800595c:	4b45      	ldr	r3, [pc, #276]	@ (8005a74 <pvPortMalloc+0x18c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	429a      	cmp	r2, r3
 8005964:	d86a      	bhi.n	8005a3c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005966:	4b44      	ldr	r3, [pc, #272]	@ (8005a78 <pvPortMalloc+0x190>)
 8005968:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800596a:	4b43      	ldr	r3, [pc, #268]	@ (8005a78 <pvPortMalloc+0x190>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005970:	e004      	b.n	800597c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d903      	bls.n	800598e <pvPortMalloc+0xa6>
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f1      	bne.n	8005972 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800598e:	4b37      	ldr	r3, [pc, #220]	@ (8005a6c <pvPortMalloc+0x184>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005994:	429a      	cmp	r2, r3
 8005996:	d051      	beq.n	8005a3c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2208      	movs	r2, #8
 800599e:	4413      	add	r3, r2
 80059a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	1ad2      	subs	r2, r2, r3
 80059b2:	2308      	movs	r3, #8
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d920      	bls.n	80059fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4413      	add	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <pvPortMalloc+0xfc>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	613b      	str	r3, [r7, #16]
}
 80059de:	bf00      	nop
 80059e0:	bf00      	nop
 80059e2:	e7fd      	b.n	80059e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	1ad2      	subs	r2, r2, r3
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059f6:	69b8      	ldr	r0, [r7, #24]
 80059f8:	f000 f90a 	bl	8005c10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005a74 <pvPortMalloc+0x18c>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	4a1b      	ldr	r2, [pc, #108]	@ (8005a74 <pvPortMalloc+0x18c>)
 8005a08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005a74 <pvPortMalloc+0x18c>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005a7c <pvPortMalloc+0x194>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d203      	bcs.n	8005a1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a16:	4b17      	ldr	r3, [pc, #92]	@ (8005a74 <pvPortMalloc+0x18c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a18      	ldr	r2, [pc, #96]	@ (8005a7c <pvPortMalloc+0x194>)
 8005a1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <pvPortMalloc+0x188>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a32:	4b13      	ldr	r3, [pc, #76]	@ (8005a80 <pvPortMalloc+0x198>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	4a11      	ldr	r2, [pc, #68]	@ (8005a80 <pvPortMalloc+0x198>)
 8005a3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a3c:	f7ff fa46 	bl	8004ecc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <pvPortMalloc+0x17a>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	60fb      	str	r3, [r7, #12]
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	e7fd      	b.n	8005a5e <pvPortMalloc+0x176>
	return pvReturn;
 8005a62:	69fb      	ldr	r3, [r7, #28]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3728      	adds	r7, #40	@ 0x28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	200041e8 	.word	0x200041e8
 8005a70:	200041fc 	.word	0x200041fc
 8005a74:	200041ec 	.word	0x200041ec
 8005a78:	200041e0 	.word	0x200041e0
 8005a7c:	200041f0 	.word	0x200041f0
 8005a80:	200041f4 	.word	0x200041f4

08005a84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d04f      	beq.n	8005b36 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a96:	2308      	movs	r3, #8
 8005a98:	425b      	negs	r3, r3
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	4b25      	ldr	r3, [pc, #148]	@ (8005b40 <vPortFree+0xbc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10b      	bne.n	8005aca <vPortFree+0x46>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	60fb      	str	r3, [r7, #12]
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	e7fd      	b.n	8005ac6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <vPortFree+0x66>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	60bb      	str	r3, [r7, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	e7fd      	b.n	8005ae6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	4b14      	ldr	r3, [pc, #80]	@ (8005b40 <vPortFree+0xbc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4013      	ands	r3, r2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01e      	beq.n	8005b36 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11a      	bne.n	8005b36 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	4b0e      	ldr	r3, [pc, #56]	@ (8005b40 <vPortFree+0xbc>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b10:	f7ff f9ce 	bl	8004eb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <vPortFree+0xc0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	4a09      	ldr	r2, [pc, #36]	@ (8005b44 <vPortFree+0xc0>)
 8005b20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b22:	6938      	ldr	r0, [r7, #16]
 8005b24:	f000 f874 	bl	8005c10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b28:	4b07      	ldr	r3, [pc, #28]	@ (8005b48 <vPortFree+0xc4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	4a06      	ldr	r2, [pc, #24]	@ (8005b48 <vPortFree+0xc4>)
 8005b30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b32:	f7ff f9cb 	bl	8004ecc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b36:	bf00      	nop
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	200041fc 	.word	0x200041fc
 8005b44:	200041ec 	.word	0x200041ec
 8005b48:	200041f8 	.word	0x200041f8

08005b4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b52:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005b56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b58:	4b27      	ldr	r3, [pc, #156]	@ (8005bf8 <prvHeapInit+0xac>)
 8005b5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00c      	beq.n	8005b80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3307      	adds	r3, #7
 8005b6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0307 	bic.w	r3, r3, #7
 8005b72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf8 <prvHeapInit+0xac>)
 8005b7c:	4413      	add	r3, r2
 8005b7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b84:	4a1d      	ldr	r2, [pc, #116]	@ (8005bfc <prvHeapInit+0xb0>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8005bfc <prvHeapInit+0xb0>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	4413      	add	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b98:	2208      	movs	r2, #8
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0307 	bic.w	r3, r3, #7
 8005ba6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4a15      	ldr	r2, [pc, #84]	@ (8005c00 <prvHeapInit+0xb4>)
 8005bac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bae:	4b14      	ldr	r3, [pc, #80]	@ (8005c00 <prvHeapInit+0xb4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bb6:	4b12      	ldr	r3, [pc, #72]	@ (8005c00 <prvHeapInit+0xb4>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c00 <prvHeapInit+0xb4>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8005c04 <prvHeapInit+0xb8>)
 8005bda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4a09      	ldr	r2, [pc, #36]	@ (8005c08 <prvHeapInit+0xbc>)
 8005be2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005be4:	4b09      	ldr	r3, [pc, #36]	@ (8005c0c <prvHeapInit+0xc0>)
 8005be6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005bea:	601a      	str	r2, [r3, #0]
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	200005e0 	.word	0x200005e0
 8005bfc:	200041e0 	.word	0x200041e0
 8005c00:	200041e8 	.word	0x200041e8
 8005c04:	200041f0 	.word	0x200041f0
 8005c08:	200041ec 	.word	0x200041ec
 8005c0c:	200041fc 	.word	0x200041fc

08005c10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c18:	4b28      	ldr	r3, [pc, #160]	@ (8005cbc <prvInsertBlockIntoFreeList+0xac>)
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e002      	b.n	8005c24 <prvInsertBlockIntoFreeList+0x14>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d8f7      	bhi.n	8005c1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	4413      	add	r3, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d108      	bne.n	8005c52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	441a      	add	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	441a      	add	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d118      	bne.n	8005c98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	4b15      	ldr	r3, [pc, #84]	@ (8005cc0 <prvInsertBlockIntoFreeList+0xb0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d00d      	beq.n	8005c8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	441a      	add	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e008      	b.n	8005ca0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc0 <prvInsertBlockIntoFreeList+0xb0>)
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e003      	b.n	8005ca0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d002      	beq.n	8005cae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cae:	bf00      	nop
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	200041e0 	.word	0x200041e0
 8005cc0:	200041e8 	.word	0x200041e8

08005cc4 <memset>:
 8005cc4:	4402      	add	r2, r0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d100      	bne.n	8005cce <memset+0xa>
 8005ccc:	4770      	bx	lr
 8005cce:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd2:	e7f9      	b.n	8005cc8 <memset+0x4>

08005cd4 <_reclaim_reent>:
 8005cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8005d8c <_reclaim_reent+0xb8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4283      	cmp	r3, r0
 8005cda:	b570      	push	{r4, r5, r6, lr}
 8005cdc:	4604      	mov	r4, r0
 8005cde:	d053      	beq.n	8005d88 <_reclaim_reent+0xb4>
 8005ce0:	69c3      	ldr	r3, [r0, #28]
 8005ce2:	b31b      	cbz	r3, 8005d2c <_reclaim_reent+0x58>
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	b163      	cbz	r3, 8005d02 <_reclaim_reent+0x2e>
 8005ce8:	2500      	movs	r5, #0
 8005cea:	69e3      	ldr	r3, [r4, #28]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	5959      	ldr	r1, [r3, r5]
 8005cf0:	b9b1      	cbnz	r1, 8005d20 <_reclaim_reent+0x4c>
 8005cf2:	3504      	adds	r5, #4
 8005cf4:	2d80      	cmp	r5, #128	@ 0x80
 8005cf6:	d1f8      	bne.n	8005cea <_reclaim_reent+0x16>
 8005cf8:	69e3      	ldr	r3, [r4, #28]
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	68d9      	ldr	r1, [r3, #12]
 8005cfe:	f000 f86d 	bl	8005ddc <_free_r>
 8005d02:	69e3      	ldr	r3, [r4, #28]
 8005d04:	6819      	ldr	r1, [r3, #0]
 8005d06:	b111      	cbz	r1, 8005d0e <_reclaim_reent+0x3a>
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 f867 	bl	8005ddc <_free_r>
 8005d0e:	69e3      	ldr	r3, [r4, #28]
 8005d10:	689d      	ldr	r5, [r3, #8]
 8005d12:	b15d      	cbz	r5, 8005d2c <_reclaim_reent+0x58>
 8005d14:	4629      	mov	r1, r5
 8005d16:	4620      	mov	r0, r4
 8005d18:	682d      	ldr	r5, [r5, #0]
 8005d1a:	f000 f85f 	bl	8005ddc <_free_r>
 8005d1e:	e7f8      	b.n	8005d12 <_reclaim_reent+0x3e>
 8005d20:	680e      	ldr	r6, [r1, #0]
 8005d22:	4620      	mov	r0, r4
 8005d24:	f000 f85a 	bl	8005ddc <_free_r>
 8005d28:	4631      	mov	r1, r6
 8005d2a:	e7e1      	b.n	8005cf0 <_reclaim_reent+0x1c>
 8005d2c:	6961      	ldr	r1, [r4, #20]
 8005d2e:	b111      	cbz	r1, 8005d36 <_reclaim_reent+0x62>
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 f853 	bl	8005ddc <_free_r>
 8005d36:	69e1      	ldr	r1, [r4, #28]
 8005d38:	b111      	cbz	r1, 8005d40 <_reclaim_reent+0x6c>
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 f84e 	bl	8005ddc <_free_r>
 8005d40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005d42:	b111      	cbz	r1, 8005d4a <_reclaim_reent+0x76>
 8005d44:	4620      	mov	r0, r4
 8005d46:	f000 f849 	bl	8005ddc <_free_r>
 8005d4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d4c:	b111      	cbz	r1, 8005d54 <_reclaim_reent+0x80>
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f000 f844 	bl	8005ddc <_free_r>
 8005d54:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005d56:	b111      	cbz	r1, 8005d5e <_reclaim_reent+0x8a>
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 f83f 	bl	8005ddc <_free_r>
 8005d5e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005d60:	b111      	cbz	r1, 8005d68 <_reclaim_reent+0x94>
 8005d62:	4620      	mov	r0, r4
 8005d64:	f000 f83a 	bl	8005ddc <_free_r>
 8005d68:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005d6a:	b111      	cbz	r1, 8005d72 <_reclaim_reent+0x9e>
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f000 f835 	bl	8005ddc <_free_r>
 8005d72:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005d74:	b111      	cbz	r1, 8005d7c <_reclaim_reent+0xa8>
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 f830 	bl	8005ddc <_free_r>
 8005d7c:	6a23      	ldr	r3, [r4, #32]
 8005d7e:	b11b      	cbz	r3, 8005d88 <_reclaim_reent+0xb4>
 8005d80:	4620      	mov	r0, r4
 8005d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d86:	4718      	bx	r3
 8005d88:	bd70      	pop	{r4, r5, r6, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000010 	.word	0x20000010

08005d90 <__libc_init_array>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	4d0d      	ldr	r5, [pc, #52]	@ (8005dc8 <__libc_init_array+0x38>)
 8005d94:	4c0d      	ldr	r4, [pc, #52]	@ (8005dcc <__libc_init_array+0x3c>)
 8005d96:	1b64      	subs	r4, r4, r5
 8005d98:	10a4      	asrs	r4, r4, #2
 8005d9a:	2600      	movs	r6, #0
 8005d9c:	42a6      	cmp	r6, r4
 8005d9e:	d109      	bne.n	8005db4 <__libc_init_array+0x24>
 8005da0:	4d0b      	ldr	r5, [pc, #44]	@ (8005dd0 <__libc_init_array+0x40>)
 8005da2:	4c0c      	ldr	r4, [pc, #48]	@ (8005dd4 <__libc_init_array+0x44>)
 8005da4:	f000 f870 	bl	8005e88 <_init>
 8005da8:	1b64      	subs	r4, r4, r5
 8005daa:	10a4      	asrs	r4, r4, #2
 8005dac:	2600      	movs	r6, #0
 8005dae:	42a6      	cmp	r6, r4
 8005db0:	d105      	bne.n	8005dbe <__libc_init_array+0x2e>
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db8:	4798      	blx	r3
 8005dba:	3601      	adds	r6, #1
 8005dbc:	e7ee      	b.n	8005d9c <__libc_init_array+0xc>
 8005dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc2:	4798      	blx	r3
 8005dc4:	3601      	adds	r6, #1
 8005dc6:	e7f2      	b.n	8005dae <__libc_init_array+0x1e>
 8005dc8:	08005f68 	.word	0x08005f68
 8005dcc:	08005f68 	.word	0x08005f68
 8005dd0:	08005f68 	.word	0x08005f68
 8005dd4:	08005f6c 	.word	0x08005f6c

08005dd8 <__retarget_lock_acquire_recursive>:
 8005dd8:	4770      	bx	lr

08005dda <__retarget_lock_release_recursive>:
 8005dda:	4770      	bx	lr

08005ddc <_free_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4605      	mov	r5, r0
 8005de0:	2900      	cmp	r1, #0
 8005de2:	d041      	beq.n	8005e68 <_free_r+0x8c>
 8005de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005de8:	1f0c      	subs	r4, r1, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bfb8      	it	lt
 8005dee:	18e4      	addlt	r4, r4, r3
 8005df0:	f000 f83e 	bl	8005e70 <__malloc_lock>
 8005df4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e6c <_free_r+0x90>)
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	b933      	cbnz	r3, 8005e08 <_free_r+0x2c>
 8005dfa:	6063      	str	r3, [r4, #4]
 8005dfc:	6014      	str	r4, [r2, #0]
 8005dfe:	4628      	mov	r0, r5
 8005e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e04:	f000 b83a 	b.w	8005e7c <__malloc_unlock>
 8005e08:	42a3      	cmp	r3, r4
 8005e0a:	d908      	bls.n	8005e1e <_free_r+0x42>
 8005e0c:	6820      	ldr	r0, [r4, #0]
 8005e0e:	1821      	adds	r1, r4, r0
 8005e10:	428b      	cmp	r3, r1
 8005e12:	bf01      	itttt	eq
 8005e14:	6819      	ldreq	r1, [r3, #0]
 8005e16:	685b      	ldreq	r3, [r3, #4]
 8005e18:	1809      	addeq	r1, r1, r0
 8005e1a:	6021      	streq	r1, [r4, #0]
 8005e1c:	e7ed      	b.n	8005dfa <_free_r+0x1e>
 8005e1e:	461a      	mov	r2, r3
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	b10b      	cbz	r3, 8005e28 <_free_r+0x4c>
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	d9fa      	bls.n	8005e1e <_free_r+0x42>
 8005e28:	6811      	ldr	r1, [r2, #0]
 8005e2a:	1850      	adds	r0, r2, r1
 8005e2c:	42a0      	cmp	r0, r4
 8005e2e:	d10b      	bne.n	8005e48 <_free_r+0x6c>
 8005e30:	6820      	ldr	r0, [r4, #0]
 8005e32:	4401      	add	r1, r0
 8005e34:	1850      	adds	r0, r2, r1
 8005e36:	4283      	cmp	r3, r0
 8005e38:	6011      	str	r1, [r2, #0]
 8005e3a:	d1e0      	bne.n	8005dfe <_free_r+0x22>
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	6053      	str	r3, [r2, #4]
 8005e42:	4408      	add	r0, r1
 8005e44:	6010      	str	r0, [r2, #0]
 8005e46:	e7da      	b.n	8005dfe <_free_r+0x22>
 8005e48:	d902      	bls.n	8005e50 <_free_r+0x74>
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	602b      	str	r3, [r5, #0]
 8005e4e:	e7d6      	b.n	8005dfe <_free_r+0x22>
 8005e50:	6820      	ldr	r0, [r4, #0]
 8005e52:	1821      	adds	r1, r4, r0
 8005e54:	428b      	cmp	r3, r1
 8005e56:	bf04      	itt	eq
 8005e58:	6819      	ldreq	r1, [r3, #0]
 8005e5a:	685b      	ldreq	r3, [r3, #4]
 8005e5c:	6063      	str	r3, [r4, #4]
 8005e5e:	bf04      	itt	eq
 8005e60:	1809      	addeq	r1, r1, r0
 8005e62:	6021      	streq	r1, [r4, #0]
 8005e64:	6054      	str	r4, [r2, #4]
 8005e66:	e7ca      	b.n	8005dfe <_free_r+0x22>
 8005e68:	bd38      	pop	{r3, r4, r5, pc}
 8005e6a:	bf00      	nop
 8005e6c:	2000433c 	.word	0x2000433c

08005e70 <__malloc_lock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	@ (8005e78 <__malloc_lock+0x8>)
 8005e72:	f7ff bfb1 	b.w	8005dd8 <__retarget_lock_acquire_recursive>
 8005e76:	bf00      	nop
 8005e78:	20004338 	.word	0x20004338

08005e7c <__malloc_unlock>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	@ (8005e84 <__malloc_unlock+0x8>)
 8005e7e:	f7ff bfac 	b.w	8005dda <__retarget_lock_release_recursive>
 8005e82:	bf00      	nop
 8005e84:	20004338 	.word	0x20004338

08005e88 <_init>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr

08005e94 <_fini>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr
