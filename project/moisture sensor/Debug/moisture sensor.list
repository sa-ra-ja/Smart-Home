
moisture sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800042c  08000434  00001434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800042c  0800042c  00001434  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800042c  0800042c  00001434  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800042c  08000434  00001434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800042c  0800042c  0000142c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000430  08000430  00001430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001434  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b80  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002f0  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  000022d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006a  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ebd  00000000  00000000  000023e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b47  00000000  00000000  0001a29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b8f0  00000000  00000000  0001ade6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a66d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000168  00000000  00000000  000a671c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000a6884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000057  00000000  00000000  000a68a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000414 	.word	0x08000414

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000414 	.word	0x08000414

080001c8 <GPIO_Init>:

#include "stm32f4xx.h"

#define THRESHOLD 2000  // Change based on your sensor range

void GPIO_Init(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;     // Enable GPIOA clock
 80001cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000208 <GPIO_Init+0x40>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000208 <GPIO_Init+0x40>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA5 as output for LED
    GPIOA->MODER &= ~(3 << (5 * 2));
 80001d8:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <GPIO_Init+0x44>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0b      	ldr	r2, [pc, #44]	@ (800020c <GPIO_Init+0x44>)
 80001de:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001e2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1 << (5 * 2));
 80001e4:	4b09      	ldr	r3, [pc, #36]	@ (800020c <GPIO_Init+0x44>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a08      	ldr	r2, [pc, #32]	@ (800020c <GPIO_Init+0x44>)
 80001ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001ee:	6013      	str	r3, [r2, #0]

    // PA1 as analog input for moisture sensor
    GPIOA->MODER |= (3 << (1 * 2));          // Analog mode
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <GPIO_Init+0x44>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a05      	ldr	r2, [pc, #20]	@ (800020c <GPIO_Init+0x44>)
 80001f6:	f043 030c 	orr.w	r3, r3, #12
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800
 800020c:	40020000 	.word	0x40020000

08000210 <ADC1_Init>:

void ADC1_Init(void) {
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;      // Enable ADC1 clock
 8000214:	4b0e      	ldr	r3, [pc, #56]	@ (8000250 <ADC1_Init+0x40>)
 8000216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000218:	4a0d      	ldr	r2, [pc, #52]	@ (8000250 <ADC1_Init+0x40>)
 800021a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800021e:	6453      	str	r3, [r2, #68]	@ 0x44

    ADC1->CR2 = 0;                           // Reset control register
 8000220:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <ADC1_Init+0x44>)
 8000222:	2200      	movs	r2, #0
 8000224:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = 1;                          // Channel 1 (PA1)
 8000226:	4b0b      	ldr	r3, [pc, #44]	@ (8000254 <ADC1_Init+0x44>)
 8000228:	2201      	movs	r2, #1
 800022a:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SMPR2 |= (7 << 3);                 // Sample time for channel 1
 800022c:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <ADC1_Init+0x44>)
 800022e:	691b      	ldr	r3, [r3, #16]
 8000230:	4a08      	ldr	r2, [pc, #32]	@ (8000254 <ADC1_Init+0x44>)
 8000232:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8000236:	6113      	str	r3, [r2, #16]
    ADC1->CR2 |= ADC_CR2_ADON;              // Enable ADC1
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <ADC1_Init+0x44>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	4a05      	ldr	r2, [pc, #20]	@ (8000254 <ADC1_Init+0x44>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6093      	str	r3, [r2, #8]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40023800 	.word	0x40023800
 8000254:	40012000 	.word	0x40012000

08000258 <ADC_Read>:

uint16_t ADC_Read(void) {
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART;           // Start ADC conversion
 800025c:	4b0a      	ldr	r3, [pc, #40]	@ (8000288 <ADC_Read+0x30>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	4a09      	ldr	r2, [pc, #36]	@ (8000288 <ADC_Read+0x30>)
 8000262:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000266:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));       // Wait for conversion to complete
 8000268:	bf00      	nop
 800026a:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <ADC_Read+0x30>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f003 0302 	and.w	r3, r3, #2
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0f9      	beq.n	800026a <ADC_Read+0x12>
    return ADC1->DR;                         // Return ADC value
 8000276:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <ADC_Read+0x30>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027a:	b29b      	uxth	r3, r3
}
 800027c:	4618      	mov	r0, r3
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40012000 	.word	0x40012000

0800028c <delay>:

void delay(volatile uint32_t t) {
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    while (t--);
 8000294:	bf00      	nop
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	1e5a      	subs	r2, r3, #1
 800029a:	607a      	str	r2, [r7, #4]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d1fa      	bne.n	8000296 <delay+0xa>
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
	...

080002b0 <main>:

int main(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
    GPIO_Init();
 80002b6:	f7ff ff87 	bl	80001c8 <GPIO_Init>
    ADC1_Init();
 80002ba:	f7ff ffa9 	bl	8000210 <ADC1_Init>

    while (1) {
        uint16_t moisture = ADC_Read();
 80002be:	f7ff ffcb 	bl	8000258 <ADC_Read>
 80002c2:	4603      	mov	r3, r0
 80002c4:	80fb      	strh	r3, [r7, #6]

        if (moisture > THRESHOLD) {
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80002cc:	d906      	bls.n	80002dc <main+0x2c>
            GPIOA->ODR |= (1 << 5);  // Turn LED ON
 80002ce:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <main+0x40>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a07      	ldr	r2, [pc, #28]	@ (80002f0 <main+0x40>)
 80002d4:	f043 0320 	orr.w	r3, r3, #32
 80002d8:	6153      	str	r3, [r2, #20]
 80002da:	e005      	b.n	80002e8 <main+0x38>
        } else {
            GPIOA->ODR &= ~(1 << 5); // Turn LED OFF
 80002dc:	4b04      	ldr	r3, [pc, #16]	@ (80002f0 <main+0x40>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a03      	ldr	r2, [pc, #12]	@ (80002f0 <main+0x40>)
 80002e2:	f023 0320 	bic.w	r3, r3, #32
 80002e6:	6153      	str	r3, [r2, #20]
        }

        delay(100000);
 80002e8:	4802      	ldr	r0, [pc, #8]	@ (80002f4 <main+0x44>)
 80002ea:	f7ff ffcf 	bl	800028c <delay>
    while (1) {
 80002ee:	e7e6      	b.n	80002be <main+0xe>
 80002f0:	40020000 	.word	0x40020000
 80002f4:	000186a0 	.word	0x000186a0

080002f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002fc:	4b05      	ldr	r3, [pc, #20]	@ (8000314 <SystemInit+0x1c>)
 80002fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000302:	4a04      	ldr	r2, [pc, #16]	@ (8000314 <SystemInit+0x1c>)
 8000304:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000308:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 800030c:	f000 f804 	bl	8000318 <DWT_Init>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	e000ed00 	.word	0xe000ed00

08000318 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800031c:	4b14      	ldr	r3, [pc, #80]	@ (8000370 <DWT_Init+0x58>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	4a13      	ldr	r2, [pc, #76]	@ (8000370 <DWT_Init+0x58>)
 8000322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000326:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000328:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <DWT_Init+0x58>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4a10      	ldr	r2, [pc, #64]	@ (8000370 <DWT_Init+0x58>)
 800032e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000332:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000334:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <DWT_Init+0x5c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a0e      	ldr	r2, [pc, #56]	@ (8000374 <DWT_Init+0x5c>)
 800033a:	f023 0301 	bic.w	r3, r3, #1
 800033e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <DWT_Init+0x5c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a0b      	ldr	r2, [pc, #44]	@ (8000374 <DWT_Init+0x5c>)
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800034c:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <DWT_Init+0x5c>)
 800034e:	2200      	movs	r2, #0
 8000350:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000352:	bf00      	nop
    __ASM volatile ("NOP");
 8000354:	bf00      	nop
    __ASM volatile ("NOP");
 8000356:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <DWT_Init+0x5c>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	2b00      	cmp	r3, #0
 800035e:	bf0c      	ite	eq
 8000360:	2301      	moveq	r3, #1
 8000362:	2300      	movne	r3, #0
 8000364:	b2db      	uxtb	r3, r3
}
 8000366:	4618      	mov	r0, r3
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	e000edf0 	.word	0xe000edf0
 8000374:	e0001000 	.word	0xe0001000

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	@ (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800037c:	f7ff ffbc 	bl	80002f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	@ (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	@ (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	@ (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	@ (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	@ (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 f811 	bl	80003cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff ff81 	bl	80002b0 <main>

080003ae <LoopForever>:

LoopForever:
  b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003bc:	08000434 	.word	0x08000434
  ldr r2, =_sbss
 80003c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c4:	2000001c 	.word	0x2000001c

080003c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <__libc_init_array>:
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000404 <__libc_init_array+0x38>)
 80003d0:	4c0d      	ldr	r4, [pc, #52]	@ (8000408 <__libc_init_array+0x3c>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	2600      	movs	r6, #0
 80003d8:	42a6      	cmp	r6, r4
 80003da:	d109      	bne.n	80003f0 <__libc_init_array+0x24>
 80003dc:	4d0b      	ldr	r5, [pc, #44]	@ (800040c <__libc_init_array+0x40>)
 80003de:	4c0c      	ldr	r4, [pc, #48]	@ (8000410 <__libc_init_array+0x44>)
 80003e0:	f000 f818 	bl	8000414 <_init>
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	2600      	movs	r6, #0
 80003ea:	42a6      	cmp	r6, r4
 80003ec:	d105      	bne.n	80003fa <__libc_init_array+0x2e>
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f4:	4798      	blx	r3
 80003f6:	3601      	adds	r6, #1
 80003f8:	e7ee      	b.n	80003d8 <__libc_init_array+0xc>
 80003fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fe:	4798      	blx	r3
 8000400:	3601      	adds	r6, #1
 8000402:	e7f2      	b.n	80003ea <__libc_init_array+0x1e>
 8000404:	0800042c 	.word	0x0800042c
 8000408:	0800042c 	.word	0x0800042c
 800040c:	0800042c 	.word	0x0800042c
 8000410:	08000430 	.word	0x08000430

08000414 <_init>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr

08000420 <_fini>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr
